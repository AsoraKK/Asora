name: Deploy to asora-function-dev (Flex - direct ZIP)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-asora-function-dev-${{ github.ref }}
  cancel-in-progress: true

env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  RG: asora-psql-flex
  FUNC_APP: asora-function-dev
  NODE_VERSION: '20'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Block legacy SP secrets
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          set -euo pipefail
          if [ -n "${AZURE_CLIENT_SECRET:-}" ] || [ -n "${AZURE_CREDENTIALS:-}" ]; then
            echo "::error::Legacy Azure SP secret present. Migrate to OIDC only." >&2
            exit 1
          fi

      - name: Install zip utilities
        run: sudo apt-get update && sudo apt-get install -y zip unzip jq

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Disable Husky in CI
        run: echo "HUSKY=0" >> "$GITHUB_ENV"

      - name: Build function package (lockfile-safe dist)
        working-directory: functions
        run: |
          set -euo pipefail
          npm ci --no-audit --no-fund
          npm run build
          test -f dist/host.json || { echo "::error::dist/host.json missing"; ls -al dist; exit 1; }
          test -f dist/index.js || { echo "::error::dist/index.js missing"; ls -al dist; exit 1; }

          # Prod deps in dist
          if [ -f dist/package.json ]; then
            (cd dist && npm install --omit=dev --no-audit --no-fund)
          fi

          # Sanity: index.js must load without env (no top-level side effects)
          (cd dist && node -e "require('./index.js'); console.log('OK')") || { echo "::error::dist/index.js throws at load"; exit 1; }

          pushd dist >/dev/null
          zip -r ../dist-func.zip . -x "**/*.map" "**/*.ts" "__tests__/*" "tests/*"
          popd >/dev/null
          mv dist-func.zip "$GITHUB_WORKSPACE/dist-func.zip"

      - name: Validate package exists
        run: |
          set -euo pipefail
          test -f dist-func.zip || { echo "Missing dist-func.zip"; exit 3; }
          ls -lh dist-func.zip
          unzip -l dist-func.zip | head -n 60

      - name: Ensure Flex runtime configuration
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            CUR=$(az functionapp show -g "$RG" -n "$FUNC_APP" --query properties.functionAppConfig -o json || echo "{}")
            python3 - <<'PY' > body.json
            import json,sys,os
            cfg=json.loads(os.environ.get("CUR","{}")) if os.environ.get("CUR") else {}
            if not isinstance(cfg,dict): cfg={}
            # Remove deployment entirely - Flex doesn't use deployment.storage
            cfg.pop("deployment", None)
            # Build clean config with only allowed Flex fields
            clean_cfg = {
              "runtime": {"name": "node", "version": "20"},
              "scaleAndConcurrency": {"instanceMemoryMB": 2048, "maximumInstanceCount": 40}
            }
            # Preserve any other top-level keys except deployment
            for k in cfg:
              if k not in ("deployment", "runtime", "scaleAndConcurrency"):
                clean_cfg[k] = cfg[k]
            print(json.dumps({"properties": {"functionAppConfig": clean_cfg}}))
            PY
            az rest --method patch \
              --uri "/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$RG/providers/Microsoft.Web/sites/$FUNC_APP?api-version=2023-12-01" \
              --body @body.json >/dev/null

            # Only FUNCTIONS_EXTENSION_VERSION is allowed. Do NOT set FUNCTIONS_WORKER_RUNTIME or WEBSITE_NODE_DEFAULT_VERSION.
            az functionapp config appsettings set -g "$RG" -n "$FUNC_APP" \
              --settings FUNCTIONS_EXTENSION_VERSION="~4" >/dev/null

      - name: Deploy package via ZIP
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az functionapp deployment source config-zip \
              -g "$RG" -n "$FUNC_APP" --src "$GITHUB_WORKSPACE/dist-func.zip" --timeout 600
            # Flex ignores 'sync', so we restart to ensure pickup
            az functionapp restart -g "$RG" -n "$FUNC_APP"

      - name: Wait for runtime startup
        run: |
          for i in $(seq 1 12); do
            code=$(curl -s -o /dev/null -w "%{http_code}" "https://${FUNC_APP}.azurewebsites.net/api/health" || true)
            echo "probe $i http=$code"
            [ "$code" = "200" ] && exit 0
            sleep 10
          done
          exit 1

      - name: Smoke test HTTP trigger
        run: |
          set -euo pipefail
          HEALTH_URL="https://${FUNC_APP}.azurewebsites.net/api/health"
          echo "GET $HEALTH_URL"
          curl -sS "$HEALTH_URL" | tee /dev/stderr | jq . || true
          code=$(curl -s -o /dev/null -w "%{http_code}" "$HEALTH_URL")
          [ "$code" = "200" ] || { echo "::error::Health endpoint not 200 ($code)"; exit 1; }

      - name: Try to list functions (best-effort on Flex)
        if: always()
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            echo "=== Deployed Functions Inventory (may be empty on Flex API) ==="
            az functionapp function list -g "$RG" -n "$FUNC_APP" -o table || echo "function list unavailable on Flex"