name: Deploy to asora-function-dev

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-asora-function-dev-${{ github.ref }}
  cancel-in-progress: true

env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  RG: asora-psql-flex
  FUNC_APP: asora-function-dev
  NODE_VERSION: '20'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Block legacy SP secrets
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          set -euo pipefail
          if [ -n "${AZURE_CLIENT_SECRET:-}" ] || [ -n "${AZURE_CREDENTIALS:-}" ]; then
            echo "::error::Legacy Azure SP secret present. Migrate to OIDC only." >&2
            exit 1
          fi

      - name: Install zip utilities
        run: sudo apt-get update && sudo apt-get install -y zip unzip

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Node
        uses: actions/setup-node@v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Disable Husky in CI
        run: echo "HUSKY=0" >> "$GITHUB_ENV"

      - name: Build function package
        working-directory: functions
        run: |
          set -euo pipefail
          npm ci
          npm run build

          # Validate expected deployment artifacts exist before zipping
          test -f dist/host.json || { echo "::error::dist/host.json missing"; ls -al dist; exit 1; }
          test -f dist/index.js || { echo "::error::dist/index.js missing"; ls -al dist; exit 1; }
          test -f dist/package.json || { echo "::error::dist/package.json missing"; ls -al dist; exit 1; }

          pushd dist >/dev/null
          zip -r ../dist-func.zip . \
            -x "**/*.map" "**/*.ts" "__tests__/*" "tests/*"
          popd >/dev/null

          mv dist-func.zip "$GITHUB_WORKSPACE/dist-func.zip"
          echo "Built package: $GITHUB_WORKSPACE/dist-func.zip"

      - name: Validate package exists
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          test -f "dist-func.zip" || { echo "Missing dist-func.zip"; exit 3; }
          echo "Package size:"
          ls -lh dist-func.zip
          echo "Package contents:"
          unzip -l dist-func.zip | head -n 20

      - name: Ensure required app settings
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az functionapp config appsettings set \
              --resource-group "$RG" \
              --name "$FUNC_APP" \
              --settings \
                FUNCTIONS_EXTENSION_VERSION="~4" \
                WEBSITE_RUN_FROM_PACKAGE="1"

      - name: Ensure identity can access content storage
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            STORAGE_ACCOUNT=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" --query "[?name=='AzureWebJobsStorage__accountName'].value|[0]" -o tsv)
            if [ -z "$STORAGE_ACCOUNT" ] || [ "$STORAGE_ACCOUNT" = "None" ]; then
              CONNECTION_STRING=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" --query "[?name=='AzureWebJobsStorage'].value|[0]" -o tsv)
              if [ -z "$CONNECTION_STRING" ] || [ "$CONNECTION_STRING" = "None" ]; then
                echo "::error::Unable to determine storage account backing the function app."
                exit 1
              fi
              STORAGE_ACCOUNT=$(echo "$CONNECTION_STRING" | sed -n 's/.*AccountName=\([^;]*\).*/\1/p')
            fi

            if [ -z "$STORAGE_ACCOUNT" ]; then
              echo "::error::Storage account name not resolved."
              exit 1
            fi

            PRINCIPAL_ID=$(az functionapp identity show -g "$RG" -n "$FUNC_APP" --query principalId -o tsv)
            if [ -z "$PRINCIPAL_ID" ] || [ "$PRINCIPAL_ID" = "None" ]; then
              echo "::error::Function app is missing a system-assigned managed identity."
              exit 1
            fi

            SCOPE=$(az storage account show --name "$STORAGE_ACCOUNT" --query id -o tsv)
            az role assignment create \
              --assignee-object-id "$PRINCIPAL_ID" \
              --assignee-principal-type ServicePrincipal \
              --role "Storage Blob Data Contributor" \
              --scope "$SCOPE" \
              || echo "Role assignment already present or pending propagation."

      - name: Deploy function package
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.FUNC_APP }}
          package: dist-func.zip

      - name: Show function app status and list functions
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az functionapp show -g "$RG" -n "$FUNC_APP" \
              --query "{name:name, kind:kind, https:defaultHostName, slot:slotSwapStatus}" -o jsonc
            az functionapp function list -g "$RG" -n "$FUNC_APP" -o table

      - name: Tail function host logs
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az webapp log config -g "$RG" -n "$FUNC_APP" --application-logging filesystem --level information
            az webapp log tail -g "$RG" -n "$FUNC_APP" --stack node --timeout 20

      - name: Assert HTTP trigger exists
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            COUNT=$(az functionapp function list -g "$RG" -n "$FUNC_APP" \
              --query "[?config.bindings[?type=='httpTrigger']]|length(@)" -o tsv)
            if [ -z "$COUNT" ] || [ "$COUNT" -lt 1 ]; then
              echo "::error::No HTTP functions detected after deploy"
              exit 1
            fi

      - name: Probe health endpoint
        run: |
          set -euo pipefail
          echo "Testing https://${FUNC_APP}.azurewebsites.net/health"

          MAX_RETRIES=5
          RETRY_DELAY=10

          for i in $(seq 1 $MAX_RETRIES); do
            code=$(curl -s -o /tmp/health.out -w '%{http_code}' "https://${FUNC_APP}.azurewebsites.net/health")
            echo "Attempt $i/$MAX_RETRIES: Health HTTP $code"

            if [ "$code" = "200" ]; then
              cat /tmp/health.out
              echo "✅ Health endpoint responding"
              exit 0
            fi

            if [ $i -lt $MAX_RETRIES ]; then
              echo "Waiting ${RETRY_DELAY}s before retry..."
              sleep $RETRY_DELAY
            fi
          done

          echo "::error::Health check failed after $MAX_RETRIES attempts (last code: $code)"
          exit 1

      - name: Probe feed endpoint
        run: |
          set -euo pipefail
          echo "Testing https://${FUNC_APP}.azurewebsites.net/feed?guest=1&limit=10"
          code=$(curl -s -o /dev/null -w '%{http_code}' "https://${FUNC_APP}.azurewebsites.net/feed?guest=1&limit=10")
          echo "Feed HTTP: $code"
          if [ "$code" = "200" ] || [ "$code" = "204" ]; then
            echo "✅ Feed endpoint responding"
          else
            echo "::warning::Feed endpoint returned $code (may need warm-up)"
          fi

      - name: Display function URLs
        run: |
          echo "Deployed function URLs:"
          echo "  Health: https://${FUNC_APP}.azurewebsites.net/health"
          echo "  Feed:   https://${FUNC_APP}.azurewebsites.net/feed"
