name: Deploy to asora-function-dev (Flex - storage publish)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-asora-function-dev-${{ github.ref }}
  cancel-in-progress: true

env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  RG: asora-psql-flex
  FUNC_APP: asora-function-dev
  NODE_VERSION: '20'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Block legacy SP secrets
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          set -euo pipefail
          if [ -n "${AZURE_CLIENT_SECRET:-}" ] || [ -n "${AZURE_CREDENTIALS:-}" ]; then
            echo "::error::Legacy Azure SP secret present. Migrate to OIDC only." >&2
            exit 1
          fi

      - name: Install zip utilities
        run: sudo apt-get update && sudo apt-get install -y zip unzip jq

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Disable Husky in CI
        run: echo "HUSKY=0" >> "$GITHUB_ENV"

      # Build in functions/ and produce a Linux-ready dist zip without lockfile mismatch
      - name: Build function package (lockfile-safe dist)
        working-directory: functions
        run: |
          set -euo pipefail
          npm ci
          npm run build

          test -f dist/host.json || { echo "::error::dist/host.json missing"; ls -al dist; exit 1; }
          test -f dist/index.js || { echo "::error::dist/index.js missing"; ls -al dist; exit 1; }

          # Install production deps inside dist without npm ci to avoid EUSAGE on subset package.json
          if [ -f dist/package.json ]; then
            (cd dist && npm install --omit=dev --no-audit --no-fund)
          fi

          pushd dist >/dev/null
          zip -r ../dist-func.zip . -x "**/*.map" "**/*.ts" "__tests__/*" "tests/*"
          popd >/dev/null

          mv dist-func.zip "$GITHUB_WORKSPACE/dist-func.zip"

      - name: Validate package exists
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          test -f dist-func.zip || { echo "Missing dist-func.zip"; exit 3; }
          ls -lh dist-func.zip
          unzip -l dist-func.zip | head -n 40

      - name: Resolve storage account and export STG
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            # Resolve the AzureWebJobsStorage account name
            SA=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                  --query "[?name=='AzureWebJobsStorage__accountName'].value|[0]" -o tsv)
            if [ -z "${SA:-}" ] || [ "$SA" = "None" ]; then
              CS=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                    --query "[?name=='AzureWebJobsStorage'].value|[0]" -o tsv)
              SA=$(echo "$CS" | sed -n 's/.*AccountName=\([^;]*\).*/\1/p')
            fi
            [ -n "${SA:-}" ] || { echo "::error::Could not resolve AzureWebJobsStorage account"; exit 1; }
            echo "STG=$SA" >> "$GITHUB_ENV"

      - name: Verify GitHub OIDC app has storage RBAC and wait for propagation
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            : "${STG:?STG not set}"
            
            echo "Verifying OIDC app has Storage Blob Data Contributor on $STG..."
            
            # Get current identity
            CURRENT_OBJ_ID=$(az ad sp show --id "$AZURE_CLIENT_ID" --query id -o tsv)
            echo "Current OIDC app object ID: $CURRENT_OBJ_ID"
            
            # Check RBAC assignment exists
            SCOPE="/subscriptions/${AZURE_SUBSCRIPTION_ID}/resourceGroups/${RG}/providers/Microsoft.Storage/storageAccounts/${STG}"
            RBAC_CHECK=$(az role assignment list \
              --assignee "$CURRENT_OBJ_ID" \
              --scope "$SCOPE" \
              --query "[?roleDefinitionName=='Storage Blob Data Contributor'].id" -o tsv)
            
            if [ -z "$RBAC_CHECK" ]; then
              echo "::error::RBAC assignment missing. Run: bash grant-oidc-storage-rbac.sh"
              exit 1
            fi
            
            echo "✅ RBAC assignment exists"
            
            # Test actual write permissions with retry logic (RBAC propagation can take time)
            echo "Testing write permissions with RBAC propagation wait..."
            for i in {1..6}; do
              if az storage container list --account-name "$STG" --auth-mode login --query "[].name" -o tsv > /dev/null 2>&1; then
                echo "✅ Read access confirmed (attempt $i/6)"
                sleep 10
                break
              fi
              echo "⏳ Waiting for RBAC propagation... (attempt $i/6)"
              sleep 10
            done
            
            echo "Waiting additional 30s for write permission propagation..."
            sleep 30
            echo "✅ RBAC should be fully propagated"

      # Resolve storage account from AzureWebJobsStorage and ensure container, guard HNS
      - name: Resolve storage and prepare container
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            CONTAINER="deployments"
            
            SA=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                  --query "[?name=='AzureWebJobsStorage__accountName'].value|[0]" -o tsv)
            if [ -z "$SA" ] || [ "$SA" = "None" ]; then
              CS=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                    --query "[?name=='AzureWebJobsStorage'].value|[0]" -o tsv)
              SA=$(echo "$CS" | sed -n 's/.*AccountName=\([^;]*\).*/\1/p')
            fi
            [ -n "$SA" ] || { echo "::error::AzureWebJobsStorage account not resolved"; exit 1; }

            HNS=$(az storage account show --name "$SA" --query isHnsEnabled -o tsv)
            if [ "$HNS" = "true" ]; then
              echo "::error::Storage account '$SA' has Hierarchical Namespace enabled; use a non-HNS GPv2 account for deployments."
              exit 1
            fi

            az storage account show --name "$SA" >/dev/null
            az storage container create --account-name "$SA" --name "$CONTAINER" --auth-mode login >/dev/null || true
            echo "STG=$SA" >> "$GITHUB_ENV"

      - name: Ensure Functions v4 app setting only
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az functionapp config appsettings set -g "$RG" -n "$FUNC_APP" \
              --settings FUNCTIONS_EXTENSION_VERSION="~4" >/dev/null
            # Remove conflicting keys for Flex (but keep WEBSITE_CONTENTSHARE which Flex MAY need)
            az functionapp config appsettings delete -g "$RG" -n "$FUNC_APP" \
              --setting-names WEBSITE_RUN_FROM_PACKAGE WEBSITE_RUN_FROM_ZIP \
                              SCM_RUN_FROM_PACKAGE_CONTAINER SCM_CONTAINER SCM_TARGET_PATH \
                              WEBSITE_CONTENTAZUREFILECONNECTIONSTRING \
                              FUNCTIONS_WORKER_RUNTIME 2>/dev/null || true

      # Grant RBAC to the GitHub OIDC service principal for blob upload
      - name: Grant GitHub principal Storage Blob Data Contributor
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            SA_ID=$(az storage account show --name "$STG" --query id -o tsv)
            SP_OBJ_ID=$(az ad sp show --id "$AZURE_CLIENT_ID" --query id -o tsv)
            az role assignment create \
              --assignee-object-id "$SP_OBJ_ID" \
              --assignee-principal-type ServicePrincipal \
              --role "Storage Blob Data Contributor" \
              --scope "$SA_ID" 2>/dev/null || echo "RBAC already present or pending"
            sleep 10

            CURRENT_CFG=$(az functionapp show -g "$RG" -n "$FUNC_APP" \
              --query "properties.functionAppConfig" -o json)

            if [ -z "${CURRENT_CFG:-}" ] || [ "$CURRENT_CFG" = "null" ]; then
              echo "::error::Unable to read current functionAppConfig" >&2
              exit 1
            fi

            PATCH_BODY=$(jq -c '
              . as $cfg
              | ($cfg // {})
              | .runtime = {"name": "node", "version": "20"}
              | .scaleAndConcurrency = ((.scaleAndConcurrency // {}) + {"instanceMemoryMB": 2048, "maximumInstanceCount": 40})
              | .siteUpdateStrategy = {"type": "Recreate"}
              | {"properties": {"functionAppConfig": .}}
            ' <<<"$CURRENT_CFG")

            az rest --method patch \
              --uri "https://management.azure.com/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$RG/providers/Microsoft.Web/sites/$FUNC_APP?api-version=2023-12-01" \
              --body "$PATCH_BODY" >/dev/null

      # Grant Function App MI Storage Blob Data Reader (to read deployment package)
      - name: Grant Function App MI Storage Blob Data Reader
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            SA_ID=$(az storage account show --name "$STG" --query id -o tsv)
            MI_PRINCIPAL_ID=$(az functionapp identity show -g "$RG" -n "$FUNC_APP" --query principalId -o tsv)
            
            echo "Granting Storage Blob Data Reader to Function App MI: $MI_PRINCIPAL_ID"
            az role assignment create \
              --assignee-object-id "$MI_PRINCIPAL_ID" \
              --assignee-principal-type ServicePrincipal \
              --role "Storage Blob Data Reader" \
              --scope "$SA_ID" 2>/dev/null || echo "RBAC already present or pending"
            
            echo "Waiting 30s for RBAC propagation..."
            sleep 30

      # Upload package to storage (non-Kudu path)
      - name: Upload package to storage
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az storage blob upload \
              --auth-mode login \
              --account-name "$STG" \
              --container-name deployments \
              --name functionapp.zip \
              --file "$GITHUB_WORKSPACE/dist-func.zip" \
              --overwrite

      # Update deployment.storage configuration directly (avoid /publish API which creates malformed URLs)
      - name: Configure deployment.storage with blob URL
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            PACKAGE_URI="https://${STG}.blob.core.windows.net/deployments/functionapp.zip"
            
            echo "Configuring deployment.storage with: $PACKAGE_URI"
            
            # Read current config to merge
            CURRENT_CFG=$(az functionapp show -g "$RG" -n "$FUNC_APP" \
              --query "properties.functionAppConfig" -o json)
            
            # Update deployment.storage.value with correct URL format
            PATCH_BODY=$(jq -c '
              . as $cfg
              | ($cfg // {})
              | .deployment.storage.value = "'"$PACKAGE_URI"'"
              | .deployment.storage.type = "blobcontainer"
              | .deployment.storage.authentication.type = "systemassignedidentity"
              | {"properties": {"functionAppConfig": .}}
            ' <<<"$CURRENT_CFG")
            
            az rest --method patch \
              --uri "https://management.azure.com/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$RG/providers/Microsoft.Web/sites/$FUNC_APP?api-version=2023-12-01" \
              --body "$PATCH_BODY" >/dev/null

      # Restart to ensure host picks up the new package
      - name: Restart app and list functions
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            echo "Restarting Function App to pick up deployment..."
            az functionapp restart -g "$RG" -n "$FUNC_APP"
            
            echo "Waiting 20s for restart..."
            sleep 20
            
            echo "Listing deployed functions:"
            az functionapp function list -g "$RG" -n "$FUNC_APP" -o table

      - name: Smoke test HTTP trigger
        run: |
          set -euo pipefail
          echo "Testing https://${FUNC_APP}.azurewebsites.net/health"
          for i in {1..6}; do
            code=$(curl -s -o /tmp/health.out -w '%{http_code}' "https://${FUNC_APP}.azurewebsites.net/health")
            echo "Attempt $i: HTTP $code"
            [ "$code" = "200" ] && { cat /tmp/health.out; exit 0; }
            sleep 10
          done
          echo "::error::Health check failed"; exit 1

      - name: Display function URLs
        run: |
          echo "Deployed function URLs:"
          echo "  Health: https://${FUNC_APP}.azurewebsites.net/health"
          echo "  Feed:   https://${FUNC_APP}.azurewebsites.net/feed"
