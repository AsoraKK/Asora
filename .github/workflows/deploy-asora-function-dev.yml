name: Deploy to asora-function-dev

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-asora-function-dev-${{ github.ref }}
  cancel-in-progress: true

env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  RG: asora-psql-flex
  FUNC_APP: asora-function-dev
  NODE_VERSION: '20'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Block legacy SP secrets
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          set -euo pipefail
          if [ -n "${AZURE_CLIENT_SECRET:-}" ] || [ -n "${AZURE_CREDENTIALS:-}" ]; then
            echo "::error::Legacy Azure SP secret present. Migrate to OIDC only." >&2
            exit 1
          fi

      - name: Install zip utilities
        run: sudo apt-get update && sudo apt-get install -y zip unzip

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Node
        uses: actions/setup-node@v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Disable Husky in CI
        run: echo "HUSKY=0" >> "$GITHUB_ENV"

      - name: Build function package
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          WORK="$(mktemp -d)"; pushd "$WORK" >/dev/null

          # host.json for Functions v4 (Flex) with direct routes
          cat > host.json <<'JSON'
          {
            "version": "4.0",
            "extensionBundle": {
              "id": "Microsoft.Azure.Functions.ExtensionBundle",
              "version": "[3.*, 4.0.0)"
            },
            "extensions": {
              "http": {
                "routePrefix": ""
              }
            }
          }
          JSON

          # package.json for programmatic model
          cat > package.json <<'JSON'
          {
            "name": "asora-flex-functions",
            "version": "1.0.0",
            "private": true,
            "type": "module",
            "main": "index.js",
            "dependencies": {
              "@azure/functions": "^4.4.0"
            }
          }
          JSON

          npm install --omit=dev

          mkdir -p src/functions

          cat > src/functions/health.js <<'JS'
          import { app } from "@azure/functions";

          app.http("health", {
            authLevel: "anonymous",
            methods: ["GET"],
            route: "health",
            handler: async () => ({
              jsonBody: {
                ok: true,
                timestamp: new Date().toISOString(),
                service: "asora-function-dev"
              }
            })
          });
          JS

          cat > src/functions/feed.js <<'JS'
          import { app } from "@azure/functions";

          app.http("feed", {
            authLevel: "anonymous",
            methods: ["GET"],
            route: "feed",
            handler: async (request) => {
              const url = new URL(request.url);
              const guest = url.searchParams.get("guest") === "1";
              const limit = Number.parseInt(url.searchParams.get("limit") ?? "10", 10);

              return {
                jsonBody: {
                  data: [],
                  meta: {
                    total: 0,
                    limit,
                    offset: 0,
                    guest
                  }
                }
              };
            }
          });
          JS

          # Create index.js to register functions (required for programmatic model)
          cat > index.js <<'JS'
          import './src/functions/health.js';
          import './src/functions/feed.js';
          JS

          test -f host.json || (echo "host.json missing at package root" && exit 1)

          zip -qr "$GITHUB_WORKSPACE/dist-func.zip" host.json package.json package-lock.json node_modules functions
          popd >/dev/null
          echo "Built package: dist-func.zip"

      - name: Validate package exists
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          test -f "dist-func.zip" || { echo "Missing dist-func.zip"; exit 3; }
          echo "Package size:"
          ls -lh dist-func.zip
          echo "Package contents:"
          unzip -l dist-func.zip | head -n 20

      - name: Remove incompatible app settings for Flex Consumption
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            echo "Removing app settings that are not supported by Flex Consumption SKU..."
            
            # Check and remove WEBSITE_RUN_FROM_PACKAGE
            EXISTING=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
              --query "[?name=='WEBSITE_RUN_FROM_PACKAGE'].value" -o tsv || echo "")
            if [ -n "$EXISTING" ]; then
              echo "Removing WEBSITE_RUN_FROM_PACKAGE (not supported on Flex)..."
              az functionapp config appsettings delete -g "$RG" -n "$FUNC_APP" \
                --setting-names WEBSITE_RUN_FROM_PACKAGE
            else
              echo "WEBSITE_RUN_FROM_PACKAGE not present"
            fi
            
            # Check and remove FUNCTIONS_WORKER_RUNTIME (Flex auto-detects)
            EXISTING=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
              --query "[?name=='FUNCTIONS_WORKER_RUNTIME'].value" -o tsv || echo "")
            if [ -n "$EXISTING" ]; then
              echo "Removing FUNCTIONS_WORKER_RUNTIME (Flex auto-detects)..."
              az functionapp config appsettings delete -g "$RG" -n "$FUNC_APP" \
                --setting-names FUNCTIONS_WORKER_RUNTIME
            else
              echo "FUNCTIONS_WORKER_RUNTIME not present"
            fi
            
            # Check and remove WEBSITE_NODE_DEFAULT_VERSION (Flex auto-detects)
            EXISTING=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
              --query "[?name=='WEBSITE_NODE_DEFAULT_VERSION'].value" -o tsv || echo "")
            if [ -n "$EXISTING" ]; then
              echo "Removing WEBSITE_NODE_DEFAULT_VERSION (Flex auto-detects)..."
              az functionapp config appsettings delete -g "$RG" -n "$FUNC_APP" \
                --setting-names WEBSITE_NODE_DEFAULT_VERSION
            else
              echo "WEBSITE_NODE_DEFAULT_VERSION not present"
            fi

      - name: Ensure required app settings
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            # Flex Consumption only needs FUNCTIONS_EXTENSION_VERSION
            az functionapp config appsettings set \
              --resource-group "$RG" \
              --name "$FUNC_APP" \
              --settings FUNCTIONS_EXTENSION_VERSION=~4

      - name: Ensure identity can access content storage
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            STORAGE_ACCOUNT=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" --query "[?name=='AzureWebJobsStorage__accountName'].value|[0]" -o tsv)
            if [ -z "$STORAGE_ACCOUNT" ] || [ "$STORAGE_ACCOUNT" = "None" ]; then
              CONNECTION_STRING=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" --query "[?name=='AzureWebJobsStorage'].value|[0]" -o tsv)
              if [ -z "$CONNECTION_STRING" ] || [ "$CONNECTION_STRING" = "None" ]; then
                echo "::error::Unable to determine storage account backing the function app."
                exit 1
              fi
              STORAGE_ACCOUNT=$(echo "$CONNECTION_STRING" | sed -n 's/.*AccountName=\([^;]*\).*/\1/p')
            fi

            if [ -z "$STORAGE_ACCOUNT" ]; then
              echo "::error::Storage account name not resolved."
              exit 1
            fi

            PRINCIPAL_ID=$(az functionapp identity show -g "$RG" -n "$FUNC_APP" --query principalId -o tsv)
            if [ -z "$PRINCIPAL_ID" ] || [ "$PRINCIPAL_ID" = "None" ]; then
              echo "::error::Function app is missing a system-assigned managed identity."
              exit 1
            fi

            SCOPE=$(az storage account show --name "$STORAGE_ACCOUNT" --query id -o tsv)
            az role assignment create \
              --assignee-object-id "$PRINCIPAL_ID" \
              --assignee-principal-type ServicePrincipal \
              --role "Storage Blob Data Contributor" \
              --scope "$SCOPE" \
              || echo "Role assignment already present or pending propagation."

      - name: Upload package to blob storage for Flex Consumption
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            echo "Uploading package to blob storage for Flex Consumption deployment..."
            
            # Get storage account details
            STORAGE_ACCOUNT=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
              --query "[?name=='AzureWebJobsStorage__accountName'].value|[0]" -o tsv)
            
            if [ -z "$STORAGE_ACCOUNT" ] || [ "$STORAGE_ACCOUNT" = "None" ]; then
              CONNECTION_STRING=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                --query "[?name=='AzureWebJobsStorage'].value|[0]" -o tsv)
              STORAGE_ACCOUNT=$(echo "$CONNECTION_STRING" | sed -n 's/.*AccountName=\([^;]*\).*/\1/p')
              STORAGE_KEY=$(echo "$CONNECTION_STRING" | sed -n 's/.*AccountKey=\([^;]*\).*/\1/p')
            else
              STORAGE_KEY=$(az storage account keys list --account-name "$STORAGE_ACCOUNT" --query "[0].value" -o tsv)
            fi
            
            # Create deployments container if it doesn't exist
            az storage container create \
              --account-name "$STORAGE_ACCOUNT" \
              --account-key "$STORAGE_KEY" \
              --name deployments \
              --only-show-errors || echo "Container already exists"
            
            # Upload package with timestamp
            BLOB_NAME="deploy-$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::7}.zip"
            echo "Uploading as: $BLOB_NAME"
            
            az storage blob upload \
              --account-name "$STORAGE_ACCOUNT" \
              --account-key "$STORAGE_KEY" \
              --container-name deployments \
              --name "$BLOB_NAME" \
              --file dist-func.zip \
              --overwrite \
              --only-show-errors
            
            # Also upload as functionapp.zip (standard name)
            az storage blob upload \
              --account-name "$STORAGE_ACCOUNT" \
              --account-key "$STORAGE_KEY" \
              --container-name deployments \
              --name "functionapp.zip" \
              --file dist-func.zip \
              --overwrite \
              --only-show-errors
            
            # Set WEBSITE_RUN_FROM_PACKAGE to point to the blob
            BLOB_URL="https://${STORAGE_ACCOUNT}.blob.core.windows.net/deployments/$BLOB_NAME"
            echo "Setting WEBSITE_RUN_FROM_PACKAGE to: $BLOB_URL"
            
            az functionapp config appsettings set \
              --resource-group "$RG" \
              --name "$FUNC_APP" \
              --settings WEBSITE_RUN_FROM_PACKAGE="$BLOB_URL"
            
            echo "✅ Package uploaded and deployment configured"

      - name: Restart function app to pick up new deployment
        uses: azure/cli@v2
        with:
          inlineScript: |
            echo "Restarting function app to activate new deployment..."
            az functionapp restart --resource-group "$RG" --name "$FUNC_APP"
            echo "Waiting for app to restart..."
            sleep 45

      - name: List functions
        uses: azure/cli@v2
        with:
          inlineScript: |
            az functionapp function list -g "$RG" -n "$FUNC_APP" -o table

      - name: Assert health function exists
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az functionapp function list -g "$RG" -n "$FUNC_APP" \
              --query "[?contains(name, 'health')]" -o tsv | grep -q health || \
              (echo "::error::health function missing after deploy" && exit 1)

      - name: Probe health endpoint
        run: |
          set -euo pipefail
          echo "Testing https://${FUNC_APP}.azurewebsites.net/health"

          MAX_RETRIES=5
          RETRY_DELAY=10

          for i in $(seq 1 $MAX_RETRIES); do
            code=$(curl -s -o /tmp/health.out -w '%{http_code}' "https://${FUNC_APP}.azurewebsites.net/health")
            echo "Attempt $i/$MAX_RETRIES: Health HTTP $code"

            if [ "$code" = "200" ]; then
              cat /tmp/health.out
              echo "✅ Health endpoint responding"
              exit 0
            fi

            if [ $i -lt $MAX_RETRIES ]; then
              echo "Waiting ${RETRY_DELAY}s before retry..."
              sleep $RETRY_DELAY
            fi
          done

          echo "::error::Health check failed after $MAX_RETRIES attempts (last code: $code)"
          exit 1

      - name: Probe feed endpoint
        run: |
          set -euo pipefail
          echo "Testing https://${FUNC_APP}.azurewebsites.net/feed?guest=1&limit=10"
          code=$(curl -s -o /dev/null -w '%{http_code}' "https://${FUNC_APP}.azurewebsites.net/feed?guest=1&limit=10")
          echo "Feed HTTP: $code"
          if [ "$code" = "200" ] || [ "$code" = "204" ]; then
            echo "✅ Feed endpoint responding"
          else
            echo "::warning::Feed endpoint returned $code (may need warm-up)"
          fi

      - name: Display function URLs
        run: |
          echo "Deployed function URLs:"
          echo "  Health: https://${FUNC_APP}.azurewebsites.net/health"
          echo "  Feed:   https://${FUNC_APP}.azurewebsites.net/feed"
