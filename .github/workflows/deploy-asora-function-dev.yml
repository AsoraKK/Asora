name: Deploy to asora-function-dev

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-asora-function-dev-${{ github.ref }}
  cancel-in-progress: true

env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  RG: asora-psql-flex
  FUNC_APP: asora-function-dev
  NODE_VERSION: '20'
  DEPLOY_CONTAINER: zipdeploy

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Block legacy SP secrets
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          set -euo pipefail
          if [ -n "${AZURE_CLIENT_SECRET:-}" ] || [ -n "${AZURE_CREDENTIALS:-}" ]; then
            echo "::error::Legacy Azure SP secret present. Migrate to OIDC only." >&2
            exit 1
          fi

      - name: Install zip utilities
        run: sudo apt-get update && sudo apt-get install -y zip unzip

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Disable Husky in CI
        run: echo "HUSKY=0" >> "$GITHUB_ENV"

      - name: Build function package
        working-directory: functions
        run: |
          set -euo pipefail
          npm ci
          npm run build

          test -f dist/host.json || { echo "::error::dist/host.json missing"; ls -al dist; exit 1; }
          test -f dist/index.js || { echo "::error::dist/index.js missing"; ls -al dist; exit 1; }
          test -f dist/package.json || { echo "::error::dist/package.json missing"; ls -al dist; exit 1; }

          pushd dist >/dev/null
          zip -r ../dist-func.zip . -x "**/*.map" "**/*.ts" "__tests__/*" "tests/*"
          popd >/dev/null

          mv dist-func.zip "$GITHUB_WORKSPACE/dist-func.zip"
          echo "Built package: $GITHUB_WORKSPACE/dist-func.zip"

      - name: Validate package exists
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          test -f "dist-func.zip" || { echo "Missing dist-func.zip"; exit 3; }
          ls -lh dist-func.zip
          unzip -l dist-func.zip | head -n 20

      - name: Configure Flex app settings
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail

            # Flex-safe app settings only. SCM_ZIPDEPLOY_CONTAINER is allowed and used by Kudu.
            az functionapp config appsettings set \
              -g "$RG" -n "$FUNC_APP" \
              --settings \
                FUNCTIONS_EXTENSION_VERSION="~4" \
                SCM_ZIPDEPLOY_CONTAINER="${DEPLOY_CONTAINER}"

            # Remove classic or conflicting keys for Flex
            az functionapp config appsettings delete -g "$RG" -n "$FUNC_APP" \
              --setting-names WEBSITE_RUN_FROM_PACKAGE WEBSITE_RUN_FROM_ZIP \
                              SCM_RUN_FROM_PACKAGE_CONTAINER SCM_CONTAINER SCM_TARGET_PATH \
                              WEBSITE_CONTENTAZUREFILECONNECTIONSTRING WEBSITE_CONTENTSHARE \
                              FUNCTIONS_WORKER_RUNTIME \
              2>/dev/null || true

      - name: Ensure deploy container exists
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            CONTAINER="${DEPLOY_CONTAINER}"
            # Validate container name per Azure rules
            re='^[a-z0-9]([a-z0-9-]{1,61}[a-z0-9])?$'
            [[ "$CONTAINER" =~ $re && "$CONTAINER" != *--* ]] || { echo "::error::Invalid container name: $CONTAINER"; exit 1; }

            SA=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                  --query "[?name=='AzureWebJobsStorage__accountName'].value|[0]" -o tsv)
            if [ -z "$SA" ] || [ "$SA" = "None" ]; then
              CS=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                    --query "[?name=='AzureWebJobsStorage'].value|[0]" -o tsv)
              SA=$(echo "$CS" | sed -n 's/.*AccountName=\([^;]*\).*/\1/p')
            fi
            [ -n "$SA" ] || { echo "::error::Storage account not resolved"; exit 1; }
            az storage account show --name "$SA" >/dev/null
            az storage container create --account-name "$SA" --name "$CONTAINER" --auth-mode login >/dev/null

      - name: Grant MI access to storage
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            SA=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                  --query "[?name=='AzureWebJobsStorage__accountName'].value|[0]" -o tsv)
            if [ -z "$SA" ] || [ "$SA" = "None" ]; then
              CS=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                    --query "[?name=='AzureWebJobsStorage'].value|[0]" -o tsv)
              SA=$(echo "$CS" | sed -n 's/.*AccountName=\([^;]*\).*/\1/p')
            fi
            [ -n "$SA" ] || { echo "::error::Storage account not resolved"; exit 1; }

            PRINCIPAL_ID=$(az functionapp identity show -g "$RG" -n "$FUNC_APP" --query principalId -o tsv)
            [ -n "$PRINCIPAL_ID" ] || { echo "::error::Missing system-assigned identity"; exit 1; }

            SCOPE=$(az storage account show --name "$SA" --query id -o tsv)
            az role assignment create \
              --assignee-object-id "$PRINCIPAL_ID" \
              --assignee-principal-type ServicePrincipal \
              --role "Storage Blob Data Contributor" \
              --scope "$SCOPE" \
              2>/dev/null || echo "Role assignment exists or pending"
            sleep 10

      - name: Assert Flex configuration
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            # Forbidden on Flex
            bad=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                  --query "[?name=='FUNCTIONS_WORKER_RUNTIME' || name=='WEBSITE_CONTENTSHARE']|length(@)" -o tsv)
            [ "$bad" = "0" ] || { echo "::error::Flex-incompatible setting present"; exit 1; }
            # WEBSITE_RUN_FROM_PACKAGE must be unset
            v=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                 --query "[?name=='WEBSITE_RUN_FROM_PACKAGE'].value|[0]" -o tsv)
            [ -z "$v" ] || [ "$v" = "None" ] || { echo "::error::WEBSITE_RUN_FROM_PACKAGE must be unset"; exit 1; }
            # SCM_ZIPDEPLOY_CONTAINER must equal our container
            c=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                 --query "[?name=='SCM_ZIPDEPLOY_CONTAINER'].value|[0]" -o tsv)
            [ "$c" = "${DEPLOY_CONTAINER}" ] || { echo "::error::SCM_ZIPDEPLOY_CONTAINER mismatch: '$c'"; exit 1; }

      - name: Install Azure Functions Core Tools
        run: |
          set -euo pipefail
          npm i -g azure-functions-core-tools@4 --unsafe-perm true
          func --version

      - name: Publish with Core Tools (remote build)
        working-directory: functions
        run: |
          set -euo pipefail
          func azure functionapp publish "$FUNC_APP" --javascript --force --build remote

      - name: Show function app status and list functions
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az functionapp show -g "$RG" -n "$FUNC_APP" \
              --query "{name:name, kind:kind, https:defaultHostName, slot:slotSwapStatus}" -o jsonc
            az functionapp function list -g "$RG" -n "$FUNC_APP" -o table

      - name: Tail function host logs
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az webapp log config -g "$RG" -n "$FUNC_APP" --application-logging filesystem --level information
            az webapp log tail -g "$RG" -n "$FUNC_APP" --stack node --timeout 20

      - name: Assert HTTP trigger exists
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            COUNT=$(az functionapp function list -g "$RG" -n "$FUNC_APP" \
              --query "[?config.bindings[?type=='httpTrigger']]|length(@)" -o tsv)
            if [ -z "$COUNT" ] || [ "$COUNT" -lt 1 ]; then
              echo "::error::No HTTP functions detected after deploy"
              exit 1
            fi

      - name: Probe health endpoint
        run: |
          set -euo pipefail
          echo "Testing https://${FUNC_APP}.azurewebsites.net/health"
          for i in {1..5}; do
            code=$(curl -s -o /tmp/health.out -w '%{http_code}' "https://${FUNC_APP}.azurewebsites.net/health")
            echo "Attempt $i: HTTP $code"
            [ "$code" = "200" ] && { cat /tmp/health.out; exit 0; }
            sleep 10
          done
          echo "::error::Health check failed"; exit 1

      - name: Probe feed endpoint
        run: |
          set -euo pipefail
          code=$(curl -s -o /dev/null -w '%{http_code}' "https://${FUNC_APP}.azurewebsites.net/feed?guest=1&limit=10")
          echo "Feed HTTP: $code"
          if [ "$code" = "200" ] || [ "$code" = "204" ]; then
            echo "Feed endpoint responding"
          else
            echo "::warning::Feed endpoint returned $code"
          fi

      - name: Display function URLs
        run: |
          echo "Deployed function URLs:"
          echo "  Health: https://${FUNC_APP}.azurewebsites.net/health"
          echo "  Feed:   https://${FUNC_APP}.azurewebsites.net/feed"
