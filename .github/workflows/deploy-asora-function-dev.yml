name: Deploy to asora-function-dev (Flex - storage publish)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-asora-function-dev-${{ github.ref }}
  cancel-in-progress: true

env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  RG: asora-psql-flex
  FUNC_APP: asora-function-dev
  NODE_VERSION: '20'
  DEPLOY_CONTAINER: deployments
  DEPLOY_BLOB_NAME: functionapp.zip

jobs:
  canary-k6:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    env:
      BASE_URL: https://${{ env.FUNC_APP }}.azurewebsites.net
    steps:
      - uses: actions/checkout@v4

      - name: Setup k6
        uses: grafana/setup-k6-action@v1

      - name: Smoke (health)
        run: |
          BASE_URL="https://${FUNC_APP}.azurewebsites.net" VUS=1 DURATION=30s \
          k6 run load/k6/smoke.js

      - name: Feed read
        run: |
          BASE_URL="https://${FUNC_APP}.azurewebsites.net" VUS=5 DURATION=60s \
          k6 run load/k6/feed-read.js

      - name: Upload k6 summaries
        uses: actions/upload-artifact@v4
        with:
          name: k6-summaries
          path: load/k6/*-summary.json
          if-no-files-found: warn

  deploy:
    needs: [canary-k6]
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Block legacy SP secrets
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          set -euo pipefail
          if [ -n "${AZURE_CLIENT_SECRET:-}" ] || [ -n "${AZURE_CREDENTIALS:-}" ]; then
            echo "::error::Legacy Azure SP secret present. Migrate to OIDC only." >&2
            exit 1
          fi

      - name: Install zip utilities
        run: sudo apt-get update && sudo apt-get install -y zip unzip jq

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Disable Husky in CI
        run: echo "HUSKY=0" >> "$GITHUB_ENV"

      # Build in functions/ and produce a Linux-ready dist zip without lockfile mismatch
      - name: Build function package (lockfile-safe dist)
        working-directory: functions
        run: |
          set -euo pipefail
          npm ci
          npm run build

          test -f dist/host.json || { echo "::error::dist/host.json missing"; ls -al dist; exit 1; }
          test -f dist/index.js || { echo "::error::dist/index.js missing"; ls -al dist; exit 1; }

          # Install production deps inside dist without npm ci to avoid EUSAGE on subset package.json
          if [ -f dist/package.json ]; then
            (cd dist && npm install --omit=dev --no-audit --no-fund)
          fi

          pushd dist >/dev/null
          zip -r ../dist-func.zip . -x "**/*.map" "**/*.ts" "__tests__/*" "tests/*"
          popd >/dev/null

          mv dist-func.zip "$GITHUB_WORKSPACE/dist-func.zip"

      - name: Validate package exists
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          test -f dist-func.zip || { echo "Missing dist-func.zip"; exit 3; }
          ls -lh dist-func.zip
          unzip -l dist-func.zip | head -n 40

      # A) Resolve storage and prepare container (validates non-HNS, exports STG)
      - name: Resolve storage and prepare container
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            CONTAINER="${DEPLOY_CONTAINER}"
            re='^[a-z0-9]([a-z0-9-]{1,61}[a-z0-9])?$'
            [[ "$CONTAINER" =~ $re && "$CONTAINER" != *--* ]] || { echo "::error::Invalid container name: $CONTAINER"; exit 1; }

            SA=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                  --query "[?name=='AzureWebJobsStorage__accountName'].value|[0]" -o tsv)
            if [ -z "$SA" ] || [ "$SA" = "None" ]; then
              CS=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                    --query "[?name=='AzureWebJobsStorage'].value|[0]" -o tsv)
              SA=$(echo "$CS" | sed -n 's/.*AccountName=\([^;]*\).*/\1/p')
            fi
            [ -n "$SA" ] || { echo "::error::AzureWebJobsStorage account not resolved"; exit 1; }

            HNS=$(az storage account show --name "$SA" --query isHnsEnabled -o tsv)
            [ "$HNS" != "true" ] || { echo "::error::Storage '$SA' has HNS enabled; use non-HNS for deployments."; exit 1; }

            az storage account show --name "$SA" >/dev/null
            az storage container create --account-name "$SA" --name "$CONTAINER" --auth-mode login >/dev/null || true

            echo "STG=$SA" >> "$GITHUB_ENV"

      # B) Grant RBAC to GitHub OIDC principal for blob upload
      - name: Grant OIDC RBAC on storage
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            : "${STG:?STG not set}"
            SCOPE=$(az storage account show --name "$STG" --query id -o tsv)
            APP_OBJ_ID=$(az ad sp show --id "$AZURE_CLIENT_ID" --query id -o tsv)
            [ -n "$APP_OBJ_ID" ] || { echo "::error::AZURE_CLIENT_ID not resolvable to service principal"; exit 1; }

            az role assignment create --assignee-object-id "$APP_OBJ_ID" \
              --assignee-principal-type ServicePrincipal \
              --role "Storage Blob Data Contributor" --scope "$SCOPE" 2>/dev/null || true
            sleep 15

      # C) Patch runtime without breaking deployment.storage (merge current config)
      - name: Ensure Flex runtime + memory (merge-patch)
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az functionapp show -g "$RG" -n "$FUNC_APP" --query properties.functionAppConfig -o json > cur.json
            python3 - <<'PY' > body.json
            import json
            with open("cur.json") as f:
              cfg=json.load(f)
            if not isinstance(cfg, dict): cfg={}
            cfg.setdefault("runtime",{})["name"]="node"
            cfg["runtime"]["version"]="20"
            sc=cfg.get("scaleAndConcurrency") or {}
            sc["instanceMemoryMB"]=2048
            sc.setdefault("maximumInstanceCount",40)
            cfg["scaleAndConcurrency"]=sc
            cfg["siteUpdateStrategy"]={"type":"Recreate"}
            print(json.dumps({"properties":{"functionAppConfig":cfg}}))
            PY
            az functionapp config appsettings set -g "$RG" -n "$FUNC_APP" --settings FUNCTIONS_EXTENSION_VERSION="~4" >/dev/null
            az rest --method patch \
              --uri "/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$RG/providers/Microsoft.Web/sites/$FUNC_APP?api-version=2023-12-01" \
              --body @body.json >/dev/null

      # D) Upload and publish from storage
      - name: Upload package to storage
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            : "${STG:?STG not set}"
            az storage blob upload --auth-mode login \
              --account-name "$STG" --container-name "$DEPLOY_CONTAINER" \
              --name "$DEPLOY_BLOB_NAME" --file "$GITHUB_WORKSPACE/dist-func.zip" --overwrite

      # Deploy using Azure Functions Core Tools (Kudu zip deploy)
      - name: Install Azure Functions Core Tools
        run: |
          curl -s https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft-archive-keyring.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft-archive-keyring.gpg] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs)-prod $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get install -y azure-functions-core-tools-4

      - name: Deploy to Function App using Core Tools
        working-directory: functions/dist
        run: |
          set -euo pipefail
          echo "Publishing to $FUNC_APP using Core Tools..."
          func azure functionapp publish "$FUNC_APP" \
            --javascript \
            --build remote \
            --nozip
          
          echo "Waiting 30s for function discovery..."
          sleep 30
          
          echo "Listing deployed functions:"
          az functionapp function list -g "$RG" -n "$FUNC_APP" -o table


      - name: Smoke test HTTP trigger
        run: |
          set -euo pipefail
          echo "Testing health endpoints (trying /api/health and /health)..."
          for endpoint in api/health health; do
            echo "Testing https://${FUNC_APP}.azurewebsites.net/$endpoint"
            for i in {1..6}; do
              code=$(curl -s -o /tmp/health.out -w '%{http_code}' "https://${FUNC_APP}.azurewebsites.net/$endpoint")
              echo "  Attempt $i: HTTP $code"
              if [ "$code" = "200" ]; then
                cat /tmp/health.out
                echo "âœ… Health check passed on /$endpoint"
                exit 0
              fi
              sleep 10
            done
          done
          echo "::error::Health check failed on both /health and /api/health"; exit 1

      - name: Display function URLs
        run: |
          echo "Deployed function URLs:"
          echo "  Health: https://${FUNC_APP}.azurewebsites.net/health (or /api/health)"
          echo "  Feed:   https://${FUNC_APP}.azurewebsites.net/feed (or /api/feed)"

