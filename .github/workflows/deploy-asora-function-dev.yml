name: Deploy to asora-function-dev (storage publish)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-asora-function-dev-${{ github.ref }}
  cancel-in-progress: true

env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  RG: asora-psql-flex
  FUNC_APP: asora-function-dev
  NODE_VERSION: '20'
  DEPLOY_CONTAINER: deployments
  DEPLOY_BLOB_NAME: functionapp.zip

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Block legacy SP secrets
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          set -euo pipefail
          if [ -n "${AZURE_CLIENT_SECRET:-}" ] || [ -n "${AZURE_CREDENTIALS:-}" ]; then
            echo "::error::Legacy Azure SP secret present. Migrate to OIDC only." >&2
            exit 1
          fi

      - name: Install zip utilities
        run: sudo apt-get update && sudo apt-get install -y zip unzip

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Disable Husky in CI
        run: echo "HUSKY=0" >> "$GITHUB_ENV"

      # Build Linux-ready artifact in functions/dist and zip it
      - name: Build function package
        working-directory: functions
        run: |
          set -euo pipefail
          npm ci
          npm run build

          # Sanity checks
          test -f dist/host.json || { echo "::error::dist/host.json missing"; ls -al dist; exit 1; }
          test -f dist/index.js || { echo "::error::dist/index.js missing"; ls -al dist; exit 1; }

          # Install production deps inside dist WITHOUT copying the repo lockfile
          # Avoids npm ci EUSAGE due to dist/package.json dep subset mismatching root lockfile
          if [ -f dist/package.json ]; then
            (cd dist && npm install --omit=dev --no-audit --no-fund)
          fi

          pushd dist >/dev/null
          zip -r ../dist-func.zip . -x "**/*.map" "**/*.ts" "__tests__/*" "tests/*"
          popd >/dev/null

          mv dist-func.zip "$GITHUB_WORKSPACE/dist-func.zip"

      - name: Validate package exists
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          test -f dist-func.zip || { echo "Missing dist-func.zip"; exit 3; }
          ls -lh dist-func.zip
          unzip -l dist-func.zip | head -n 40

      # Resolve storage account from AzureWebJobsStorage and ensure container, guard HNS
      - name: Resolve storage and prepare container
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            CONTAINER="${DEPLOY_CONTAINER}"
            re='^[a-z0-9]([a-z0-9-]{1,61}[a-z0-9])?$'
            [[ "$CONTAINER" =~ $re && "$CONTAINER" != *--* ]] || { echo "::error::Invalid container name: $CONTAINER"; exit 1; }

            SA=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                  --query "[?name=='AzureWebJobsStorage__accountName'].value|[0]" -o tsv)
            if [ -z "$SA" ] || [ "$SA" = "None" ]; then
              CS=$(az functionapp config appsettings list -g "$RG" -n "$FUNC_APP" \
                    --query "[?name=='AzureWebJobsStorage'].value|[0]" -o tsv)
              SA=$(echo "$CS" | sed -n 's/.*AccountName=\([^;]*\).*/\1/p')
            fi
            [ -n "$SA" ] || { echo "::error::AzureWebJobsStorage account not resolved"; exit 1; }

            HNS=$(az storage account show --name "$SA" --query isHnsEnabled -o tsv)
            if [ "$HNS" = "true" ]; then
              echo "::error::Storage account '$SA' has Hierarchical Namespace enabled; use a non-HNS account for deployments."
              exit 1
            fi

            az storage account show --name "$SA" >/dev/null
            az storage container create --account-name "$SA" --name "$CONTAINER" --auth-mode login >/dev/null
            echo "STG=$SA" >> "$GITHUB_ENV"

      - name: Ensure Flex runtime + memory
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            # Functions v4
            az functionapp config appsettings set -g "$RG" -n "$FUNC_APP" \
              --settings FUNCTIONS_EXTENSION_VERSION="~4" >/dev/null

            # Minimal PATCH. Do NOT touch functionAppConfig.deployment.storage.
            az rest --method patch \
              --uri "https://management.azure.com/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$RG/providers/Microsoft.Web/sites/$FUNC_APP?api-version=2023-12-01" \
              --body '{
                "properties": {
                  "functionAppConfig": {
                    "runtime": {"name": "node", "version": "20"},
                    "scaleAndConcurrency": {"instanceMemoryMB": 2048},
                    "siteUpdateStrategy": {"type": "Recreate"}
                  }
                }
              }' >/dev/null

      # Upload artifact to storage
      - name: Upload package to storage
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az storage blob upload \
              --auth-mode login \
              --account-name "$STG" \
              --container-name "$DEPLOY_CONTAINER" \
              --name "$DEPLOY_BLOB_NAME" \
              --file "$GITHUB_WORKSPACE/dist-func.zip" \
              --overwrite

      # Publish by calling ARM sites/publish. This bypasses Kudu.
      - name: Publish package (ARM sites/publish)
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            PACKAGE_URI="https://$STG.blob.core.windows.net/$DEPLOY_CONTAINER/$DEPLOY_BLOB_NAME"
            az rest --method post \
              --uri \
                "https://management.azure.com/subscriptions/$AZURE_SUBSCRIPTION_ID/resourceGroups/$RG/providers/Microsoft.Web/sites/$FUNC_APP/publish?api-version=2023-12-01" \
              --body "{\"type\":\"zip\",\"packageUri\":\"$PACKAGE_URI\"}"

      - name: List functions
        uses: azure/cli@v2
        with:
          inlineScript: |
            set -euo pipefail
            az functionapp function list -g "$RG" -n "$FUNC_APP" -o table

      - name: Smoke test HTTP trigger
        run: |
          set -euo pipefail
          echo "Testing https://${FUNC_APP}.azurewebsites.net/health"
          for i in {1..6}; do
            code=$(curl -s -o /tmp/health.out -w '%{http_code}' "https://${FUNC_APP}.azurewebsites.net/health")
            echo "Attempt $i: HTTP $code"
            [ "$code" = "200" ] && { cat /tmp/health.out; exit 0; }
            sleep 10
          done
          echo "::error::Health check failed"; exit 1

      - name: Display function URLs
        run: |
          echo "Deployed function URLs:"
          echo "  Health: https://${FUNC_APP}.azurewebsites.net/health"
          echo "  Feed:   https://${FUNC_APP}.azurewebsites.net/feed"
