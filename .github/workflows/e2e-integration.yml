name: E2E Integration Test

on:
  workflow_run:
    workflows: ["Deploy Functions (Flex)"]
    types: [completed]
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_FUNCTIONAPP_NAME: asora-function-dev
  AZURE_RESOURCE_GROUP: asora-psql-flex

jobs:
  e2e:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Clear MSAL cache
        shell: bash
        run: |
          # Clear MSAL cache to avoid AttributeError issues
          rm -rf ~/.azure/msal_token_cache.json || true
          rm -rf ~/.azure/accessTokens.json || true

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Discover keys & URL
        id: info
        shell: bash
        run: |
          set -Eeuo pipefail
          RG="asora-psql-flex"; APP="asora-function-dev"
          host=$(az functionapp show -g "$RG" -n "$APP" --query "defaultHostName" -o tsv)
          key=$(az functionapp keys list -g "$RG" -n "$APP" --query "functionKeys.default" -o tsv)
          echo "FUNCTION_BASE_URL=https://${host}" >> $GITHUB_ENV
          echo "FUNCTION_KEY=${key}" >> $GITHUB_ENV

      - name: Wait for Function App readiness
        shell: bash
        env:
          RG: ${{ env.AZURE_RESOURCE_GROUP }}
          APP: ${{ env.AZURE_FUNCTIONAPP_NAME }}
        run: |
          set -euo pipefail

          max_attempts=30
          delay=10
          for attempt in $(seq 1 "$max_attempts"); do
            state=$(az functionapp show -g "$RG" -n "$APP" --query state -o tsv 2>/dev/null || echo "")
            ts=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
            echo "[$ts] Attempt $attempt/$max_attempts â€” state: ${state:-<unknown>}"
            if [ "$state" = "Running" ]; then
              echo "Function App reported Running."
              exit 0
            fi
            sleep "$delay"
          done

          echo "::group::Function diagnostics"
          az functionapp show -g "$RG" -n "$APP" -o json --only-show-errors || true
          SUBS="${AZURE_SUBSCRIPTION_ID:-}"
          if [ -n "$SUBS" ]; then
            az resource show --ids "/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}" -o json --only-show-errors || true
          fi
          echo "::endgroup::"
          echo "::error::Function App did not reach Running state after $((max_attempts * delay)) seconds."
          exit 1

      - name: E2E
        run: |
          echo "Testing Function App at: $FUNCTION_BASE_URL"
          node scripts/e2e-itest.js
