---
name: E2E Integration Test

on:
  workflow_run:
    workflows: ["Deploy Functions (Flex)"]
    types: [completed]
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  verify-secrets:
    name: Verify Required Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Ensure required secrets
        run: |
          for k in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            case $k in
              AZURE_CLIENT_ID) v="${{ secrets.AZURE_CLIENT_ID }}" ;;
              AZURE_TENANT_ID) v="${{ secrets.AZURE_TENANT_ID }}" ;;
              AZURE_SUBSCRIPTION_ID) v="${{ secrets.AZURE_SUBSCRIPTION_ID }}" ;;
            esac
            [ -n "$v" ] || { echo "Missing secret: $k"; exit 1; }
          done

  e2e:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: verify-secrets
    runs-on: ubuntu-latest
    environment: dev
    env:
      SUBS: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      APP: asora-function-dev
      RG: asora-psql-flex
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Azure login (OIDC)
        uses: azure/login@v2
        env:
          AZURE_LOGIN_POST_CLEANUP: false
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Verify Azure credentials
        run: |
          set -euo pipefail
          echo "AZURE_CONFIG_DIR=${AZURE_CONFIG_DIR:-$HOME/.azure}"
          echo "Default dir listing:"
          ls -la "$HOME/.azure" || true
          echo "Configured dir listing:"
          ls -la "${AZURE_CONFIG_DIR:-$HOME/.azure}" || true
          echo "az account show:"
          az account show --output table
          echo "ARM token fetch:"
          az account get-access-token --resource https://management.azure.com -o none

      - name: Auth sanity
        run: |
          set -euo pipefail
          echo "AZURE_CONFIG_DIR=${AZURE_CONFIG_DIR:-$HOME/.azure}"
          ls -la "${AZURE_CONFIG_DIR:-$HOME/.azure}" || true
          az account set --subscription "$SUBS"
          az account get-access-token --resource https://management.azure.com -o none
          az account show --output table

      - name: Wait for Functions host ready
        shell: bash
        run: |
          set -Eeuo pipefail
          : "${SUBS:?}"; : "${RG:?}"; : "${APP:?}"

          API=2022-03-01
          APP_ID="/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}"
          SITE_URL="https://management.azure.com${APP_ID}?api-version=${API}"

          echo "Resolving function host via ARM..."
          if ! SITE_JSON=$(az rest --method get --url "$SITE_URL" 2>site.err); then
            echo "::group::ARM site error"; cat site.err || true; echo "::endgroup::"
            exit 1
          fi
          rm -f site.err || true

          HOST=$(jq -r '.properties.defaultHostName // empty' <<<"$SITE_JSON")
          if [ -z "$HOST" ]; then
            echo "::error::defaultHostName missing from site response"
            exit 1
          fi

          echo "Attempting to retrieve host key via ARM listkeys..."
          KEYS_URL="https://management.azure.com${APP_ID}/host/default/listkeys?api-version=${API}"
          KEYS_JSON=$(az rest --method post --url "$KEYS_URL" --headers Content-Type=application/json --body "{}" 2>keys.err || echo '{}')
          if [ -s keys.err ]; then
            echo "::group::Key fetch warnings"; cat keys.err || true; echo "::endgroup::"
          fi
          rm -f keys.err || true
          CODE=$(jq -r '.masterKey // .functionKeys.default // empty' <<<"$KEYS_JSON")
          if [ -z "$CODE" ]; then
            CODE="anonymous"
          fi
          if [ "$CODE" = "anonymous" ]; then
            QP=""
          else
            QP="?code=${CODE}"
          fi

          STATUS_JSON=$(mktemp)
          FUNCS_JSON=$(mktemp)
          cleanup(){ rm -f "$STATUS_JSON" "$FUNCS_JSON"; }
          trap cleanup EXIT

          echo "Waiting for host at https://${HOST} ..."
          for i in $(seq 1 40); do
            curl -fsS "https://${HOST}/admin/host/status${QP}" -o "$STATUS_JSON" || true
            STATE=$(jq -r '.state // empty' "$STATUS_JSON" 2>/dev/null || echo "")
            ERRORS=$(jq -r '.errors? | length // 0' "$STATUS_JSON" 2>/dev/null || echo 0)

            curl -fsS "https://${HOST}/admin/functions${QP}" -o "$FUNCS_JSON" || true
            COUNT=$(jq 'length' "$FUNCS_JSON" 2>/dev/null || echo 0)

            echo "Attempt $i: state=${STATE:-<empty>} functions=$COUNT errors=$ERRORS"

            if [ "$ERRORS" -gt 0 ]; then
              echo "::group::Host errors"; cat "$STATUS_JSON"; echo "::endgroup::"
              exit 1
            fi

            if [ "$STATE" = "Running" ] && [ "$COUNT" -gt 0 ]; then
              echo "Host ready."
              echo "FUNCTION_BASE_URL=https://${HOST}" >> "$GITHUB_ENV"
              echo "BASE_URL=https://${HOST}" >> "$GITHUB_ENV"
              echo "FUNCTION_KEY=${CODE}" >> "$GITHUB_ENV"
              echo "Warming up /api/health ..."
              curl -fsS "https://${HOST}/api/health${QP}" -o /dev/null || true
              sleep 2
              exit 0
            fi

            sleep 15
          done

          echo "::group::Final host status"; cat "$STATUS_JSON" || true; echo "::endgroup::"
          echo "::group::Function list"; cat "$FUNCS_JSON" || true; echo "::endgroup::"
          exit 1

      - name: Validate feed route
        shell: bash
        run: |
          set -euo pipefail

          : "${FUNCTION_BASE_URL:?FUNCTION_BASE_URL missing from environment}"
          HOST="${FUNCTION_BASE_URL#https://}"
          HOST="${HOST%%/}"
          KEY="${FUNCTION_KEY:-anonymous}"

          if [ -z "$HOST" ]; then
            echo "::error::Unable to derive host name from FUNCTION_BASE_URL=$FUNCTION_BASE_URL"
            exit 1
          fi

          if [ "$KEY" = "anonymous" ]; then
            QP=""
          else
            QP="?code=${KEY}"
          fi

          curl -fsS "https://${HOST}/admin/functions${QP}" -o funcs.json || {
            echo "::error::Failed to enumerate functions via admin API";
            exit 1;
          }

          echo "Discovered httpTrigger routes:";
          ROUTES=$(jq -r '.[].config.bindings[]? | select(.type=="httpTrigger") | (.route // "")' funcs.json 2>/dev/null || echo "")
          if [ -n "$ROUTES" ]; then
            printf '%s\n' "$ROUTES" | sed 's/^/ - /'
          else
            echo " - <none>"
          fi

          if ! jq -e '.[].config.bindings[]? | select(.type=="httpTrigger" and .route=="feed")' funcs.json >/dev/null; then
            echo "::group::Admin functions payload"; cat funcs.json; echo "::endgroup::"
            echo "::error::No 'feed' route deployed. Update route or test path."
            rm -f funcs.json
            exit 1
          fi

          rm -f funcs.json

      - name: E2E
        run: |
          echo "Testing Function App at: $FUNCTION_BASE_URL"
          node scripts/e2e-itest.js
