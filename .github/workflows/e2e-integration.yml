---
name: E2E Integration Test

on:
  workflow_run:
    workflows: ["Deploy Functions (Flex)"]
    types: [completed]
    branches: [main]

permissions:
  id-token: write
  contents: read

jobs:
  verify-secrets:
    name: Verify Required Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Ensure required secrets
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          for k in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            v="${!k:-}"
            [ -n "$v" ] || { echo "Missing secret: $k"; exit 1; }
          done

  e2e:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    needs: verify-secrets
    runs-on: ubuntu-latest
    environment: dev
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      APP: asora-function-dev
      RG: asora-psql-flex
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Install jq, zip, unzip
        run: sudo apt-get update && sudo apt-get install -y jq zip unzip

      - name: Isolate AZ cache
        # Important: do NOT set AZURE_CONFIG_DIR at the job `env` level using
        # the runner context (for example, `${{ runner.temp }}`) because GitHub
        # disallows the `runner` context inside `jobs.<job_id>.env` and the
        # workflow will fail validation (Unrecognized named-value: 'runner').
        # Instead compute and export a step-level value using the runtime
        # environment variable `$RUNNER_TEMP` as shown below.
        shell: bash
        run: |
          set -euo pipefail
          DIR="$RUNNER_TEMP/azcfg-${GITHUB_RUN_ID}"
          mkdir -p "$DIR"
          echo "AZURE_CONFIG_DIR=$DIR" >> "$GITHUB_ENV"
      - name: Verify OIDC token env
        run: |
          set -euo pipefail
          test -n "${ACTIONS_ID_TOKEN_REQUEST_URL:-}" || { echo "::error::ACTIONS_ID_TOKEN_REQUEST_URL missing"; exit 1; }

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure subscription context
        run: |
          set -euo pipefail
          az cloud set -n AzureCloud
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          az account show -o table

      - name: Auth sanity
        env:
          SUBS: ${{ env.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -euo pipefail
          echo "AZURE_CONFIG_DIR=${AZURE_CONFIG_DIR:-$HOME/.azure}"
          ls -la "${AZURE_CONFIG_DIR:-$HOME/.azure}" || true
          az account get-access-token --resource https://management.azure.com -o none
          az account show --output table

      - name: Discover keys & URL
        id: info
        shell: bash
        env:
          SUBS: ${{ env.AZURE_SUBSCRIPTION_ID }}
          RG: ${{ env.RG }}
          APP: ${{ env.APP }}
        run: |
          set -Eeuo pipefail
          : "${SUBS:?}"; : "${RG:?}"; : "${APP:?}"

          echo "Verifying ARM access..."
          az account set --subscription "$SUBS"
          az account get-access-token --resource https://management.azure.com -o none

          APP_ID="/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}"
          echo "Try ARM first (more reliable across plan types)"
          APP_JSON=$(az rest --method get --url "https://management.azure.com${APP_ID}?api-version=2022-03-01" 2>arm.err || true)
          if ! jq -e . >/dev/null 2>&1 <<<"$APP_JSON"; then
            echo "::group::ARM error"; cat arm.err || true; echo "::endgroup::"
            echo "::error::Failed to GET site via ARM"; exit 1
          fi

          HOST=$(jq -r '.properties.defaultHostName // empty' <<<"$APP_JSON")
          [ -n "$HOST" ] || { echo "::error::defaultHostName not returned"; exit 1; }

          echo "FUNCTION_BASE_URL=https://${HOST}" >> "$GITHUB_ENV"
          echo "BASE_URL=https://${HOST}" >> "$GITHUB_ENV"

          echo "Attempting key discovery..."
          if KEY_JSON=$(az functionapp keys list -g "$RG" -n "$APP" 2>keys.err); then
            KEY=$(jq -r '.masterKey // .functionKeys.default // empty' <<<"$KEY_JSON")
            if [ -z "$KEY" ]; then
              echo "::warning::Function key not returned; continuing as anonymous"
            fi
          else
            if grep -q '403' keys.err 2>/dev/null; then
              echo "::warning::Function key fetch returned 403; continuing as anonymous"
              KEY=""
            else
              cat keys.err >&2 || true
              echo "::warning::Failed to fetch function keys; continuing as anonymous"
              KEY=""
            fi
          fi
          rm -f arm.err keys.err || true
          [ -n "$KEY" ] || KEY="anonymous"
          [ "$KEY" = "anonymous" ] && echo "::warning::No admin key fetched - continuing as anonymous"
          echo "FUNCTION_KEY=${KEY}" >> "$GITHUB_ENV"
          echo "Resolved deployment endpoint: https://${HOST}"

      - name: "Wait for Function App readiness"
        shell: bash
        env:
          SUBS: ${{ env.AZURE_SUBSCRIPTION_ID }}
          RG: ${{ env.RG }}
          APP: ${{ env.APP }}
        run: |
          set -euo pipefail

          APP_ID="/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}"
          get_state(){ az resource show --ids "$APP_ID" --query "properties.state" -o tsv 2>/dev/null || echo ""; }

          for i in $(seq 1 30); do
            STATE="$(get_state)"; echo "Attempt $i/30 state: ${STATE:-<empty>}"
            [ "$STATE" = "Running" ] && exit 0
            sleep 10
          done

          echo "::error::App not Running"; exit 1

      - name: Probe admin endpoints
        shell: bash
        env:
          FUNCTION_BASE_URL: ${{ env.FUNCTION_BASE_URL }}
          FUNCTION_KEY: ${{ env.FUNCTION_KEY }}
        run: |
          set -euo pipefail
          HOST="${FUNCTION_BASE_URL#https://}"
          KEY="${FUNCTION_KEY}"
          
          # Set up query params for authentication
          if [ "$KEY" != "anonymous" ]; then
            QP="?code=${KEY}"
          else
            QP=""
          fi
          
          echo "Probing admin endpoints on: $HOST"
          
          echo "=== GET /admin/host/status ==="
          curl -fsS "https://${HOST}/admin/host/status${QP}" | jq . || echo "Host status probe failed"
          
          echo "=== GET /admin/functions ==="
          FUNCTIONS_RESP=$(curl -fsS "https://${HOST}/admin/functions${QP}" || echo "[]")
          echo "$FUNCTIONS_RESP" | jq .
          FUNCTIONS_COUNT=$(echo "$FUNCTIONS_RESP" | jq length 2>/dev/null || echo "0")
          echo "Functions count: $FUNCTIONS_COUNT"
          
          if [ "$FUNCTIONS_COUNT" -lt 1 ]; then
            echo "::warning::Expected at least 1 function, found $FUNCTIONS_COUNT"
          fi

      - name: E2E
        shell: bash
        run: |
          set -euo pipefail
          echo "Testing Function App at: $FUNCTION_BASE_URL"

          HOST="${FUNCTION_BASE_URL#https://}"
          KEY="${FUNCTION_KEY:-anonymous}"
          QP=""
          [ "$KEY" != "anonymous" ] && QP="?code=$KEY" || QP=""

          # Wait for health to return 200 and feed to return 200/204, and ensure admin functions list is non-empty
          ok=false
          for i in $(seq 1 60); do
            echo "Probe attempt $i/60..."
            HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://${HOST}/api/health${QP}" || echo "000")
            FEED_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://${HOST}/api/feed${QP}" || echo "000")
            ADMIN_COUNT=$(curl -s "https://${HOST}/admin/functions${QP}" | jq -r 'length // 0' 2>/dev/null || echo "0")
            echo "health=$HEALTH_STATUS feed=$FEED_STATUS admin_count=$ADMIN_COUNT"
            if [ "$HEALTH_STATUS" = "200" ] && { [ "$FEED_STATUS" = "200" ] || [ "$FEED_STATUS" = "204" ]; } && [ "$ADMIN_COUNT" -ge 1 ]; then
              ok=true
              break
            fi
            sleep 5
          done

          if [ "$ok" != true ]; then
            echo "::error::E2E probes failed (health=$HEALTH_STATUS feed=$FEED_STATUS)";
            # Emit diagnostics before failing
            echo "Admin host status:"; curl -sS "https://${HOST}/admin/host/status${QP}" || true
            echo "Admin functions:"; curl -sS "https://${HOST}/admin/functions${QP}" || true
            echo "Attempting one final hit to /api/health and /api/feed";
            curl -isS "https://${HOST}/api/health${QP}" || true
            curl -isS "https://${HOST}/api/feed${QP}" || true
            exit 1
          fi

          node scripts/e2e-itest.js
