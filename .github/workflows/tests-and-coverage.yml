name: tests-and-coverage

on:
  pull_request:
    branches: [ main ]
    paths: ['lib/', 'functions/', 'scripts/', '.github/workflows/']

permissions:
  contents: read
  pull-requests: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'

      - name: Flutter pub get
        run: flutter pub get

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Functions dependencies
        working-directory: functions
        run: npm ci

      - name: Run tests with coverage
        run: ./scripts/test-with-coverage.sh

      - name: Normalize coverage paths
        run: |
          set -euo pipefail
          rm -rf coverage-artifacts
          mkdir -p coverage-artifacts/coverage-functions coverage-artifacts/coverage-flutter

          echo "Locate LCOV files:"
          find . -maxdepth 6 -type f -name 'lcov.info' -print || true
          echo

          fn_src=$(find . -maxdepth 6 -type f -path '*/coverage/lcov.info' | grep -E '/functions|/api|/server|/backend' || true)
          if [ -z "${fn_src:-}" ]; then
            fn_src=$(find . -maxdepth 6 -type f -path '*/coverage/lcov.info' | grep -vi 'flutter' | head -n1 || true)
          fi
          if [ -n "${fn_src:-}" ]; then
            cp "$fn_src" coverage-artifacts/coverage-functions/lcov.info
          fi

          fl_src=$(find . -maxdepth 6 -type f -path '*/coverage/lcov.info' | grep -i 'flutter' || true)
          if [ -z "${fl_src:-}" ]; then
            if [ -f coverage/lcov.info ]; then
              fl_src=coverage/lcov.info
            fi
          fi
          if [ -n "${fl_src:-}" ]; then
            cp "$fl_src" coverage-artifacts/coverage-flutter/lcov.info
          fi

          [ -f coverage-artifacts/coverage-functions/lcov.info ] || echo "warn: no Functions lcov.info found"
          [ -f coverage-artifacts/coverage-flutter/lcov.info ] || echo "warn: no Flutter lcov.info found"

          if [ ! -f coverage-artifacts/coverage-functions/lcov.info ] && [ ! -f coverage-artifacts/coverage-flutter/lcov.info ]; then
            echo "error: no lcov.info discovered. Check test-with-coverage.sh outputs and working-directory." >&2
            exit 1
          fi

      - name: Assert LCOV discovered
        run: |
          set -e
          ls -l coverage-artifacts/coverage-functions/lcov.info || { echo "missing functions lcov"; exit 1; }
          ls -l coverage-artifacts/coverage-flutter/lcov.info   || { echo "missing flutter lcov"; exit 1; }

      - name: Install reportgenerator
        run: dotnet tool update --global dotnet-reportgenerator-globaltool

      - name: Convert LCOV to Cobertura
        run: |
          ~/.dotnet/tools/reportgenerator \
            -reports:coverage-artifacts/coverage-functions/lcov.info \
            -targetdir:coverage-artifacts/coverage-functions \
            -reporttypes:Cobertura
          ~/.dotnet/tools/reportgenerator \
            -reports:coverage-artifacts/coverage-flutter/lcov.info \
            -targetdir:coverage-artifacts/coverage-flutter \
            -reporttypes:Cobertura

      - name: Assert Cobertura generated
        run: |
          test -f coverage-artifacts/coverage-functions/Cobertura.xml
          test -f coverage-artifacts/coverage-flutter/Cobertura.xml

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ github.sha }}
          path: coverage/**
          retention-days: 7
          if-no-files-found: error

      - name: Extract overall coverage %
        id: cov
        run: |
          pct=$(grep -Eo '[0-9]+(\.[0-9]+)?%' coverage/coverage-summary.txt | head -n1 | tr -d '%')
          echo "pct=$pct" >> "$GITHUB_OUTPUT"

      - name: Enforce â‰¥80% gate
        run: |
          req=80
          pct="${{ steps.cov.outputs.pct }}"
          awk -v p="$pct" -v r="$req" 'BEGIN{ exit (p+0 >= r) ? 0 : 1 }'