name: Coverage Gate

permissions:
  contents: write
  pull-requests: write

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  test-functions:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json
      - name: Guard against UTF-8 BOMs
        run: bash ../scripts/check-bom.sh
      - name: Install deps
        run: npm ci
      - name: Run tests with coverage (Functions)
        run: |
          npm test -- --coverage --ci
      - name: Upload Functions coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-functions
          path: functions/coverage/lcov.info

  test-flutter:
    runs-on: ubuntu-latest
    env:
      ASORA_REQUIRE_REAL_PINS: "false"  # TODO: flip to "true" once real pins land
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Flutter pub get
        run: flutter pub get
      - name: Flutter tests with coverage
        run: flutter test --coverage
      - name: Filter Flutter coverage (exclude generated/entry)
        run: |
          awk '
            BEGIN{keep=1}
            /^SF:/ {
              path=$0
              if (path ~ /\/main\.dart$/ || path ~ /\.g\.dart$/ || path ~ /\.freezed\.dart$/ || path ~ /generated_plugin_registrant\.dart$/ || path ~ /\/l10n\// || path ~ /\/gen\// || path ~ /\.mocks\.dart$/ || path ~ /firebase_options\.dart$/) {
                keep=0
              } else { keep=1 }
              if (keep) print $0
              next
            }
            /^end_of_record/ { if (keep) print $0; next }
            { if (keep) print $0 }
          ' coverage/lcov.info > coverage/lcov.filtered.info
          mv coverage/lcov.filtered.info coverage/lcov.info
      - name: Enforce Flutter coverage >= 80%
        run: |
          set -euo pipefail
          if [ ! -f coverage/lcov.info ]; then
            echo "Flutter coverage file missing: coverage/lcov.info" >&2
            exit 1
          fi
          awk -F, '/^DA:/{total++; if ($2>0) hit++} END { if (total==0) { print "No coverage data (DA lines) found"; exit 1 } cov=100*hit/total; printf "Flutter line coverage: %.2f%%\n", cov; if (cov < 85) { print "Coverage below 85% threshold"; exit 1 } }' coverage/lcov.info
      - name: Upload Flutter coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-flutter
          path: coverage/lcov.info

  gate-and-comment:
    needs: [ test-functions, test-flutter ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          path: coverage-artifacts
      - name: Setup .NET 8 for ReportGenerator
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Install ReportGenerator tool
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
      - name: Convert LCOV to Cobertura
        run: |
          ~/.dotnet/tools/reportgenerator \
            -reports:coverage-artifacts/coverage-functions/lcov.info \
            -targetdir:coverage-artifacts/coverage-functions \
            -reporttypes:Cobertura
          ~/.dotnet/tools/reportgenerator \
            -reports:coverage-artifacts/coverage-flutter/lcov.info \
            -targetdir:coverage-artifacts/coverage-flutter \
            -reporttypes:Cobertura
      - name: Coverage Summary (min 80%)
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "coverage-artifacts/**/Cobertura.xml"
          badge: true
          format: 'markdown'
          output: 'both'
          thresholds: '80 80'
          fail_below_min: false
      - name: Add PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const summaryPath = path.join(process.env.GITHUB_WORKSPACE, 'code-coverage-results.md');
            const body = fs.existsSync(summaryPath) ? fs.readFileSync(summaryPath, 'utf8') : 'Coverage summary unavailable';
            try {
              await github.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                body
              });
            } catch (error) {
              if (error.status === 403) {
                console.log("skipped due to permissions");
              } else {
                throw error;
              }
            }
