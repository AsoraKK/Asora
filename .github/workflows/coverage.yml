---
name: Coverage Gate

permissions:
  contents: write
  pull-requests: write

on:
  pull_request:
  push:
    branches: [main]

jobs:
  test-functions:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: actions/setup-node@v4.0.3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json
      - name: Guard against UTF-8 BOMs
        run: bash ../scripts/check-bom.sh
      - name: Install deps
        run: npm ci
      - name: Run tests with coverage (Functions)
        run: |
          npm test -- --coverage --ci
      - name: Upload Functions coverage
        uses: actions/upload-artifact@v4.4.0
        with:
          name: coverage-functions
          path: functions/coverage/lcov.info

  test-flutter:
    runs-on: ubuntu-latest
    env:
      ASORA_REQUIRE_REAL_PINS: "false"  # TODO: flip to "true" once real pins land
    steps:
      - uses: actions/checkout@v4.1.7
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Flutter pub get
        run: flutter pub get
      - name: Flutter tests with coverage
        run: flutter test --coverage
      - name: Filter Flutter coverage (exclude generated/entry)
        run: |
          awk '
            BEGIN{keep=1}
            /^SF:/ {
              path=$0
              if (path ~ /\/main\.dart$/ || path ~ /\.g\.dart$/ || path ~ /\.freezed\.dart$/ || path ~ /generated_plugin_registrant\.dart$/ || path ~ /\/l10n\// || path ~ /\/gen\// || path ~ /\.mocks\.dart$/ || path ~ /firebase_options\.dart$/) {
                keep=0
              } else { keep=1 }
              if (keep) print $0
              next
            }
            /^end_of_record/ { if (keep) print $0; next }
            { if (keep) print $0 }
          ' coverage/lcov.info > coverage/lcov.filtered.info
          mv coverage/lcov.filtered.info coverage/lcov.info
      - name: Enforce Flutter coverage >= 80%
        run: bash scripts/check_flutter_coverage.sh 80
      - name: Upload Flutter coverage
        uses: actions/upload-artifact@v4.4.0
        with:
          name: coverage-flutter
          path: coverage/lcov.info

  gate-and-comment:
    needs: [ test-functions, test-flutter ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7
      - name: Download coverage artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          path: coverage-artifacts
      - name: Setup .NET 8 for ReportGenerator
        uses: actions/setup-dotnet@v4.0.1
        with:
          dotnet-version: '8.0.x'
      - name: Install ReportGenerator tool
        run: dotnet tool install -g dotnet-reportgenerator-globaltool
      - name: Convert LCOV to Cobertura
        run: |
          ~/.dotnet/tools/reportgenerator \
            -reports:coverage-artifacts/coverage-functions/lcov.info \
            -targetdir:coverage-artifacts/coverage-functions \
            -reporttypes:Cobertura
          ~/.dotnet/tools/reportgenerator \
            -reports:coverage-artifacts/coverage-flutter/lcov.info \
            -targetdir:coverage-artifacts/coverage-flutter \
            -reporttypes:Cobertura
      - name: Coverage Summary (min 80%)
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: "coverage-artifacts/**/Cobertura.xml"
          badge: true
          format: 'markdown'
          output: 'both'
          thresholds: '80 80'
          fail_below_min: false
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const p = path.join(process.env.GITHUB_WORKSPACE, 'code-coverage-results.md');
            const body = fs.existsSync(p) ? fs.readFileSync(p, 'utf8') : 'Coverage summary unavailable';
            const pr = context.payload.pull_request?.number;
            if (!pr) { core.info('No PR context; skipping'); return; }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body
            });

      - name: Comment coverage on commit
        if: github.event_name == 'push'
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const body = fs.existsSync('code-coverage-results.md')
              ? fs.readFileSync('code-coverage-results.md','utf8')
              : 'Coverage summary unavailable';
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body
            });
