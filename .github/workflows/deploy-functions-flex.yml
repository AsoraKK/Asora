# NOTE to assistants: Do not upgrade Azure/functions-action here. Keep @v1.
# Upgrades are handled in a separate migration branch with test gates.
#
name: Deploy Functions (Flex)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  pull-requests: write

concurrency:
  group: deploy-functions-flex-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    env:
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_FUNCTIONAPP_NAME: asora-function-dev
      AZURE_RESOURCE_GROUP: asora-psql-flex
      NODE_VERSION: '20'
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      # actionlint: allow secrets COSMOS_CONNECTION_STRING
      COSMOS_CONNECTION_STRING: ${{ secrets.COSMOS_CONNECTION_STRING }}
      FORCE_ZIP_DEPLOY: '0'
    steps:
      - uses: actions/checkout@v4

      - name: Guard action version
        shell: bash
        run: |
          set -Eeuo pipefail
          ! grep -R --line-number -E 'uses:\s*Azure/functions-action@v4' .github/workflows || {
            echo "::error::Do not upgrade to v4 here"; exit 1; }

      - name: Guard Flex-incompatible settings
        run: bash scripts/check-flex-settings.sh

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install jq, zip, unzip
        run: sudo apt-get update && sudo apt-get install -y jq zip unzip

      - name: Package Functions (dist-v4-final.zip)
        run: |
          set -Eeuo pipefail
          bash scripts/package-v4.sh
          test -f functions/dist-v4-final.zip
          mv functions/dist-v4-final.zip dist-v4-final.zip

      - name: Guard host.json version
        shell: bash
        run: |
          set -Eeuo pipefail
          mapfile -t FILES < <(git ls-files 'functions/**/host.json' 'host.json' ':!functions/**/node_modules/**')
          [ "${#FILES[@]}" -gt 0 ] || { echo "No host.json found"; exit 1; }
          for f in "${FILES[@]}"; do
            jq -e '."version"=="2.0" or (has("version")==false)' "$f" >/dev/null \
              || { echo "Invalid host.json version in $f"; exit 1; }
          done

      - name: Tripwire against "4.0" in deployables
        shell: bash
        run: |
          set -Eeuo pipefail
          ! grep -R --line-number '"version"[[:space:]]*:[[:space:]]*"4\.0"' \
            -- 'functions/**' ':!functions/**/node_modules/**' ':!**/*.md' || {
            echo 'Found "version": "4.0" in deployable tree'; exit 1; }

      - name: Isolate Azure CLI cache (per-run)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "$RUNNER_TEMP/azcfg"
          echo "AZURE_CONFIG_DIR=$RUNNER_TEMP/azcfg" >> "$GITHUB_ENV"

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Log tool versions
        shell: bash
        run: |
          set -Eeuo pipefail
          az --version
          node -v
          npm -v

      - name: Preflight â€” scope + app existence
        shell: bash
        run: |
          set -Eeuo pipefail
          sub="${AZURE_SUBSCRIPTION_ID}"
          rg="${AZURE_RESOURCE_GROUP}"
          app="${AZURE_FUNCTIONAPP_NAME}"
          app_id="/subscriptions/${sub}/resourceGroups/${rg}/providers/Microsoft.Web/sites/${app}"
          echo "Using SUB=${sub} RG=${rg} APP=${app}"
          if ! az resource show --ids "$app_id" -o none --only-show-errors; then
            echo "::group::Debug list in RG"
            az resource list -g "$rg" --resource-type Microsoft.Web/sites -o table --only-show-errors || true
            echo "::endgroup::"
            echo "::error::Function App not found: $app_id"
            exit 2
          fi
          az functionapp show -g "$rg" -n "$app" --query '{name:name, rg:resourceGroup, location:location, kind:kind, state:state}' -o table --only-show-errors

      - name: Configure Function App (Flex-aware)
        shell: bash
        run: |
          set -Eeuo pipefail
          az config set extension.use_dynamic_install=yes_without_prompt
          SUB="${AZURE_SUBSCRIPTION_ID}"
          RG="${AZURE_RESOURCE_GROUP}"
          APP="${AZURE_FUNCTIONAPP_NAME}"
          sub_opt=(--subscription "$SUB")
          APP_ID="/subscriptions/${SUB}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}"

          PLAN_ID="$(az resource show "${sub_opt[@]}" --ids "$APP_ID" --query "properties.serverFarmId" -o tsv --only-show-errors || echo "")"
          KIND="$(az resource show "${sub_opt[@]}" --ids "$APP_ID" --query "kind" -o tsv --only-show-errors || echo "")"
          TIER=""
          if [ -n "$PLAN_ID" ]; then
            TIER="$(az resource show "${sub_opt[@]}" --ids "$PLAN_ID" --query "sku.tier" -o tsv --only-show-errors || echo "")"
          fi
          IS_FLEX=false
          if [ "$TIER" = "FlexConsumption" ] || [[ "$KIND" == *flex* ]]; then
            IS_FLEX=true
          fi

          if "$IS_FLEX"; then
            az functionapp config appsettings delete "${sub_opt[@]}" -g "$RG" -n "$APP" --setting-names FUNCTIONS_WORKER_RUNTIME WEBSITE_NODE_DEFAULT_VERSION FUNCTIONS_EXTENSION_VERSION -o none --only-show-errors || true
            API="2022-03-01"
            SITE_JSON="$(az rest --method get --url "https://management.azure.com$APP_ID?api-version=$API" --only-show-errors)"
            RUNTIME_JSON="$(jq -c '.properties.functionAppConfig.runtime // {}' <<<"$SITE_JSON" || echo '{}')"
            echo "Flex runtime: $RUNTIME_JSON"
            NAME="$(jq -r '.name // ""' <<<"$RUNTIME_JSON")"
            VER="$(jq -r '.version // ""' <<<"$RUNTIME_JSON")"
            if [ "$NAME" != "node" ] || [ "$VER" != "20" ]; then
              echo "::warning::Flex runtime not reported as node/20; continuing (API sometimes omits runtime)."
            fi
            az resource update "${sub_opt[@]}" -g "$RG" -n "$APP/config/web" --resource-type "Microsoft.Web/sites/config" --set properties.linuxFxVersion="" -o none --only-show-errors || true
          else
            az functionapp config appsettings set "${sub_opt[@]}" -g "$RG" -n "$APP" -o none --only-show-errors --settings \
              FUNCTIONS_NODE_BLOCK_ON_ENTRY_POINT_ERROR=true \
              APPLICATIONINSIGHTS_ROLE_NAME="$APP"
            if [[ "$KIND" == *linux* ]]; then
              az functionapp config set "${sub_opt[@]}" -g "$RG" -n "$APP" --linux-fx-version "node|20" -o none --only-show-errors
            fi
          fi

          if [ -n "${COSMOS_CONNECTION_STRING:-}" ]; then
            az functionapp config appsettings set "${sub_opt[@]}" -g "$RG" -n "$APP" -o none --only-show-errors --settings \
              COSMOS_CONNECTION_STRING="${COSMOS_CONNECTION_STRING}" COSMOS_DATABASE_NAME="asora"
          fi

          az functionapp restart "${sub_opt[@]}" -g "$RG" -n "$APP" -o none --only-show-errors

          ROLE_VAL="$(az functionapp config appsettings list "${sub_opt[@]}" -g "$RG" -n "$APP" --query "[?name=='APPLICATIONINSIGHTS_ROLE_NAME'].value|[0]" -o tsv --only-show-errors)"
          if [ "$ROLE_VAL" != "$APP" ]; then
            echo "::error::AI role not set on $APP"
            exit 3
          fi

          if ! "$IS_FLEX" && [[ "$KIND" == *linux* ]]; then
            if [ "$(az functionapp config show "${sub_opt[@]}" -g "$RG" -n "$APP" --query linuxFxVersion -o tsv --only-show-errors)" != "node|20" ]; then
              echo "::error::linuxFxVersion!=node|20"
              exit 4
            fi
          fi

          echo "::notice::Configured '$APP' in '$RG' (sub ${SUB})."


      - name: Prepare v4 entry point
        working-directory: functions
        run: |
          cat > index.js <<'EOF'
          // Azure Functions Node v4 isolated entrypoint
          try { module.exports = require('./dist/index.js'); }
          catch (e) { module.exports = require('./dist/src/index.js'); }
          EOF

      - name: Check Cosmos configuration
        shell: bash
        run: |
          [[ -z "${COSMOS_CONNECTION_STRING:-}" ]] && echo "::warning::COSMOS_CONNECTION_STRING unset; functions relying on Cosmos will fail at runtime."
        env:
          COSMOS_CONNECTION_STRING: ${{ env.COSMOS_CONNECTION_STRING }}

      - name: Deploy Functions
        id: deploy_functions
        uses: Azure/functions-action@v1
        with:
          app-name: asora-function-dev
          package: dist-v4-final.zip
          remote-build: false
          respect-funcignore: false

      # actionlint: allow env FORCE_ZIP_DEPLOY
      - name: ZIP deploy via CLI (fallback)
        if: ${{ always() && (env.FORCE_ZIP_DEPLOY == '1' || failure()) }}
        env:
          RG: asora-psql-flex
          APP: asora-function-dev
        run: |
          set -Eeuo pipefail
          test -f dist-v4-final.zip
          az functionapp deployment source config-zip -g "$RG" -n "$APP" --src dist-v4-final.zip

      - name: Verify discovery
        shell: bash
        run: |
          set -Eeuo pipefail
          sub_opt=(--subscription "${AZURE_SUBSCRIPTION_ID}")
          az functionapp function list "${sub_opt[@]}" -g "${AZURE_RESOURCE_GROUP}" -n "${AZURE_FUNCTIONAPP_NAME}" -o table --only-show-errors

