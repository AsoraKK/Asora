# NOTE to assistants: Do not upgrade Azure/functions-action here. Keep @v1.
# Upgrades are handled in a separate migration branch with test gates.
#
name: Deploy Functions (Flex)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: write
  pull-requests: write

concurrency:
  group: deploy-functions-flex-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: functions
    env:
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_FUNCTIONAPP_NAME: asora-function-dev
      AZURE_RESOURCE_GROUP: asora-psql-flex
      NODE_VERSION: '20'
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      # actionlint: allow secret COSMOS_CONNECTION_STRING
      COSMOS_CONNECTION_STRING: ${{ secrets.COSMOS_CONNECTION_STRING }}
      FORCE_ZIP_DEPLOY: '0'
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Install jq, zip, unzip
        run: sudo apt-get update && sudo apt-get install -y jq zip unzip

      - name: Isolate AZ cache
        shell: bash
        run: |
          set -euo pipefail
          DIR="$RUNNER_TEMP/azcfg-${GITHUB_RUN_ID}"
          mkdir -p "$DIR"
          echo "AZURE_CONFIG_DIR=$DIR" >> "$GITHUB_ENV"
      - name: Verify OIDC token env
        run: |
          set -euo pipefail
          test -n "${ACTIONS_ID_TOKEN_REQUEST_URL:-}" || { echo "::error::ACTIONS_ID_TOKEN_REQUEST_URL missing"; exit 1; }

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Azure subscription context
        run: |
          set -euo pipefail
          az cloud set -n AzureCloud
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          az account show -o table
      - name: Azure ARM probe
        run: |
          set -euo pipefail
          SUBS="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          RG="asora-psql-flex"; APP="asora-function-dev"; API="2022-03-01"
          ID="/subscriptions/$SUBS/resourceGroups/$RG/providers/Microsoft.Web/sites/$APP"
          az rest --method get --url "https://management.azure.com${ID}?api-version=${API}" | jq -e '.properties.defaultHostName' >/dev/null

      - name: Guard action version
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          set -Eeuo pipefail
          ! grep -R --line-number -E 'uses:\s*Azure/functions-action@v4' .github/workflows || {
            echo "::error::Do not upgrade to v4 here"; exit 1; }

      - name: Guard Flex-incompatible settings
        working-directory: ${{ github.workspace }}
        run: bash scripts/check-flex-settings.sh

      - name: Setup Node
        uses: actions/setup-node@v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Disable Husky in CI
        run: echo "HUSKY=0" >> "$GITHUB_ENV"

      - name: Verify build script exists
        run: |
          set -Eeuo pipefail
          test -f package.json || { echo "::error::functions/package.json missing"; exit 1; }
          jq -e 'has("scripts") and (.scripts|has("build"))' package.json >/dev/null \
            || { echo "::error::No scripts.build in functions/package.json"; echo "Scripts:"; jq '.scripts' package.json; exit 1; }

      - name: npm ci
        run: npm ci

      - name: TypeScript build
        run: npm run -s build

      - name: Verify dist output
        run: |
          set -Eeuo pipefail
          test -d dist || { echo "::error::functions/dist not produced"; exit 1; }
          find dist -maxdepth 2 -type f | head -n 50

      - name: Preflight dist directory
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          test -d "$GITHUB_WORKSPACE/functions/dist" || { echo "functions/dist missing"; exit 1; }

      - name: Package Azure Functions v4 zip
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          set -Eeuo pipefail
          ROOT="$GITHUB_WORKSPACE"
          DEPLOY="$ROOT/deploy"
          rm -rf -- "$DEPLOY" "$ROOT/dist-v4-final.zip"
          mkdir -p "$DEPLOY"

          test -f "$ROOT/host.json" || { echo "::error::repo-root host.json missing"; exit 1; }
          jq -e '."version"=="2.0" or (has("version")==false)' "$ROOT/host.json" >/dev/null || { echo "::error::Invalid host.json at root"; exit 1; }
          cp "$ROOT/host.json" "$DEPLOY/"

          test -f "$ROOT/functions/package.json" || { echo "::error::functions/package.json missing"; exit 1; }
          cp "$ROOT/functions/package.json" "$DEPLOY/"

          test -f "$ROOT/functions/runtime-index.js" || { echo "::error::functions/runtime-index.js missing"; exit 1; }
          cp "$ROOT/functions/runtime-index.js" "$DEPLOY/index.js"

          test -d "$ROOT/functions/dist" || { echo "::error::functions/dist missing"; exit 1; }
          if find "$ROOT/functions/dist" -mindepth 1 -print -quit | grep -q .; then
            cp -R -- "$ROOT/functions/dist/." "$DEPLOY/"
          else
            echo "::error::functions/dist contains no files"; exit 1
          fi

          echo "Copying function.json directories..."
          found=0
          while IFS= read -r rel; do
            d="$(dirname "$rel")"
            mkdir -p "$DEPLOY/$d"
            cp "$ROOT/functions/$d/function.json" "$DEPLOY/$d/"
            found=$((found+1))
          done < <(cd "$ROOT/functions" && git ls-files -- '*/function.json')
          [ "$found" -ge 1 ] || { echo "::error::No function.json found under functions/"; exit 1; }

          pushd "$ROOT/functions" >/dev/null
          npm ci --omit=dev
          popd >/dev/null
          cp -R -- "$ROOT/functions/node_modules" "$DEPLOY/node_modules"

          (cd "$DEPLOY" && zip -r ../dist-v4-final.zip . -x "*.DS_Store" "*.git*")
          test -f "$ROOT/dist-v4-final.zip" || { echo "::error::ZIP not created"; exit 1; }

      - name: Sanity check ZIP contents
        working-directory: ${{ github.workspace }}
        run: |
          set -Eeuo pipefail
          unzip -l dist-v4-final.zip | awk '{print $4}' | sed '1,3d' | sort > zip.lst
          grep -q '^host.json$' zip.lst
          grep -q '^index.js$' zip.lst
          grep -q '^package.json$' zip.lst
          grep -q '^node_modules/' zip.lst

      - name: Guard host.json version
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          set -Eeuo pipefail
          FILES=$(git ls-files -- 'host.json' 'functions/**/host.json' ':!:**/node_modules/**' ':!:**/*.md')
          [ -n "$FILES" ] || { echo "::error::No host.json found in repo"; exit 1; }
          for f in $FILES; do
            jq -e '(."version" == "2.0") or (has("version") == false)' "$f" >/dev/null \
              || { echo "::error::Invalid host.json version in $f"; exit 1; }
          done

      - name: Tripwire against "4.0" in deployables
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          set -Eeuo pipefail
          ! grep -R --line-number '"version"[[:space:]]*:[[:space:]]*"4\.0"' \
            -- 'functions/**' ':!functions/**/node_modules/**' ':!**/*.md' || {
            echo 'Found "version": "4.0" in deployable tree'; exit 1; }

      - name: Log tool versions
        shell: bash
        run: |
          set -Eeuo pipefail
          az --version
          node -v
          npm -v

      - name: Preflight â€” scope + app existence
        shell: bash
        run: |
          set -Eeuo pipefail
          sub="${AZURE_SUBSCRIPTION_ID}"
          rg="${AZURE_RESOURCE_GROUP}"
          app="${AZURE_FUNCTIONAPP_NAME}"
          app_id="/subscriptions/${sub}/resourceGroups/${rg}/providers/Microsoft.Web/sites/${app}"
          echo "Using SUB=${sub} RG=${rg} APP=${app}"
          if ! az resource show --ids "$app_id" -o none --only-show-errors; then
            echo "::group::Debug list in RG"
            az resource list -g "$rg" --resource-type Microsoft.Web/sites -o table --only-show-errors || true
            echo "::endgroup::"
            echo "::error::Function App not found: $app_id"
            exit 2
          fi
          az functionapp show -g "$rg" -n "$app" --query '{name:name, rg:resourceGroup, location:location, kind:kind, state:state}' -o table --only-show-errors

      - name: Configure Function App (Flex-aware)
        shell: bash
        run: |
          set -Eeuo pipefail
          az config set extension.use_dynamic_install=yes_without_prompt
          SUB="${AZURE_SUBSCRIPTION_ID}"
          RG="${AZURE_RESOURCE_GROUP}"
          APP="${AZURE_FUNCTIONAPP_NAME}"
          sub_opt=(--subscription "$SUB")
          APP_ID="/subscriptions/${SUB}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}"

          PLAN_ID="$(az resource show "${sub_opt[@]}" --ids "$APP_ID" --query "properties.serverFarmId" -o tsv --only-show-errors || echo "")"
          KIND="$(az resource show "${sub_opt[@]}" --ids "$APP_ID" --query "kind" -o tsv --only-show-errors || echo "")"
          TIER=""
          if [ -n "$PLAN_ID" ]; then
            TIER="$(az resource show "${sub_opt[@]}" --ids "$PLAN_ID" --query "sku.tier" -o tsv --only-show-errors || echo "")"
          fi
          IS_FLEX=false
          if [ "$TIER" = "FlexConsumption" ] || [[ "$KIND" == *flex* ]]; then
            IS_FLEX=true
          fi

          if "$IS_FLEX"; then
            az functionapp config appsettings delete "${sub_opt[@]}" -g "$RG" -n "$APP" --setting-names FUNCTIONS_WORKER_RUNTIME WEBSITE_NODE_DEFAULT_VERSION FUNCTIONS_EXTENSION_VERSION -o none --only-show-errors || true
            API="2022-03-01"
            SITE_JSON="$(az rest --method get --url "https://management.azure.com$APP_ID?api-version=$API" --only-show-errors)"
            RUNTIME_JSON="$(jq -c '.properties.functionAppConfig.runtime // {}' <<<"$SITE_JSON" || echo '{}')"
            echo "Flex runtime: $RUNTIME_JSON"
            NAME="$(jq -r '.name // ""' <<<"$RUNTIME_JSON")"
            VER="$(jq -r '.version // ""' <<<"$RUNTIME_JSON")"
            if [ "$NAME" != "node" ] || [ "$VER" != "20" ]; then
              echo "::warning::Flex runtime not reported as node/20; continuing (API sometimes omits runtime)."
            fi
            az resource update "${sub_opt[@]}" -g "$RG" -n "$APP/config/web" --resource-type "Microsoft.Web/sites/config" --set properties.linuxFxVersion="" -o none --only-show-errors || true
          else
            az functionapp config appsettings set "${sub_opt[@]}" -g "$RG" -n "$APP" -o none --only-show-errors --settings \
              FUNCTIONS_NODE_BLOCK_ON_ENTRY_POINT_ERROR=true \
              APPLICATIONINSIGHTS_ROLE_NAME="$APP"
            if [[ "$KIND" == *linux* ]]; then
              az functionapp config set "${sub_opt[@]}" -g "$RG" -n "$APP" --linux-fx-version "node|20" -o none --only-show-errors
            fi
          fi

          if [ -n "${COSMOS_CONNECTION_STRING:-}" ]; then
            az functionapp config appsettings set "${sub_opt[@]}" -g "$RG" -n "$APP" -o none --only-show-errors --settings \
              COSMOS_CONNECTION_STRING="${COSMOS_CONNECTION_STRING}" COSMOS_DATABASE_NAME="asora"
          fi

          az functionapp restart "${sub_opt[@]}" -g "$RG" -n "$APP" -o none --only-show-errors

          ROLE_VAL="$(az functionapp config appsettings list "${sub_opt[@]}" -g "$RG" -n "$APP" --query "[?name=='APPLICATIONINSIGHTS_ROLE_NAME'].value|[0]" -o tsv --only-show-errors)"
          if [ "$ROLE_VAL" != "$APP" ]; then
            echo "::error::AI role not set on $APP"
            exit 3
          fi

          if ! "$IS_FLEX" && [[ "$KIND" == *linux* ]]; then
            if [ "$(az functionapp config show "${sub_opt[@]}" -g "$RG" -n "$APP" --query linuxFxVersion -o tsv --only-show-errors)" != "node|20" ]; then
              echo "::error::linuxFxVersion!=node|20"
              exit 4
            fi
          fi

          echo "::notice::Configured '$APP' in '$RG' (sub ${SUB})."


      - name: Prepare v4 entry point
        working-directory: functions
        run: |
          cat > index.js <<'EOF'
          // Azure Functions Node v4 isolated entrypoint
          try { module.exports = require('./dist/index.js'); }
          catch (e) { module.exports = require('./dist/src/index.js'); }
          EOF

      - name: Check Cosmos configuration
        shell: bash
        run: |
          [[ -z "${COSMOS_CONNECTION_STRING:-}" ]] && echo "::warning::COSMOS_CONNECTION_STRING unset; functions relying on Cosmos will fail at runtime."
        env:
          COSMOS_CONNECTION_STRING: ${{ env.COSMOS_CONNECTION_STRING }}

      - name: Deploy Functions
        id: deploy_functions
        # Do not bump to v4; v4 breaks our flex packaging. Keep @v1.
        uses: Azure/functions-action@v1
        with:
          app-name: asora-function-dev
          package: dist-v4-final.zip
          remote-build: false
          respect-funcignore: false

      - name: Detect plan tier
        id: plantier
        run: |
          set -euo pipefail
          APP_ID="$(az functionapp show -n asora-function-dev -g asora-psql-flex --query id -o tsv)"
          PLAN_ID="$(az resource show --ids "$APP_ID" --query properties.serverFarmId -o tsv)"
          TIER="$(az resource show --ids "$PLAN_ID" --query sku.tier -o tsv)"
          echo "tier=$TIER" >> "$GITHUB_OUTPUT"

      # actionlint: allow env FORCE_ZIP_DEPLOY
      - name: ZIP deploy via CLI (non-Flex only)
        if: ${{ steps.plantier.outputs.tier != 'FlexConsumption' && env.FORCE_ZIP_DEPLOY == '1' }}
        env:
          RG: asora-psql-flex
          APP: asora-function-dev
        run: |
          set -euo pipefail
          test -f dist-v4-final.zip
          az functionapp deployment source config-zip -g "$RG" -n "$APP" --src dist-v4-final.zip

      - name: Resolve host and key
        env:
          SUBS: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RG: asora-psql-flex
          APP: asora-function-dev
        run: |
          set -euo pipefail
          SUBS="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          RG="asora-psql-flex"
          APP="asora-function-dev"
          az account set --subscription "$SUBS"
          echo "Try ARM first (more reliable across plan types)"
          APP_JSON=$(az rest --method get --url "https://management.azure.com/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}?api-version=2022-03-01")
          HOST=$(jq -r '.properties.defaultHostName // empty' <<<"$APP_JSON")
          if [ -z "$HOST" ]; then
            echo "::error::defaultHostName not returned"; exit 1
          fi
          echo "FUNCTION_BASE_URL=https://${HOST}" >> "$GITHUB_ENV"

          echo "Resolving admin key (optional)..."
          if KEY_JSON=$(az functionapp keys list -g "$RG" -n "$APP" 2>keys.err); then
            KEY=$(jq -r '.masterKey // empty' <<<"$KEY_JSON")
            if [ -z "$KEY" ]; then
              echo "::warning::Function key not returned; continuing as anonymous"
            fi
          else
            if grep -q '403' keys.err 2>/dev/null; then
              echo "::warning::Function key fetch returned 403; continuing as anonymous"
              KEY=""
            else
              cat keys.err >&2 || true
              echo "::warning::Failed to fetch function keys; continuing as anonymous"
              KEY=""
            fi
          fi
          rm -f keys.err || true
          echo "FUNCTION_KEY=$KEY" >> "$GITHUB_ENV"

      - name: Verify host and routes
        run: |
          set -euo pipefail
          HOST="${FUNCTION_BASE_URL#https://}"
          KEY="${FUNCTION_KEY:-}"
          if [ -n "$KEY" ] && [ "$KEY" != "anonymous" ]; then
            QP="?code=${KEY}"
          else
            QP=""
          fi
          echo "Host: $HOST"
          if curl -fsS "https://$HOST/admin/host/status$QP" | jq '{state,errors}'; then
            :
          else
            echo "::warning::admin status unavailable"
          fi
          curl -fsS "https://$HOST/admin/functions$QP" | jq length || echo "0"
          curl -isS "https://$HOST/api/health" | head -n1 || true

      - name: Verify discovery
        shell: bash
        run: |
          set -Eeuo pipefail
          sub_opt=(--subscription "${AZURE_SUBSCRIPTION_ID}")
          az functionapp function list "${sub_opt[@]}" -g "${AZURE_RESOURCE_GROUP}" -n "${AZURE_FUNCTIONAPP_NAME}" -o table --only-show-errors

      - name: Dump site JSON on failure
        if: failure()
        run: |
          set -euo pipefail
          SUBS="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          RG=asora-psql-flex
          APP=asora-function-dev
          API=2022-03-01
          APP_ID="/subscriptions/$SUBS/resourceGroups/$RG/providers/Microsoft.Web/sites/$APP"
          az rest --method get --url "https://management.azure.com${APP_ID}?api-version=${API}" | jq .

