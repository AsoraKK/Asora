# Deploy to Y1 Windows Consumption Plan using config-zip
# Flex Consumption apps are NOT supported in this workflow (Kudu/OneDeploy incompatible)
#
name: Deploy Functions (Y1 Windows)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-functions-y1-${{ github.ref }}
  cancel-in-progress: true

env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  RESOURCE_GROUP: asora-y1-win-ne
  APP_NAME: asora-func-y1-win-ne
  PACKAGE_PATH: dist-v4-final.zip
  NODE_VERSION: '20'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Block legacy SP secrets
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          set -euo pipefail
          if [ -n "${AZURE_CLIENT_SECRET:-}" ] || [ -n "${AZURE_CREDENTIALS:-}" ]; then
            echo "::error::Legacy Azure SP secret present. Migrate to OIDC only." >&2
            exit 1
          fi

      - name: Install jq, zip, unzip
        run: sudo apt-get update && sudo apt-get install -y jq zip unzip

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Guardrail – fail if target is Flex Consumption
        run: |
          set -euo pipefail
          SKU=$(az functionapp show -g "$RESOURCE_GROUP" -n "$APP_NAME" \
            --query "sku.tier" -o tsv 2>/dev/null || echo "")
          KIND=$(az functionapp show -g "$RESOURCE_GROUP" -n "$APP_NAME" \
            --query "kind" -o tsv 2>/dev/null || echo "")
          echo "Detected SKU: $SKU, KIND: $KIND"
          if echo "$SKU" | grep -iq "flex"; then
            echo "❌ Target app is Flex Consumption. This workflow only supports Y1 Windows via config-zip."
            exit 2
          fi
          if echo "$KIND" | grep -iq "flex"; then
            echo "❌ Target app kind contains 'flex'. This workflow only supports Y1 Windows via config-zip."
            exit 2
          fi

      - name: Setup Node
        uses: actions/setup-node@v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Disable Husky in CI
        run: echo "HUSKY=0" >> "$GITHUB_ENV"

      - name: Verify build script exists
        run: |
          set -Eeuo pipefail
          test -f package.json || { echo "::error::functions/package.json missing"; exit 1; }
          jq -e 'has("scripts") and (.scripts|has("build"))' package.json >/dev/null \
            || { echo "::error::No scripts.build in functions/package.json"; echo "Scripts:"; jq '.scripts' package.json; exit 1; }

      - name: npm ci
        run: npm ci

      - name: TypeScript build
        run: npm run -s build

      - name: Verify dist output
        run: |
          set -Eeuo pipefail
          test -d dist || { echo "::error::functions/dist not produced"; exit 1; }
          # `find | head` can produce a SIGPIPE when head closes early; make this tolerant
          find dist -maxdepth 2 -type f 2>/dev/null | head -n 50 || true

      - name: Preflight dist directory
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          test -d "$GITHUB_WORKSPACE/functions/dist" || { echo "functions/dist missing"; exit 1; }

      - name: Package Azure Functions v4 zip
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          set -Eeuo pipefail
          ROOT="$GITHUB_WORKSPACE"
          DEPLOY="$ROOT/deploy"
          rm -rf -- "$DEPLOY" "$ROOT/dist-v4-final.zip"
          mkdir -p "$DEPLOY"

          test -f "$ROOT/host.json" || { echo "::error::repo-root host.json missing"; exit 1; }
          jq -e '."version"=="2.0" or (has("version")==false)' "$ROOT/host.json" >/dev/null || { echo "::error::Invalid host.json at root"; exit 1; }
          cp "$ROOT/host.json" "$DEPLOY/"

          test -f "$ROOT/functions/package.json" || { echo "::error::functions/package.json missing"; exit 1; }
          cp "$ROOT/functions/package.json" "$DEPLOY/"

          test -f "$ROOT/functions/runtime-index.js" || { echo "::error::functions/runtime-index.js missing"; exit 1; }
          cp "$ROOT/functions/runtime-index.js" "$DEPLOY/index.js"

          test -d "$ROOT/functions/dist" || { echo "::error::functions/dist missing"; exit 1; }
          if find "$ROOT/functions/dist" -mindepth 1 -print -quit | grep -q .; then
            cp -R -- "$ROOT/functions/dist/." "$DEPLOY/"
          else
            echo "::error::functions/dist contains no files"; exit 1
          fi

          echo "Copying function.json directories..."
          found=0
          while IFS= read -r rel; do
            d="$(dirname "$rel")"
            mkdir -p "$DEPLOY/$d"
            cp "$ROOT/functions/$d/function.json" "$DEPLOY/$d/"
            found=$((found+1))
          done < <(cd "$ROOT/functions" && git ls-files -- '*/function.json')
          [ "$found" -ge 1 ] || { echo "::error::No function.json found under functions/"; exit 1; }

          pushd "$ROOT/functions" >/dev/null
          npm ci --omit=dev
          popd >/dev/null
          cp -R -- "$ROOT/functions/node_modules" "$DEPLOY/node_modules"

          (cd "$DEPLOY" && zip -r ../dist-v4-final.zip . -x "*.DS_Store" "*.git*")
          test -f "$ROOT/dist-v4-final.zip" || { echo "::error::ZIP not created"; exit 1; }

      - name: Sanity check ZIP contents
        working-directory: ${{ github.workspace }}
        run: |
          set -Eeuo pipefail
          unzip -l dist-v4-final.zip | awk '{print $4}' | sed '1,3d' | sort > zip.lst
          grep -q '^host.json$' zip.lst
          grep -q '^index.js$' zip.lst
          grep -q '^package.json$' zip.lst
          grep -q '^node_modules/' zip.lst

      - name: Guard host.json version
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          set -Eeuo pipefail
          FILES=$(git ls-files -- 'host.json' 'functions/**/host.json' ':!:**/node_modules/**' ':!:**/*.md')
          [ -n "$FILES" ] || { echo "::error::No host.json found in repo"; exit 1; }
          for f in $FILES; do
            jq -e '(."version" == "2.0") or (has("version") == false)' "$f" >/dev/null \
              || { echo "::error::Invalid host.json version in $f"; exit 1; }
          done

      - name: Tripwire against "4.0" in deployables
        working-directory: ${{ github.workspace }}
        shell: bash
        run: |
          set -Eeuo pipefail
          ! grep -R --line-number '"version"[[:space:]]*:[[:space:]]*"4\.0"' \
            -- 'functions/**' ':!functions/**/node_modules/**' ':!**/*.md' || {
            echo 'Found "version": "4.0" in deployable tree'; exit 1; }

      - name: Log tool versions
        shell: bash
        run: |
          set -Eeuo pipefail
          az --version
          node -v
          npm -v

      - name: Validate package exists
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          test -f "$PACKAGE_PATH" || { echo "Missing $PACKAGE_PATH"; exit 3; }

      - name: Deploy via config-zip (Y1 only)
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          az functionapp deployment source config-zip \
            -g "$RESOURCE_GROUP" -n "$APP_NAME" --src "$PACKAGE_PATH" --timeout 600

      - name: Warm & verify
        run: |
          set -euo pipefail
          az functionapp restart -g "$RESOURCE_GROUP" -n "$APP_NAME"
          sleep 25
          code=$(curl -s -o /dev/null -w '%{http_code}' "https://${APP_NAME}.azurewebsites.net/api/health")
          echo "Health HTTP: $code"
          [ "$code" -eq 200 ] || [ "$code" -eq 204 ] || { echo "Health check failed with code $code"; exit 4; }

