# Deploy to Y1 Windows Consumption Plan using config-zip
# Flex Consumption apps are NOT supported in this workflow (Kudu/OneDeploy incompatible)
#
name: Deploy Functions (Y1 Windows)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

concurrency:
  group: deploy-functions-y1-${{ github.ref }}
  cancel-in-progress: true

env:
  AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  RESOURCE_GROUP: asora-y1-win-ne
  APP_NAME: asora-func-y1-win-ne
  PACKAGE_PATH: dist-v4-final.zip
  NODE_VERSION: '20'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Block legacy SP secrets
        env:
          AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
        run: |
          set -euo pipefail
          if [ -n "${AZURE_CLIENT_SECRET:-}" ] || [ -n "${AZURE_CREDENTIALS:-}" ]; then
            echo "::error::Legacy Azure SP secret present. Migrate to OIDC only." >&2
            exit 1
          fi

      - name: Install jq, zip, unzip
        run: sudo apt-get update && sudo apt-get install -y jq zip unzip

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: Guardrail – fail if target is Flex Consumption
        run: |
          set -euo pipefail
          SKU=$(az functionapp show -g "$RESOURCE_GROUP" -n "$APP_NAME" \
            --query "sku.tier" -o tsv 2>/dev/null || echo "")
          KIND=$(az functionapp show -g "$RESOURCE_GROUP" -n "$APP_NAME" \
            --query "kind" -o tsv 2>/dev/null || echo "")
          echo "Detected SKU: $SKU, KIND: $KIND"
          if echo "$SKU" | grep -iq "flex"; then
            echo "❌ Target app is Flex Consumption. This workflow only supports Y1 Windows via config-zip."
            exit 2
          fi
          if echo "$KIND" | grep -iq "flex"; then
            echo "❌ Target app kind contains 'flex'. This workflow only supports Y1 Windows via config-zip."
            exit 2
          fi

      - name: Setup Node
        uses: actions/setup-node@v4.0.3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Disable Husky in CI
        run: echo "HUSKY=0" >> "$GITHUB_ENV"

      - name: Build classic function.json package (Y1 compatible)
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          WORK="$(mktemp -d)"; pushd "$WORK" >/dev/null

          # host.json (v2 schema works with Functions v4 runtime)
          cat > host.json <<'JSON'
          { "version": "2.0" }
          JSON

          # app-level package.json (no dev deps)
          cat > package.json <<'JSON'
          {
            "name": "asora-functions-y1",
            "version": "1.0.0",
            "private": true,
            "type": "commonjs",
            "dependencies": {}
          }
          JSON

          # Health function folder with classic handler
          mkdir -p Health
          cat > Health/function.json <<'JSON'
          {
            "bindings": [
              {
                "authLevel": "anonymous",
                "type": "httpTrigger",
                "direction": "in",
                "name": "req",
                "methods": [ "get" ],
                "route": "health"
              },
              {
                "type": "http",
                "direction": "out",
                "name": "$return"
              }
            ]
          }
          JSON

          cat > Health/index.js <<'JS'
          module.exports = async function (context, req) {
            context.res = {
              status: 200,
              headers: { "content-type": "application/json" },
              body: { ok: true, timestamp: new Date().toISOString(), service: "asora-functions" }
            };
          };
          JS

          # zip it
          (cd "$WORK" && zip -qr "$GITHUB_WORKSPACE/dist-v4-final.zip" .)
          popd >/dev/null
          echo "Built classic model package: dist-v4-final.zip"

      - name: Validate package exists
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          test -f "$PACKAGE_PATH" || { echo "Missing $PACKAGE_PATH"; exit 3; }

      - name: Deploy via config-zip (Y1 only)
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          # Reset legacy WEBSITE_RUN_FROM_PACKAGE if present (causes 409 with config-zip)
          echo "Ensuring WEBSITE_RUN_FROM_PACKAGE is cleared..."
          az functionapp config appsettings delete \
            -g "$RESOURCE_GROUP" -n "$APP_NAME" \
            --setting-names WEBSITE_RUN_FROM_PACKAGE || echo "WEBSITE_RUN_FROM_PACKAGE not found or already removed"

          # Reinstate runtime baseline to avoid accidental deletion side-effects
          echo "Restoring runtime baseline..."
          az functionapp config appsettings set \
            -g "$RESOURCE_GROUP" -n "$APP_NAME" \
            --settings FUNCTIONS_EXTENSION_VERSION=~4 || true

          # Use deployment source config-zip for Y1 Consumption (more reliable than az functionapp deploy)
          az functionapp deployment source config-zip \
            -g "$RESOURCE_GROUP" -n "$APP_NAME" --src "$PACKAGE_PATH" --timeout 600

      - name: Warm & verify
        run: |
          set -euo pipefail
          az functionapp restart -g "$RESOURCE_GROUP" -n "$APP_NAME"
          echo "Waiting for app to warm up..."
          sleep 30
          
          # Retry logic for cold starts
          MAX_RETRIES=5
          RETRY_DELAY=10
          
          for i in $(seq 1 $MAX_RETRIES); do
            code=$(curl -s -o /dev/null -w '%{http_code}' "https://${APP_NAME}.azurewebsites.net/api/health")
            echo "Attempt $i/$MAX_RETRIES: Health HTTP $code"
            
            if [ "$code" -eq 200 ] || [ "$code" -eq 204 ]; then
              echo "✅ Health endpoint responding"
              exit 0
            fi
            
            if [ $i -lt $MAX_RETRIES ]; then
              echo "Waiting ${RETRY_DELAY}s before retry..."
              sleep $RETRY_DELAY
            fi
          done
          
          echo "::error::Health check failed after $MAX_RETRIES attempts (last code: $code)"
          exit 4

