---
name: Deploy Functions (Flex)

on:
  push:
    branches: [main]

permissions:
  id-token: write
  contents: write
  pull-requests: write

concurrency:
  group: deploy-functions-flex-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: dev
    env:
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      AZURE_FUNCTIONAPP_NAME: asora-function-dev
      AZURE_RESOURCE_GROUP: asora-psql-flex
      NODE_VERSION: '20'
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Build functions (then prune to prod)
        working-directory: functions
        run: |
          set -Eeuo pipefail
          rm -rf node_modules
          npm ci
          npm run build
          find dist -name '*.js' | grep . || (echo "No JS build output in dist/"; exit 1)
          npm prune --omit=dev

      - name: Isolate Azure CLI cache (per-run)
        shell: bash
        run: |
          set -Eeuo pipefail
          mkdir -p "$RUNNER_TEMP/azcfg"
          echo "AZURE_CONFIG_DIR=$RUNNER_TEMP/azcfg" >> "$GITHUB_ENV"

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log tool versions
        shell: bash
        run: |
          set -Eeuo pipefail
          az --version
          node -v
          npm -v

      - name: Preflight â€” scope + app existence
        shell: bash
        run: |
          set -Eeuo pipefail
          sub="${AZURE_SUBSCRIPTION_ID}"
          rg="${AZURE_RESOURCE_GROUP}"
          app="${AZURE_FUNCTIONAPP_NAME}"
          app_id="/subscriptions/${sub}/resourceGroups/${rg}/providers/Microsoft.Web/sites/${app}"
          echo "Using SUB=${sub} RG=${rg} APP=${app}"
          if ! az resource show --ids "$app_id" -o none --only-show-errors; then
            echo "::group::Debug list in RG"
            az resource list -g "$rg" --resource-type Microsoft.Web/sites -o table --only-show-errors || true
            echo "::endgroup::"
            echo "::error::Function App not found: $app_id"
            exit 2
          fi
          az functionapp show -g "$rg" -n "$app" --query '{name:name, rg:resourceGroup, location:location, kind:kind, state:state}' -o table --only-show-errors

      - name: Configure Function App (Flex-aware)
        shell: bash
        run: |
          set -Eeuo pipefail
          az config set extension.use_dynamic_install=yes_without_prompt
          SUB="${AZURE_SUBSCRIPTION_ID}"
          RG="${AZURE_RESOURCE_GROUP}"
          APP="${AZURE_FUNCTIONAPP_NAME}"
          sub_opt="--subscription ${SUB}"
          APP_ID="/subscriptions/${SUB}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}"

          retry(){ local n=0 max=5 delay=2; until "$@"; do c=$?; if [[ $c -eq 429 || $c -ge 500 ]]; then ((n++)); [[ $n -ge $max ]] && return $c; sleep $((delay**n)); else return $c; fi; done; }

          PLAN_ID=$(az resource show ${sub_opt} --ids "${APP_ID}" --query "properties.serverFarmId" -o tsv --only-show-errors 2>/dev/null || echo "")
          KIND=$(az resource show ${sub_opt} --ids "${APP_ID}" --query "kind" -o tsv --only-show-errors 2>/dev/null || echo "")
          TIER=""
          [[ -n "$PLAN_ID" ]] && TIER=$(az resource show ${sub_opt} --ids "$PLAN_ID" --query "sku.tier" -o tsv --only-show-errors 2>/dev/null || echo "")
          IS_FLEX=false; [[ "$TIER" == "FlexConsumption" || "$KIND" == *flex* ]] && IS_FLEX=true
          IS_FLEX=${IS_FLEX:-false}

          if [ "$IS_FLEX" = true ]; then
            az functionapp config appsettings delete ${sub_opt} -g "$RG" -n "$APP" --setting-names FUNCTIONS_WORKER_RUNTIME WEBSITE_NODE_DEFAULT_VERSION -o none --only-show-errors || true
            retry az functionapp config appsettings set ${sub_opt} -g "$RG" -n "$APP" -o none --only-show-errors --settings \
              FUNCTIONS_NODE_BLOCK_ON_ENTRY_POINT_ERROR=true \
              FUNCTIONS_EXTENSION_VERSION=~4 \
              APPLICATIONINSIGHTS_ROLE_NAME="$APP"
            az resource update ${sub_opt} -g "$RG" -n "$APP/config/web" --resource-type "Microsoft.Web/sites/config" --set properties.linuxFxVersion="" -o none --only-show-errors || true
          else
            retry az functionapp config appsettings set ${sub_opt} -g "$RG" -n "$APP" -o none --only-show-errors --settings \
              FUNCTIONS_WORKER_RUNTIME=node \
              FUNCTIONS_NODE_BLOCK_ON_ENTRY_POINT_ERROR=true \
              FUNCTIONS_EXTENSION_VERSION=~4 \
              APPLICATIONINSIGHTS_ROLE_NAME="$APP"
            if [[ "$KIND" == *linux* ]]; then
              retry az functionapp config set ${sub_opt} -g "$RG" -n "$APP" --linux-fx-version "node|20" -o none --only-show-errors
            else
              retry az functionapp config appsettings set ${sub_opt} -g "$RG" -n "$APP" --settings WEBSITE_NODE_DEFAULT_VERSION=~20 -o none --only-show-errors
            fi
          fi

          if [[ -n "${COSMOS_CONNECTION_STRING:-}" ]]; then
            retry az functionapp config appsettings set ${sub_opt} -g "$RG" -n "$APP" -o none --only-show-errors --settings \
              COSMOS_CONNECTION_STRING="${COSMOS_CONNECTION_STRING}" COSMOS_DATABASE_NAME="asora"
          fi

          retry az functionapp restart ${sub_opt} -g "$RG" -n "$APP" -o none --only-show-errors

          ROLE_VAL=$(az functionapp config appsettings list ${sub_opt} -g "$RG" -n "$APP" --query "[?name=='APPLICATIONINSIGHTS_ROLE_NAME'].value|[0]" -o tsv --only-show-errors)
          [[ "$ROLE_VAL" == "$APP" ]] || { echo "::error::AI role not set on $APP"; exit 3; }

          if [ "$IS_FLEX" != true ]; then
            if [[ "$KIND" == *linux* ]]; then
              [[ "$(az functionapp config show ${sub_opt} -g "$RG" -n "$APP" --query linuxFxVersion -o tsv --only-show-errors)" == "node|20" ]] || { echo "::error::linuxFxVersion!=node|20"; exit 4; }
            else
              NODE_VER="$(az functionapp config appsettings list ${sub_opt} -g "$RG" -n "$APP" \
                --query "[?name=='WEBSITE_NODE_DEFAULT_VERSION'].value|[0]" -o tsv --only-show-errors)"
              [[ "$NODE_VER" == "~20" ]] || { echo "::error::WEBSITE_NODE_DEFAULT_VERSION!=~20"; exit 5; }
            fi
          fi

          echo "::notice::Configured '$APP' in '$RG' (sub ${SUB})."
        env:
          COSMOS_CONNECTION_STRING: ${{ secrets.COSMOS_CONNECTION_STRING }}

      - name: Prepare v4 entry point
        working-directory: functions
        run: |
          cat > index.js <<'EOF'
          // Azure Functions Node v4 isolated entrypoint
          try { module.exports = require('./src/index.js'); }
          catch (e) { module.exports = require('./dist/src/index.js'); }
          EOF

      - name: Check Cosmos configuration
        shell: bash
        run: |
          [[ -z "${COSMOS_CONNECTION_STRING:-}" ]] && echo "::warning::COSMOS_CONNECTION_STRING unset; functions relying on Cosmos will fail at runtime."
        env:
          COSMOS_CONNECTION_STRING: ${{ secrets.COSMOS_CONNECTION_STRING }}

      - name: Publish to Azure Functions (OneDeploy on Flex)
        uses: Azure/functions-action@v1
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: functions
        env:
          COSMOS_CONNECTION_STRING: ${{ secrets.COSMOS_CONNECTION_STRING }}

      - name: Verify discovery
        shell: bash
        run: |
          set -Eeuo pipefail
          sub_opt="--subscription ${AZURE_SUBSCRIPTION_ID}"
          az functionapp function list $sub_opt -g "$AZURE_RESOURCE_GROUP" -n "$AZURE_FUNCTIONAPP_NAME" -o table --only-show-errors

