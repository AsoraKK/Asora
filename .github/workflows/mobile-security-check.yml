---
name: Mobile Security Check

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 6 * * 1'

permissions:
  contents: read
  id-token: write

jobs:
  verify-secrets:
    name: Verify Required Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Ensure required secrets
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          for k in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            v="${!k:-}"
            [ -n "$v" ] || { echo "Missing secret: $k"; exit 1; }
          done

  check-pins-and-integrity:
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') }}
    runs-on: ubuntu-latest
    needs: verify-secrets
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - uses: actions/checkout@v4

      - name: Install jq, zip, unzip
        run: sudo apt-get update && sudo apt-get install -y jq zip unzip

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
          audience: api://AzureADTokenExchange

      - name: Select subscription and show context
        env:
          SUBS: ${{ env.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -euo pipefail
          az account set --subscription "$SUBS"
          az account show --output table

      - name: Resolve function host
        env:
          SUBS: ${{ env.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -euo pipefail
          RG="asora-psql-flex"
          APP="asora-function-dev"
          API_VERSION="2022-03-01"
          APP_URL="https://management.azure.com/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}?api-version=${API_VERSION}"
          APP_JSON="$(az rest --method get --url "$APP_URL")"
          HOST="$(jq -r '.properties.defaultHostName // empty' <<<"$APP_JSON")"
          if [ -z "$HOST" ]; then
            echo "::error::defaultHostName not returned by ARM"; exit 1; fi
          echo "Detected function host: $HOST"
          echo "BASE_URL=https://${HOST}" >> "$GITHUB_ENV"


      - name: Check for SPKI pin placeholders in entire codebase
        shell: bash
        run: |
          set -euo pipefail

          echo "Scanning entire codebase for SPKI pin placeholders..."

          # Search for actual placeholder values in pin lists, excluding validation code
          # Look for placeholder patterns that appear as actual pin values (not in validation)
          placeholder_matches="$(find . -name "*.dart" -type f -exec grep -Hn "sha256/.*REPLACE_WITH_SPKI\|sha256/.*YOUR_SPKI_PIN\|sha256/.*TODO\|sha256/.*FIXME" {} \; 2>/dev/null || true)"

          if [ -n "$placeholder_matches" ]; then
            echo "::error::Found SPKI pin placeholders in pin values:"
            printf '%s\n' "$placeholder_matches"
            echo ""
            echo "All SPKI pin placeholders must be replaced with real pins before merging."
            echo "Update the authoritative pins in lib/core/security/cert_pinning.dart."
            exit 1
          else
            echo "✓ No SPKI pin placeholders found in pin values."
            echo "Reference pins live in lib/core/security/cert_pinning.dart."
          fi

      - name: Verify live certificate pins
        env:
          EXTRA_PIN_HOSTS: asora-function-dev-c3fyhqcfctdddfa2.northeurope-01.azurewebsites.net
        shell: bash
        run: |
          set -euo pipefail
          python3 scripts/verify_pins.py
          cat mobile-pin-report.json

      - name: Upload pin verification report
        uses: actions/upload-artifact@v4
        with:
          name: mobile-pin-report
          path: mobile-pin-report.json
          if-no-files-found: error

      - name: Check for security placeholders
        shell: bash
        run: |
          set -euo pipefail
          security_matches="$(find . -name "*.dart" -type f -exec grep -Hn "TODO.*[Ss]ecurity\|FIXME.*[Ss]ecurity\|PLACEHOLDER.*[Ss]ecurity" {} \; 2>/dev/null || true)"
          if [ -n "$security_matches" ]; then
            echo "::warning::Found security-related placeholders that may need attention:"
            printf '%s\n' "$security_matches"
          else
            echo "✓ No security TODO/FIXME placeholders detected."
          fi

      - name: Dart format check (optional)
        shell: bash
        run: |
          # Check if Flutter/Dart is available, skip if not
          if command -v dart &> /dev/null; then
            echo "Running Dart format check..."
            dart format --set-exit-if-changed . || echo "::warning::Code formatting issues found. Run 'dart format .' to fix."
          else
            echo "Dart not available, skipping format check."
          fi

      - name: Dart analyze (optional)
        shell: bash
        run: |
          # Check if Flutter/Dart is available, skip if not
          if command -v dart &> /dev/null; then
            echo "Running Dart analyzer..."
            dart analyze . || echo "::warning::Dart analyzer found issues. Review and fix before merging."
          else
            echo "Dart not available, skipping analysis."
          fi
