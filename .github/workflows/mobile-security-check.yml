name: Mobile Security Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 6 * * 1'

jobs:
  check-pins-and-integrity:
    if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Check for SPKI pin placeholders in entire codebase
        shell: bash
        run: |
          set -euo pipefail
          
          echo "Scanning entire codebase for SPKI pin placeholders..."
          
          # Search for actual placeholder values in pin lists, excluding validation code
          # Look for placeholder patterns that appear as actual pin values (not in validation)
          placeholder_count=$(find . -name "*.dart" -type f -exec grep -c "sha256/.*REPLACE_WITH_SPKI\|sha256/.*YOUR_SPKI_PIN\|sha256/.*TODO\|sha256/.*FIXME" {} \; 2>/dev/null | grep -v "^0$" | wc -l || echo "0")
          
          if [ "$placeholder_count" -gt 0 ]; then
            echo "::error::Found SPKI pin placeholders in pin values:"
            find . -name "*.dart" -type f -exec grep -Hn "sha256/.*REPLACE_WITH_SPKI\|sha256/.*YOUR_SPKI_PIN\|sha256/.*TODO\|sha256/.*FIXME" {} \; 2>/dev/null || true
            echo ""
            echo "All SPKI pin placeholders must be replaced with real pins before merging."
            echo "Update the authoritative pins in lib/core/security/cert_pinning.dart."
            exit 1
          else
            echo "✓ No SPKI pin placeholders found in pin values."
            echo "Reference pins live in lib/core/security/cert_pinning.dart."
          fi

      - name: Verify live certificate pins
        shell: bash
        run: |
          set -euo pipefail
          python3 scripts/verify_pins.py
          cat mobile-pin-report.json

      - name: Upload pin verification report
        uses: actions/upload-artifact@v4
        with:
          name: mobile-pin-report
          path: mobile-pin-report.json
          if-no-files-found: error

      - name: Check for security placeholders
        shell: bash
        run: |
          set -euo pipefail
          security_placeholders=$(find . -name "*.dart" -type f -exec grep -l "TODO.*[Ss]ecurity\|FIXME.*[Ss]ecurity\|PLACEHOLDER.*[Ss]ecurity" {} \; 2>/dev/null || true)
          if [ -n "$security_placeholders" ]; then
            echo "::warning::Found security-related placeholders that may need attention:"
            find . -name "*.dart" -type f -exec grep -Hn "TODO.*[Ss]ecurity\|FIXME.*[Ss]ecurity\|PLACEHOLDER.*[Ss]ecurity" {} \; 2>/dev/null || true
          else
            echo "✓ No security TODO/FIXME placeholders detected."
          fi
      
      - name: Dart format check (optional)
        shell: bash
        run: |
          # Check if Flutter/Dart is available, skip if not
          if command -v dart &> /dev/null; then
            echo "Running Dart format check..."
            dart format --set-exit-if-changed . || echo "::warning::Code formatting issues found. Run 'dart format .' to fix."
          else
            echo "Dart not available, skipping format check."
          fi
      
      - name: Dart analyze (optional)
        shell: bash
        run: |
          # Check if Flutter/Dart is available, skip if not
          if command -v dart &> /dev/null; then
            echo "Running Dart analyzer..."
            dart analyze . || echo "::warning::Dart analyzer found issues. Review and fix before merging."
          else
            echo "Dart not available, skipping analysis."
          fi
