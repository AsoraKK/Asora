name: Deploy Azure Function App

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

# Required for OIDC authentication with Azure
permissions:
  contents: read
  id-token: write

env:
  AZURE_FUNCTIONAPP_NAME: 'asora-function-dev'
  AZURE_RESOURCE_GROUP: 'asora-psql-flex'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  NODE_VERSION: '20'
  FUNCTIONS_WORKER_RUNTIME: 'node'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || null }}
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: 'Setup Node.js 20'
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: functions/package-lock.json

    - name: 'Login to Azure'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: 'Install Azure Developer CLI'
      uses: Azure/setup-azd@v2
      with:
        version: latest

    - name: Setup Terraform (reliable)
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.9.8
        terraform_wrapper: false

    - name: 'Verify Azure Authentication'
      run: |
        echo "üîç Verifying Azure OIDC authentication..."
        az account show --output table
        echo "‚úÖ Successfully authenticated with Azure using OIDC (no client secrets used)"
        echo "üìã Current subscription: $(az account show --query name -o tsv)"
        echo "üìã Tenant ID: $(az account show --query tenantId -o tsv)"

    - name: 'Build Functions'
      working-directory: .
      env:
        HUSKY: "0"
        NPM_CONFIG_AUDIT: "false"
        NPM_CONFIG_FUND: "false"
      run: |
        echo "üì¶ Installing dependencies for functions..."
        pushd functions || exit 1
        npm ci
        npm run build || echo "No build script"
        popd

    - name: Show azure.yaml used by CI
      run: |
        pwd
        ls -la
        sed -n '1,120p' azure.yaml

    - name: Confirm azd reads Terraform provider
      run: |
        echo "üîç Checking azd infrastructure configuration..."
        azd show --output json | jq '.infra' || azd show

    - name: Create/select azd environment
      run: |
        azd env new asora-dev --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" --location northeurope --no-prompt || azd env select asora-dev

    - name: Set TF vars for azd
      run: |
        azd env set TF_VAR_subscription_id "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
        azd env set TF_VAR_postgresql_password "${{ secrets.POSTGRES_ADMIN_PASSWORD }}"
        azd env set TF_VAR_client_ip "${{ secrets.CLIENT_IP }}"

    - name: Restore azd-managed tools & verify
      run: |
        azd tool restore
        which terraform && terraform -version
        azd --version
        echo "infra provider:" && azd show --output json | jq -r '.infra.provider // "unknown"'

    - name: üöÄ Deploy with AZD
      env:
        HUSKY: "0"
        NPM_CONFIG_AUDIT: "false"
        NPM_CONFIG_FUND: "false"
      run: |
        echo "üöÄ Deploying Asora to Azure..."
        azd up --no-prompt
        APP_URL=$(azd show --output json | jq -r '.services.functions.properties.endpoint // empty' 2>/dev/null || echo "")
        echo "app-url=${APP_URL:-https://asora-function-prod.azurewebsites.net}" >> "$GITHUB_OUTPUT"
        echo "üåê Deployed to: ${APP_URL:-https://asora-function-prod.azurewebsites.net}"

    - name: 'Verify deployment'
      run: |
        echo "‚úÖ Deployment completed successfully with azd!"
        echo "üîç Checking deployed resources..."
        azd show --output json | jq '.services' 2>/dev/null || azd show
        KV_COUNT=$(az functionapp config appsettings list \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "length([?contains(value, '@Microsoft.KeyVault')])" \
          -o tsv)
        
        echo "üìä Found $KV_COUNT Key Vault references"
        
        # Verify we have the expected Key Vault references
        EXPECTED_SECRETS=("JWT_SECRET" "COSMOS_ENDPOINT" "COSMOS_KEY" "POSTGRES_CONNECTION_STRING" "HIVE_TEXT_KEY" "HIVE_IMAGE_KEY" "HIVE_DEEPFAKE_KEY" "EMAIL_HASH_SALT")
        
        echo "üîç Verifying individual Key Vault references..."
        for secret in "${EXPECTED_SECRETS[@]}"; do
          SECRET_VALUE=$(az functionapp config appsettings list \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "[?name=='$secret'].value" \
            -o tsv)
          
          if [[ $SECRET_VALUE == *"@Microsoft.KeyVault"* ]]; then
            echo "‚úÖ $secret: Key Vault reference configured"
          else
            echo "‚ùå $secret: Missing or not a Key Vault reference"
            exit 1
          fi
        done
        
        # Verify Function App health
        echo "üè• Checking Function App health..."
        APP_URL="https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net"
        
        # Wait for app to be ready
        echo "‚è≥ Waiting for Function App to be ready..."
        for i in {1..12}; do
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" || echo "000")
          if [[ "$HTTP_STATUS" == "200" || "$HTTP_STATUS" == "404" ]]; then
            echo "‚úÖ Function App is responding (HTTP $HTTP_STATUS)"
            break
          fi
          echo "‚è≥ Attempt $i/12: Function App not ready yet (HTTP $HTTP_STATUS), waiting..."
          sleep 15
        done
        
        # Final health check
        if [[ "$HTTP_STATUS" == "000" ]]; then
          echo "‚ùå Function App is not responding after 3 minutes"
          exit 1
        fi
        
        echo "‚úÖ Key Vault references verification completed successfully!"
        echo "üéâ Function App is healthy and Key Vault integration is working!"
