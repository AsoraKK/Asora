name: Deploy Azure Function App

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

# Required for OIDC authentication with Azure
permissions:
  contents: read
  id-token: write

env:
  AZURE_FUNCTIONAPP_NAME: 'asora-function-dev'
  AZURE_RESOURCE_GROUP: 'asora-psql-flex'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  NODE_VERSION: '20'
  FUNCTIONS_WORKER_RUNTIME: 'node'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || null }}
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: 'Setup Node.js'
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 'Install Azure Functions Core Tools'
      run: |
        npm i -g azure-functions-core-tools@4.0.5455 --unsafe-perm true

    - name: 'One-time Function App configuration hardening'
      run: |
        echo "üîß Setting Function App runtime configuration..."
        az functionapp config appsettings set \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings FUNCTIONS_EXTENSION_VERSION=~4 \
                    FUNCTIONS_WORKER_RUNTIME=node \
                    WEBSITE_NODE_DEFAULT_VERSION=~20 \
                    WEBSITE_RUN_FROM_PACKAGE=1
        
        echo "üîß Setting Function App runtime stack..."
        az functionapp config set \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --linux-fx-version "NODE|20"

    - name: 'Build TypeScript to JavaScript'
      run: |
        cd functions
        npm ci
        npm run build
        echo "‚úÖ TypeScript compilation completed"

    - name: 'Azure CLI Login via OIDC'
      uses: azure/login@v2  # OIDC is automatic when client-id/tenant-id/subscription-id are provided
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: 'Diagnostic - Verify Authentication'
      run: |
        echo "üîç Diagnostic Information:"
        echo "Expected subject claim: repo:AsoraKK/Asora:ref:refs/heads/main"
        echo "Checking current account..."
        az account show --output table || echo "‚ùå No account available"
        echo "Checking subscription access..."
        az account list --output table || echo "‚ùå No subscriptions available"
        echo "Checking service principal..."
        az ad sp show --id "${{ secrets.AZURE_CLIENT_ID }}" --query "displayName" -o tsv || echo "‚ùå Service principal not accessible"
        echo "Checking resource group access..."
        az group show --name "${{ env.AZURE_RESOURCE_GROUP }}" --query "name" -o tsv || echo "‚ùå Resource group not accessible"

    - name: 'Verify Azure Function App exists'
      run: |
        az functionapp show \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "name" -o tsv

    - name: 'Create deployment package'
      run: |
        cd functions
        
        # Create deployment package with compiled JavaScript
        func pack --javascript --output dist.zip
        
        echo "‚úÖ Deployment package created: dist.zip"

    - name: 'Verify runtime configuration'
      run: |
        echo "üîç Verifying Function App runtime configuration..."
        az functionapp config appsettings list \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          | jq -e '.[] | select(.name=="FUNCTIONS_WORKER_RUNTIME" and .value=="node")' >/dev/null
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ FUNCTIONS_WORKER_RUNTIME is correctly set to 'node'"
        else
          echo "‚ùå FUNCTIONS_WORKER_RUNTIME is not set to 'node'"
          exit 1
        fi

    - name: 'Deploy to Azure Function App'
      run: |
        cd functions
        
        # Deploy using zip deployment
        az functionapp deployment source config-zip \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --src dist.zip

    - name: 'Post-deployment health monitoring'
      run: |
        echo "üè• Starting post-deployment health monitoring..."
        
        # Wait for deployment to stabilize
        sleep 60
        
        # Get Function App URL
        FUNCTION_URL=$(az functionapp show \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "defaultHostName" -o tsv)
        
        echo "Function App URL: https://$FUNCTION_URL"
        
        # Test critical endpoints
        ENDPOINTS=("authEmail" "getMe" "getUserAuth")
        FAILED_ENDPOINTS=()
        
        for endpoint in "${ENDPOINTS[@]}"; do
          echo "Testing /api/$endpoint..."
          HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "https://$FUNCTION_URL/api/$endpoint" -m 30 || echo "000")
          
          if [ "$HTTP_CODE" = "200" ] || [ "$HTTP_CODE" = "401" ] || [ "$HTTP_CODE" = "400" ]; then
            echo "‚úÖ $endpoint: HTTP $HTTP_CODE (OK)"
          else
            echo "‚ùå $endpoint: HTTP $HTTP_CODE (Failed)"
            FAILED_ENDPOINTS+=("$endpoint")
          fi
        done
        
        # Fail deployment if critical endpoints are down
        if [ ${#FAILED_ENDPOINTS[@]} -gt 0 ]; then
          echo "‚ùå Critical endpoints failed: ${FAILED_ENDPOINTS[*]}"
          echo "üö® Deployment validation failed - consider rollback"
          exit 1
        fi
        
        echo "‚úÖ All critical endpoints responding"
        
        # Note: In production, add Application Insights queries here
        echo "üìä Application Insights monitoring should be checked manually"
        echo "üéØ Monitor for: Error rate <1%, p95 latency <200ms over 10 minutes"

    - name: 'Post-deployment configuration'
      run: |
        echo "üéâ Deployment completed successfully!"
        echo "üìç Function App: ${{ env.AZURE_FUNCTIONAPP_NAME }}"
        echo "üìç Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        echo "üìç Environment: ${{ github.event.inputs.environment || 'dev' }}"
        
        # List deployed functions
        echo "üìã Deployed functions:"
        az functionapp function list \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[].{Name:name, Trigger:config.bindings[0].type}" -o table

    - name: 'Cleanup'
      if: always()
      run: |
        # Clean up deployment directory
        rm -rf deployment
        
        # Logout from Azure CLI
        az logout
