name: Deploy Azure Function App

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - production
      force_deploy:
        description: 'Force deployment even if no changes detected'
        required: false
        default: false
        type: boolean

# Required for OIDC authentication with Azure
permissions:
  contents: read
  id-token: write

env:
  AZURE_FUNCTIONAPP_NAME: 'asora-function-dev'
  AZURE_RESOURCE_GROUP: 'asora-psql-flex'
  AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
  NODE_VERSION: '20'
  FUNCTIONS_WORKER_RUNTIME: 'node'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.environment || null }}
    
    steps:
    - name: 'Checkout GitHub Action'
      uses: actions/checkout@v4

    - name: 'Setup Node.js 20'
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: functions/package-lock.json

    - name: 'Login to Azure'
      uses: azure/login@v2
      with:
        client-id: ${{ secrets.AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    - name: 'Verify Azure Authentication'
      run: |
        echo "üîç Verifying Azure OIDC authentication..."
        az account show --output table
        echo "‚úÖ Successfully authenticated with Azure using OIDC (no client secrets used)"
        echo "üìã Current subscription: $(az account show --query name -o tsv)"
        echo "üìã Tenant ID: $(az account show --query tenantId -o tsv)"

    - name: 'Configure Function App for Node 20'
      run: |
        echo "üîß Configuring Function App runtime for Node 20..."
        az functionapp config appsettings set \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings FUNCTIONS_EXTENSION_VERSION=~4 \
                    FUNCTIONS_WORKER_RUNTIME=node \
                    WEBSITE_NODE_DEFAULT_VERSION=~20
        
        echo "üîß Setting Node 20 runtime stack..."
        az functionapp config set \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --linux-fx-version "Node|20"

    - name: 'Install, Build, and Deploy (azd)'
      working-directory: .
      env:
        HUSKY: "0"
        NPM_CONFIG_AUDIT: "false"
        NPM_CONFIG_FUND: "false"
      run: |
        echo "üì¶ Installing dependencies for functions..."
        pushd functions || exit 1
        npm ci
        npm run build || echo "No build script"
        popd

        echo "ÔøΩ Deploying Asora to Azure using azd..."
        azd init --template . --no-prompt || true
        azd env new asora-dev --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" --location eastus2 --no-prompt || azd env select asora-dev
        azd up --no-prompt

    - name: 'Configure Key Vault References'
      run: |
        echo "üîê Configuring Key Vault references for secrets..."
        
        # Get the Key Vault name (includes environment and random suffix)
        KV_NAME=$(az keyvault list \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[?starts_with(name, 'asora-kv-dev-')].name" \
          -o tsv)
        
        echo "üìã Using Key Vault: $KV_NAME"
        
        # Configure Key Vault references for all secrets
        az functionapp config appsettings set \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --settings \
            "JWT_SECRET=@Microsoft.KeyVault(VaultName=${KV_NAME};SecretName=jwt-secret)" \
            "COSMOS_ENDPOINT=@Microsoft.KeyVault(VaultName=${KV_NAME};SecretName=cosmos-endpoint)" \
            "COSMOS_KEY=@Microsoft.KeyVault(VaultName=${KV_NAME};SecretName=cosmos-key)" \
            "POSTGRES_CONNECTION_STRING=@Microsoft.KeyVault(VaultName=${KV_NAME};SecretName=postgres-connection-string)" \
            "HIVE_TEXT_KEY=@Microsoft.KeyVault(VaultName=${KV_NAME};SecretName=hive-text-key)" \
            "HIVE_IMAGE_KEY=@Microsoft.KeyVault(VaultName=${KV_NAME};SecretName=hive-image-key)" \
            "HIVE_DEEPFAKE_KEY=@Microsoft.KeyVault(VaultName=${KV_NAME};SecretName=hive-deepfake-key)" \
            "EMAIL_HASH_SALT=@Microsoft.KeyVault(VaultName=${KV_NAME};SecretName=email-hash-salt)"
        
        echo "üîÑ Restarting Function App to apply Key Vault references..."
        az functionapp restart \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }}
        
        echo "‚è≥ Waiting for Function App to start..."
        sleep 30

    - name: 'Post-deployment validation'
      run: |
        echo "‚úÖ Deployment completed successfully!"
        echo "üìç Function App: ${{ env.AZURE_FUNCTIONAPP_NAME }}"
        echo "üìç Resource Group: ${{ env.AZURE_RESOURCE_GROUP }}"
        echo "üîç Verifying Function App Node version..."
        az functionapp config show \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "linuxFxVersion" -o tsv
        echo "üîç Checking app settings for Node version..."
        az functionapp config appsettings list \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[?name=='WEBSITE_NODE_DEFAULT_VERSION'].value" -o tsv

    - name: 'Verify Key Vault References'
      run: |
        echo "üîê Verifying Key Vault references are configured..."
        
        # Check if Key Vault references are properly set
        KV_REFS=$(az functionapp config appsettings list \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "[?contains(value, '@Microsoft.KeyVault')].{name:name, value:value}" \
          -o table)
        
        echo "üìã Key Vault references configured:"
        echo "$KV_REFS"
        
        # Count expected Key Vault references
        KV_COUNT=$(az functionapp config appsettings list \
          --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --query "length([?contains(value, '@Microsoft.KeyVault')])" \
          -o tsv)
        
        echo "üìä Found $KV_COUNT Key Vault references"
        
        # Verify we have the expected Key Vault references
        EXPECTED_SECRETS=("JWT_SECRET" "COSMOS_ENDPOINT" "COSMOS_KEY" "POSTGRES_CONNECTION_STRING" "HIVE_TEXT_KEY" "HIVE_IMAGE_KEY" "HIVE_DEEPFAKE_KEY" "EMAIL_HASH_SALT")
        
        echo "üîç Verifying individual Key Vault references..."
        for secret in "${EXPECTED_SECRETS[@]}"; do
          SECRET_VALUE=$(az functionapp config appsettings list \
            --name ${{ env.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --query "[?name=='$secret'].value" \
            -o tsv)
          
          if [[ $SECRET_VALUE == *"@Microsoft.KeyVault"* ]]; then
            echo "‚úÖ $secret: Key Vault reference configured"
          else
            echo "‚ùå $secret: Missing or not a Key Vault reference"
            exit 1
          fi
        done
        
        # Verify Function App health
        echo "üè• Checking Function App health..."
        APP_URL="https://${{ env.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net"
        
        # Wait for app to be ready
        echo "‚è≥ Waiting for Function App to be ready..."
        for i in {1..12}; do
          HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" || echo "000")
          if [[ "$HTTP_STATUS" == "200" || "$HTTP_STATUS" == "404" ]]; then
            echo "‚úÖ Function App is responding (HTTP $HTTP_STATUS)"
            break
          fi
          echo "‚è≥ Attempt $i/12: Function App not ready yet (HTTP $HTTP_STATUS), waiting..."
          sleep 15
        done
        
        # Final health check
        if [[ "$HTTP_STATUS" == "000" ]]; then
          echo "‚ùå Function App is not responding after 3 minutes"
          exit 1
        fi
        
        echo "‚úÖ Key Vault references verification completed successfully!"
        echo "üéâ Function App is healthy and Key Vault integration is working!"
