name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-
      - name: Pub get
        run: flutter pub get
      - run: flutter test --coverage
      - name: Enforce P1 coverage gate
        run: bash check_p1_coverage.sh

  functions_build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Detect lockfile drift (no auto-heal)
        run: |
          npm install --package-lock-only
          if ! git diff --quiet -- package-lock.json; then
            echo "Lockfile drift detected. Run 'npm install' in functions/ and commit the updated package-lock.json."
            git --no-pager diff -- package-lock.json | cat
            exit 1
          fi
          git checkout -- package-lock.json

      - name: npm ci (strict)
        run: npm ci

      - name: Test
        run: npm test

      - name: Build (TS -> dist + copy function.json)
        run: npm run build-v3

      - name: Verify function.json in dist
        shell: bash
        run: |
          shopt -s globstar
          count=$(ls -1 dist/**/function.json | wc -l)
          if [ "$count" -eq 0 ]; then
            echo "No function.json found under dist/"
            exit 1
          fi
          echo "Found $count function.json file(s)"

      - name: Create deployable zip from dist
        run: |
          test -d dist || { echo "dist/ missing"; exit 1; }
          cd dist && zip -r ../functions.zip . && cd ..

      - uses: actions/upload-artifact@v4
        with:
          name: functions-artifact
          path: functions/functions.zip
          if-no-files-found: error

  deploy_azure:
    name: Deploy to Azure
    needs: [tests, functions_build]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: functions-artifact
          # Place the downloaded artifact under ./functions to ensure a stable path
          path: functions

      - name: Az login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      - name: Detect plan and runtime (diagnostic)
        id: detect
        continue-on-error: true
        shell: bash
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
        run: |
          set -euo pipefail
          PLAN_ID=$(az functionapp show -n "$APP" -g "$RG" --query serverFarmId -o tsv || true)
          echo "Plan resource: ${PLAN_ID:-<none>}"
          if [ -n "${PLAN_ID:-}" ]; then
            PLAN_TIER=$(az resource show --ids "$PLAN_ID" --query sku.tier -o tsv || true)
          else
            PLAN_TIER="unknown"
          fi
          KIND=$(az functionapp show -n "$APP" -g "$RG" --query kind -o tsv)
          LFX=$(az functionapp config show -n "$APP" -g "$RG" --query linuxFxVersion -o tsv)
          echo "Plan tier: $PLAN_TIER"
          echo "Kind: $KIND"
          echo "linuxFxVersion: $LFX"
          {
            echo "plan_tier=$PLAN_TIER"
            echo "kind=$KIND"
            echo "linuxFxVersion=$LFX"
          } >> "$GITHUB_OUTPUT"

      - name: Ensure Node 20 runtime (idempotent, multi-platform)
        shell: bash
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
        run: |
          set -euo pipefail
          # Determine kind and plan tier on-the-fly so we don't depend on prior outputs
          KIND=$(az functionapp show -n "$APP" -g "$RG" --query kind -o tsv)
          PLAN_ID=$(az functionapp show -n "$APP" -g "$RG" --query serverFarmId -o tsv || true)
          if [ -n "${PLAN_ID:-}" ]; then
            PLAN_TIER=$(az resource show --ids "$PLAN_ID" --query sku.tier -o tsv || true)
          else
            PLAN_TIER="unknown"
          fi

          echo "App kind: $KIND"
          echo "Plan tier: $PLAN_TIER"

          if [[ "$KIND" == *linux* ]]; then
            TARGET="NODE|20-lts"
            CUR=$(az functionapp config show -n "$APP" -g "$RG" --query linuxFxVersion -o tsv)
            if [ "$CUR" != "$TARGET" ]; then
              az functionapp config set --name "$APP" --resource-group "$RG" --linux-fx-version "$TARGET"
            fi
            if [ "$PLAN_TIER" = "FlexConsumption" ]; then
              # Flex Consumption: keep v4 only; remove disallowed settings
              az functionapp config appsettings set --name "$APP" --resource-group "$RG" --settings FUNCTIONS_EXTENSION_VERSION=~4
              az functionapp config appsettings delete --name "$APP" --resource-group "$RG" --setting-names FUNCTIONS_WORKER_RUNTIME WEBSITE_NODE_DEFAULT_VERSION || true
            elif [ "$PLAN_TIER" = "unknown" ]; then
              # Unknown plan: choose Flex-safe behavior to avoid failures
              az functionapp config appsettings set --name "$APP" --resource-group "$RG" --settings FUNCTIONS_EXTENSION_VERSION=~4
              az functionapp config appsettings delete --name "$APP" --resource-group "$RG" --setting-names FUNCTIONS_WORKER_RUNTIME WEBSITE_NODE_DEFAULT_VERSION || true
            else
              # Linux Classic/Premium: set worker runtime and default node version
              az functionapp config appsettings set \
                --name "$APP" --resource-group "$RG" \
                --settings FUNCTIONS_EXTENSION_VERSION=~4 FUNCTIONS_WORKER_RUNTIME=node WEBSITE_NODE_DEFAULT_VERSION=~20
            fi
          else
            # Windows plans don't use linuxFxVersion; set runtime via app settings
            az functionapp config appsettings set \
              --name "$APP" --resource-group "$RG" \
              --settings FUNCTIONS_EXTENSION_VERSION=~4 FUNCTIONS_WORKER_RUNTIME=node WEBSITE_NODE_DEFAULT_VERSION=~20
          fi

      - name: Deploy compiled zip
        uses: azure/functions-action@v1
        with:
          app-name: asora-function-dev
          package: ./functions/functions.zip

      - name: Smoke check
        shell: bash
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
        run: |
          set -euo pipefail
          
          # Check function app state
          STATE=$(az functionapp show -n "$APP" -g "$RG" --query state -o tsv)
          if [ "$STATE" != "Running" ]; then
            echo "‚ùå Function App not Running. State: $STATE"
            exit 1
          fi
          echo "‚úÖ Function App state: $STATE"
          
          # Get hostname and test health endpoint
          HOST=$(az functionapp show -n "$APP" -g "$RG" --query defaultHostName -o tsv)
          echo "üåê Testing health endpoint: https://$HOST/api/health"
          
          # Health check with retry logic
          max_attempts=3
          attempt=1
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts..."
            if curl -fsS --max-time 30 "https://$HOST/api/health"; then
              echo "‚úÖ Health check passed"
              break
            elif [ $attempt -eq $max_attempts ]; then
              echo "‚ùå Health check failed after $max_attempts attempts"
              exit 1
            else
              echo "‚ö†Ô∏è Health check failed, retrying in 10 seconds..."
              sleep 10
              ((attempt++))
            fi
          done
          
          # Show deployment summary
          az functionapp show -n "$APP" -g "$RG" \
            --query "{name:name, resourceGroup:resourceGroup, location:location, state:state, host:defaultHostName}" \
            -o table
