---
name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main, develop]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  verify-secrets:
    name: Verify Required Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Ensure required secrets
        run: |
          for k in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            case $k in
              AZURE_CLIENT_ID) v="${{ secrets.AZURE_CLIENT_ID }}" ;;
              AZURE_TENANT_ID) v="${{ secrets.AZURE_TENANT_ID }}" ;;
              AZURE_SUBSCRIPTION_ID) v="${{ secrets.AZURE_SUBSCRIPTION_ID }}" ;;
            esac
            [ -n "$v" ] || { echo "Missing secret: $k"; exit 1; }
          done

  tests:
    name: Flutter Tests
    runs-on: ubuntu-latest
    needs: verify-secrets
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-
      - name: Pub get
        run: flutter pub get
      - run: flutter test --coverage
      - name: Enforce P1 coverage gate
        id: p1_coverage
        continue-on-error: true
        run: |
          set -euo pipefail
          bash check_p1_coverage.sh | tee p1_coverage_output.txt

      - name: Prepare coverage summary
        run: |
          set -euo pipefail
          if [ -f p1_coverage_output.txt ]; then
            {
              echo "### P1 Coverage Report"
              echo
              cat p1_coverage_output.txt
            } > code-coverage-results.md
          else
            echo "Coverage summary unavailable" > code-coverage-results.md
          fi

      - name: Debug GitHub context
        uses: actions/github-script@v7
        with:
          script: |
            core.info(`event=${context.eventName}; isPR=${!!context.issue.number}`);

      - name: Comment coverage on PR
        if: ${{ github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const workspace = process.env.GITHUB_WORKSPACE || '.';
            const summaryPath = path.join(workspace, 'code-coverage-results.md');
            const body = fs.existsSync(summaryPath)
              ? fs.readFileSync(summaryPath, 'utf8')
              : 'Coverage summary unavailable';

            const issueNumber = context.payload.pull_request?.number ?? context.issue?.number;
            if (!issueNumber) {
              core.info('No issue or pull-request context; skipping coverage comment.');
              return;
            }

            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
                body
              });
              core.info('Coverage comment posted successfully');
            } catch (error) {
              if (error?.status === 403) {
                core.info('Skipped coverage comment due to insufficient permissions');
              } else {
                throw error;
              }
            }

      - name: Coverage summary (pushes or forks)
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork }}
        run: |
          echo "## Coverage" >> "$GITHUB_STEP_SUMMARY"
          if test -f code-coverage-results.md; then
            cat code-coverage-results.md >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Coverage summary unavailable" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Fail if coverage below threshold
        if: ${{ steps.p1_coverage.outcome == 'failure' }}
        run: |
          echo "Coverage gate enforcement failed earlier; marking job as failed."
          exit 1

  functions_build:
    runs-on: ubuntu-latest
    needs: verify-secrets
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Detect lockfile drift (no auto-heal)
        run: |
          npm install --package-lock-only
          if ! git diff --quiet -- package-lock.json; then
            echo "Lockfile drift detected. Run 'npm install' in functions/ and commit the updated package-lock.json."
            git --no-pager diff -- package-lock.json | cat
            exit 1
          fi
          git checkout -- package-lock.json

      - name: Guard against UTF-8 BOMs
        run: bash ../scripts/check-bom.sh

      - name: npm ci (strict)
        run: npm ci

      - name: Test
        run: npm test

      - name: Build (TS -> dist)
        run: npm run build

      - name: Package Azure Functions v4 zip
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          echo "Root: $ROOT"
          echo "Packing v4 artifact..."
          rm -rf "$ROOT/deploy" "$ROOT/dist-v4-final.zip"
          mkdir -p "$ROOT/deploy"

          # host.json lives at repo root, include it at zip root
          cp "$ROOT/host.json" "$ROOT/deploy/"

          # include functions package.json
          cp "$ROOT/functions/package.json" "$ROOT/deploy/"

          # compiled output (copy entire dist to preserve relative imports)
          test -d "$ROOT/functions/dist" || { echo "functions/dist missing"; exit 1; }
          cp -R "$ROOT/functions/dist/"* "$ROOT/deploy/"

          # create thin root entrypoint for v4 runtime
          cp "$ROOT/functions/runtime-index.js" "$ROOT/deploy/index.js"

          # CRITICAL: Copy function directories with function.json files
          echo "Copying function directories..."
          for func_dir in health feed; do
            if [ -d "$ROOT/functions/$func_dir" ]; then
              echo "  Copying $func_dir..."
              mkdir -p "$ROOT/deploy/$func_dir"
              cp "$ROOT/functions/$func_dir/function.json" "$ROOT/deploy/$func_dir/"
            else
              echo "  Warning: $func_dir directory not found"
            fi
          done

          # production node_modules
          # re-install prod deps in functions and copy
          pushd "$ROOT/functions" >/dev/null
          npm ci --omit=dev
          popd >/dev/null
          cp -R "$ROOT/functions/node_modules" "$ROOT/deploy/node_modules"

          # Verify package structure before zipping
          echo "Package contents:"
          find "$ROOT/deploy" -name "*.json" | sort

          # create zip
          pushd "$ROOT/deploy" >/dev/null
          zip -r ../dist-v4-final.zip . -x "*.DS_Store" "*.git*" "Thumbs.db"
          popd >/dev/null
          echo "Created $ROOT/dist-v4-final.zip"

      - uses: actions/upload-artifact@v4
        with:
          name: functions-v4-artifact
          path: dist-v4-final.zip
          if-no-files-found: error

  deploy_azure:
    name: Deploy to Azure
    needs: [verify-secrets, tests, functions_build]
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) || (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'develop')) }}
    permissions:
      id-token: write
      contents: read
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Validate Azure credentials
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -euo pipefail
          for var in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            if [ -z "${!var}" ]; then
              echo "::error::$var is not configured in repository secrets";
              exit 1;
            fi
          done

      - uses: actions/download-artifact@v4
        with:
          name: functions-v4-artifact
          path: .

      - name: Isolate Azure CLI cache (per-run)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$RUNNER_TEMP/azcfg"
          echo "AZURE_CONFIG_DIR=$RUNNER_TEMP/azcfg" >> "$GITHUB_ENV"

      - name: Pre-clear MSAL HTTP cache (NormalizedResponse mitigation)
        shell: bash
        run: |
          set -euo pipefail
          CACHE_DIR="${AZURE_CONFIG_DIR:-$HOME/.azure}"
          rm -f "$CACHE_DIR/msal_http_cache.bin" "$CACHE_DIR/msal_token_cache.json" || true
          echo "Pre-cleared MSAL caches"

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Select subscription and show context
        shell: bash
        env:
          SUBS: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -euo pipefail
          if [ -z "${SUBS:-}" ]; then
            echo "::error::SUBS is not set"
            exit 1
          fi
          az cloud set -n AzureCloud
          az account set --subscription "$SUBS"
          az account show --output table

      - name: Resolve function host and key
        shell: bash
        env:
          SUBS: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RG: asora-psql-flex
          APP: asora-function-dev
          API_VERSION: 2022-03-01
        run: |
          set -euo pipefail
          if [ -z "${SUBS:-}" ]; then
            echo "::error::SUBS environment variable is required"
            exit 1
          fi

          echo "Requesting ARM access token..."
          az account get-access-token --resource https://management.azure.com --output none

          APP_URL="https://management.azure.com/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}?api-version=${API_VERSION}"
          echo "Fetching site metadata from ARM..."
          ARM_ERR="$(mktemp)"
          if ! APP_JSON=$(az rest --method get --url "$APP_URL" 2>"$ARM_ERR"); then
            echo "::error::Failed to retrieve Function App metadata via ARM"
            cat "$ARM_ERR" >&2 || true
            rm -f "$ARM_ERR"
            exit 1
          fi
          rm -f "$ARM_ERR"

          HOST=$(jq -r '.properties.defaultHostName // empty' <<<"$APP_JSON")
          if [ -z "$HOST" ]; then
            echo "::error::defaultHostName not returned by ARM"
            exit 1
          fi
          echo "Detected function host: $HOST"
          echo "FUNCTION_BASE_URL=https://${HOST}" >> "$GITHUB_ENV"
          echo "BASE_URL=https://${HOST}" >> "$GITHUB_ENV"

          KEYS_URL="https://management.azure.com/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}/host/default/listkeys?api-version=${API_VERSION}"
          echo "Attempting host key discovery..."
          FUNCTION_KEY="anonymous"
          KEYS_ERR="$(mktemp)"
          if KEYS_RESPONSE=$(az rest --method post --url "$KEYS_URL" --headers Content-Type=application/json --body "{}" 2>"$KEYS_ERR"); then
            PARSED_KEY=$(jq -r '.masterKey // .functionKeys.default // empty' <<<"$KEYS_RESPONSE" 2>/dev/null || echo "")
            if [ -n "$PARSED_KEY" ]; then
              FUNCTION_KEY="$PARSED_KEY"
              echo "Host key retrieved successfully."
            else
              echo "::warning::Host keys response did not include a usable key; continuing with anonymous access"
            fi
          else
            if grep -q "403" "$KEYS_ERR" 2>/dev/null; then
              echo "::warning::Host key discovery returned 403 (insufficient RBAC); continuing with anonymous access"
            else
              echo "::warning::Host key discovery failed; continuing with anonymous access"
            fi
            cat "$KEYS_ERR" >&2 || true
          fi
          rm -f "$KEYS_ERR"

          echo "FUNCTION_KEY=${FUNCTION_KEY}" >> "$GITHUB_ENV"
          echo "Function base URL: https://${HOST}"
          if [ "$FUNCTION_KEY" = "anonymous" ]; then
            echo "Proceeding without function host key."
          fi

      - name: Detect plan tier
        id: plantier
        shell: bash
        run: |
          set -euo pipefail
          PLAN_ID=$(az functionapp show -n asora-function-dev -g asora-psql-flex 2>/dev/null | grep -o '"serverFarmId": "[^"]*"' | cut -d'"' -f4 || true)
          if [ -n "${PLAN_ID:-}" ]; then
            TIER=$(az resource show --ids "$PLAN_ID" --query sku.tier -o tsv 2>/dev/null || echo "")
          else
            TIER=""
          fi
          echo "tier=${TIER}" >> "$GITHUB_OUTPUT"

      - name: Preflight artifact validation
        shell: bash
        run: |
          set -euo pipefail
          MODE=zip ZIP=dist-v4-final.zip bash .github/scripts/preflight.sh

      - name: Normalize Flex settings for Node 20
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
          SUBS: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          API_VERSION: 2023-01-01
        shell: bash
        run: |
          set -euo pipefail
          bash .github/scripts/normalize_flex.sh

      - name: "C) Deploy via Azure Functions Action (Flex optimized)"
        uses: Azure/functions-action@v1
        with:
          app-name: asora-function-dev
          package: dist-v4-final.zip
          remote-build: false
          respect-funcignore: true

      - name: "D) Post-deploy verification with admin API"
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
          SUBS: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        shell: bash
        run: |
          set -euo pipefail
          az account set --subscription "$SUBS"
          API=2022-03-01

          echo "=== D) Post-Deploy Verification ==="

          # Discover host and key
          echo "Getting site info and host key..."
          SITE=$(az rest --method get --url "https://management.azure.com/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}?api-version=${API}")
          HOST=$(jq -r '.properties.defaultHostName' <<<"$SITE")
          KEYS=$(az rest --method post --url "https://management.azure.com/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}/host/default/listkeys?api-version=${API}" --body "{}" || echo '{}')
          CODE=$(jq -r '.masterKey // .functionKeys.default // empty' <<<"$KEYS")
          QP=""; [ -n "$CODE" ] && QP="?code=$CODE"

          echo "Host: $HOST"
          echo "Admin API available: $([ -n "$CODE" ] && echo "yes" || echo "no (anonymous)")"

          # Wait for deployment to stabilize
          echo "Waiting 30 seconds for deployment to stabilize..."
          sleep 30

          # Check functions indexing (up to 5 minutes)
          for attempt in $(seq 1 10); do
            echo "=== Attempt $attempt/10: Checking function indexing ==="

            # 1) Host status
            echo "Getting host status..."
            if curl -fsS "https://${HOST}/admin/host/status${QP}" -o host_status.json 2>/dev/null; then
              STATUS_STATE=$(jq -r '.state // "unknown"' host_status.json 2>/dev/null || echo "unknown")
              STATUS_ERRORS=$(jq -r '.errors? // []' host_status.json 2>/dev/null || echo "[]")
              echo "Host state: $STATUS_STATE"
              if [ "$STATUS_ERRORS" != "[]" ] && [ "$STATUS_ERRORS" != "null" ]; then
                echo "Host errors detected:"
                jq '.errors' host_status.json 2>/dev/null || true
              fi
            else
              echo "Could not get host status"
              STATUS_STATE="unknown"
            fi

            # 2) Functions list via admin API
            echo "Getting functions list..."
            FUNC_COUNT=0
            if curl -fsS "https://${HOST}/admin/functions${QP}" -o admin_funcs.json 2>/dev/null; then
              FUNC_COUNT=$(jq 'length' admin_funcs.json 2>/dev/null || echo 0)
              echo "Admin API reported functions: $FUNC_COUNT"
              if [ "$FUNC_COUNT" -gt 0 ]; then
                echo "Function list:"
                jq -r '.[] | "  - " + .name + " (" + (.config.bindings[0].type // "unknown") + ")"' admin_funcs.json 2>/dev/null || true
              fi
            else
              echo "Admin API not accessible, trying ARM..."
            fi

            # 3) Fallback to ARM enumeration
            if [ "$FUNC_COUNT" -eq 0 ]; then
              ARM_JSON=$(az rest --method get --url "https://management.azure.com/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}/functions?api-version=2023-01-01" || echo '{}')
              FUNC_COUNT_ARM=$(jq '.value|length' <<<"$ARM_JSON" 2>/dev/null || echo 0)
              echo "ARM API reported functions: $FUNC_COUNT_ARM"
              FUNC_COUNT=$FUNC_COUNT_ARM
            fi

            # Success criteria
            if [ "$FUNC_COUNT" -gt 0 ]; then
              echo "✅ SUCCESS: Functions indexed successfully! Found $FUNC_COUNT functions"
              echo "Host state: $STATUS_STATE"
              exit 0
            fi

            # Show specific errors for troubleshooting
            if [ "$STATUS_STATE" = "Offline" ]; then
              echo "❌ Host is offline - checking for configuration issues"
            elif [ "$STATUS_STATE" = "Error" ]; then
              echo "❌ Host has errors - check logs above"
            else
              echo "⏳ Host running but no functions indexed yet..."
            fi

            [ "$attempt" -lt 10 ] && sleep 30
          done

          echo "❌ FAILURE: Functions not indexed after 5 minutes"
          echo "::group::Diagnostic Information"
          echo "Final host status:"; cat host_status.json 2>/dev/null || echo "No host status"
          echo "Final admin functions:"; cat admin_funcs.json 2>/dev/null || echo "No admin response"
          echo "ARM functions response:"; echo "$ARM_JSON" 2>/dev/null || echo "No ARM response"
          echo "::endgroup::"
          exit 1

      - name: Smoke check
        if: false  # Disabled - use manual testing for now
        shell: bash
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
        run: |
          set -euo pipefail

          echo "Starting deployment smoke test..."

          # Wait for deployment to stabilize
          echo "Waiting for deployment to stabilize..."
          sleep 30

          # Check function app state
          echo "Checking function app state..."
          STATE=$(az functionapp show -n "$APP" -g "$RG" --query state -o tsv)
          echo "Function app state: $STATE"

          if [ "$STATE" != "Running" ]; then
            echo "Function App not running. Current state: $STATE"
            echo "Available function apps:"
            az functionapp list -g "$RG" --query "[].{name:name,state:state,location:location}" -o table || true
            exit 1
          fi

          # Get hostname
          HOST=$(az functionapp show -n "$APP" -g "$RG" --query defaultHostName -o tsv)
          echo "Function app host: $HOST"

          # Test health endpoint with reasonable retries
          echo "Testing health endpoint..."
          max_attempts=5
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"

            if curl -fsS --max-time 30 --connect-timeout 10 "https://$HOST/api/health"; then
              echo ""
              echo "Health check passed!"
              break
            elif [ $attempt -eq $max_attempts ]; then
              echo ""
              echo "Health check failed after $max_attempts attempts"
              echo "Troubleshooting info:"
              echo "- Function app URL: https://$HOST"
              echo "- Health endpoint: https://$HOST/api/health"

              # Show recent logs if available
              echo "Recent application logs:"
              az functionapp logs tail -n "$APP" -g "$RG" --output table 2>/dev/null || echo "No logs available"

              exit 1
            else
              echo " (failed, retrying in 15 seconds...)"
              sleep 15
              attempt=$((attempt + 1))
            fi
          done

          # Show deployment summary
          echo "Deployment Summary:"
          az functionapp show -n "$APP" -g "$RG" \
            --query "{Name:name, ResourceGroup:resourceGroup, Location:location, State:state, Host:defaultHostName, Runtime:kind}" \
            -o table

          echo "Smoke test completed successfully!"
