name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop ]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  id-token: write

jobs:
  tests:
    name: Flutter Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-
      - name: Pub get
        run: flutter pub get
      - run: flutter test --coverage
      - name: Enforce P1 coverage gate
        id: p1_coverage
        continue-on-error: true
        run: |
          set -euo pipefail
          bash check_p1_coverage.sh | tee p1_coverage_output.txt

      - name: Prepare coverage summary
        run: |
          set -euo pipefail
          if [ -f p1_coverage_output.txt ]; then
            {
              echo "### P1 Coverage Report"
              echo
              cat p1_coverage_output.txt
            } > code-coverage-results.md
          else
            echo "Coverage summary unavailable" > code-coverage-results.md
          fi

      - name: Comment P1 coverage
        if: ${{ github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const workspace = process.env.GITHUB_WORKSPACE;
            const candidates = [
              path.join(workspace, 'code-coverage-results.md'),
              path.join(workspace, 'p1_coverage_output.txt')
            ];
            const issue_number = context.issue.number;

            if (!issue_number) {
              core.info('Coverage comment skipped: no issue number in context');
              return;
            }

            let body = 'Coverage summary unavailable.';
            for (const candidate of candidates) {
              if (fs.existsSync(candidate)) {
                const content = fs.readFileSync(candidate, 'utf8').trim();
                if (content) {
                  body = content;
                }
                break;
              }
            }

            core.info(`Comment preview: ${body.slice(0, 200)}${body.length > 200 ? '...' : ''}`);
            core.info(`Comment length: ${body.length} characters`);

            try {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number,
                body: ['### P1 Coverage Report', '```', body, '```'].join('\n')
              });
              core.info('Coverage comment posted successfully');
            } catch (error) {
              if (error.status === 403) {
                core.info('Coverage comment skipped: insufficient permissions (likely forked PR).');
              } else {
                throw error;
              }
            }

      - name: Publish coverage summary to job
        if: ${{ github.event_name != 'pull_request' || github.event.pull_request.head.repo.fork }}
        run: |
          set -euo pipefail
          echo "## Coverage" >> "$GITHUB_STEP_SUMMARY"
          if [ -f code-coverage-results.md ]; then
            echo "Coverage summary found, adding to job summary"
            cat code-coverage-results.md >> "$GITHUB_STEP_SUMMARY"
          elif [ -f p1_coverage_output.txt ]; then
            echo "P1 coverage output found, adding to job summary"
            cat p1_coverage_output.txt >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Coverage summary unavailable" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Fail if coverage below threshold
        if: ${{ steps.p1_coverage.outcome == 'failure' }}
        run: |
          echo "Coverage gate enforcement failed earlier; marking job as failed."
          exit 1

  functions_build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Detect lockfile drift (no auto-heal)
        run: |
          npm install --package-lock-only
          if ! git diff --quiet -- package-lock.json; then
            echo "Lockfile drift detected. Run 'npm install' in functions/ and commit the updated package-lock.json."
            git --no-pager diff -- package-lock.json | cat
            exit 1
          fi
          git checkout -- package-lock.json

      - name: Guard against UTF-8 BOMs
        run: bash ../scripts/check-bom.sh

      - name: npm ci (strict)
        run: npm ci

      - name: Test
        run: npm test

      - name: Build (TS -> dist)
        run: npm run build

      - name: Package Azure Functions v4 zip
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          echo "Root: $ROOT"
          echo "Packing v4 artifact..."
          rm -rf "$ROOT/deploy" "$ROOT/dist-v4-final.zip"
          mkdir -p "$ROOT/deploy"
          
          # host.json lives at repo root, include it at zip root
          cp "$ROOT/host.json" "$ROOT/deploy/"
          
          # include functions package.json
          cp "$ROOT/functions/package.json" "$ROOT/deploy/"
          
          # compiled output (copy entire dist to preserve relative imports)
          test -d "$ROOT/functions/dist" || { echo "functions/dist missing"; exit 1; }
          cp -R "$ROOT/functions/dist/"* "$ROOT/deploy/"
          
          # create thin root entrypoint for v4 runtime
          cp "$ROOT/functions/runtime-index.js" "$ROOT/deploy/index.js"
          
          # CRITICAL: Copy function directories with function.json files
          echo "Copying function directories..."
          for func_dir in health feed; do
            if [ -d "$ROOT/functions/$func_dir" ]; then
              echo "  Copying $func_dir..."
              mkdir -p "$ROOT/deploy/$func_dir"
              cp "$ROOT/functions/$func_dir/function.json" "$ROOT/deploy/$func_dir/"
            else
              echo "  Warning: $func_dir directory not found"
            fi
          done
          
          # production node_modules
          # re-install prod deps in functions and copy
          pushd "$ROOT/functions" >/dev/null
          npm ci --omit=dev
          popd >/dev/null
          cp -R "$ROOT/functions/node_modules" "$ROOT/deploy/node_modules"
          
          # Verify package structure before zipping
          echo "Package contents:"
          find "$ROOT/deploy" -name "*.json" | sort
          
          # create zip
          pushd "$ROOT/deploy" >/dev/null
          zip -r ../dist-v4-final.zip . -x "*.DS_Store" "*.git*" "Thumbs.db"
          popd >/dev/null
          echo "Created $ROOT/dist-v4-final.zip"

      - uses: actions/upload-artifact@v4
        with:
          name: functions-v4-artifact
          path: dist-v4-final.zip
          if-no-files-found: error

  deploy_azure:
    name: Deploy to Azure
    needs: [tests, functions_build]
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) || (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'develop')) }}
    permissions:
      id-token: write
      contents: read
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - name: Validate Azure credentials
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -euo pipefail
          for var in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            if [ -z "${!var}" ]; then
              echo "::error::$var is not configured in repository secrets";
              exit 1;
            fi
          done

      - uses: actions/download-artifact@v4
        with:
          name: functions-v4-artifact
          path: .

      - name: Isolate Azure CLI cache (per-run)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$RUNNER_TEMP/azcfg"
          echo "AZURE_CONFIG_DIR=$RUNNER_TEMP/azcfg" >> "$GITHUB_ENV"

      - name: Pre-clear MSAL HTTP cache (NormalizedResponse mitigation)
        shell: bash
        run: |
          set -euo pipefail
          CACHE_DIR="${AZURE_CONFIG_DIR:-$HOME/.azure}"
          rm -f "$CACHE_DIR/msal_http_cache.bin" "$CACHE_DIR/msal_token_cache.json" || true
          echo "Pre-cleared MSAL caches"

      - name: Azure login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Select subscription and show context
        shell: bash
        env:
          SUBS: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -euo pipefail
          az account set --subscription "$SUBS"
          az account show --output table

      - name: Resolve function host
        shell: bash
        env:
          SUBS: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RG: asora-psql-flex
          APP: asora-function-dev
          API_VERSION: 2022-03-01
        run: |
          set -euo pipefail
          APP_URL="https://management.azure.com/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}?api-version=${API_VERSION}"
          APP_JSON=$(az rest --method get --url "$APP_URL")
          HOST=$(jq -r '.properties.defaultHostName // empty' <<<"$APP_JSON")
          if [ -z "$HOST" ]; then
            echo "::error::defaultHostName not returned by ARM"; exit 1; fi
          echo "Detected function host: $HOST"
          echo "FUNCTION_BASE_URL=https://${HOST}" >> "$GITHUB_ENV"
          echo "BASE_URL=https://${HOST}" >> "$GITHUB_ENV"

      - name: Detect plan tier
        id: plantier
        shell: bash
        run: |
          set -euo pipefail
          PLAN_ID=$(az functionapp show -n asora-function-dev -g asora-psql-flex 2>/dev/null | grep -o '"serverFarmId": "[^"]*"' | cut -d'"' -f4 || true)
          if [ -n "${PLAN_ID:-}" ]; then
            TIER=$(az resource show --ids "$PLAN_ID" --query sku.tier -o tsv 2>/dev/null || echo "")
          else
            TIER=""
          fi
          echo "tier=${TIER}" >> "$GITHUB_OUTPUT"

      - name: "Preflight: confirm build artifacts"
        shell: bash
        run: |
          set -euo pipefail
          test -f dist-v4-final.zip || { echo "::error::dist-v4-final.zip missing"; ls -la; exit 1; }
          
          echo "Verifying package structure..."
          list() { unzip -Z -1 dist-v4-final.zip; }
          list | sed -n '1,200p' || true
          
          # Check for required files at zip root
          for f in index.js package.json host.json; do
            list | grep -Fxq "$f" || { echo "::error::$f missing at zip root"; exit 1; }
          done
          
          # Check for src entry point
          (list | grep -Fx 'src/index.js' >/dev/null) || (list | grep -Fx 'dist/src/index.js' >/dev/null) || { echo "::error::src entry missing"; exit 1; }
          
          # CRITICAL: Check for function.json files in function directories
          function_count=0
          for func in health feed; do
            if list | grep -Fxq "${func}/function.json"; then
              echo "✓ Found ${func}/function.json"
              function_count=$((function_count + 1))
            else
              echo "::error::${func}/function.json missing in artifact"
            fi
          done
          
          if [ "$function_count" -eq 0 ]; then
            echo "::error::No function.json files found in artifact"
            exit 1
          fi
          
          echo "✓ Package verification passed: $function_count functions found"

      - name: Configure runtime settings for Node v4 (Flex-safe)
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
          COSMOS_CONNECTION_STRING: ${{ secrets.COSMOS_CONNECTION_STRING }}
          SUBS: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        shell: bash
        run: |
          set -euo pipefail
          az account set --subscription "$SUBS"

          APP_ID="/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}"
          PLAN_ID="$(az resource show --ids "$APP_ID" --query properties.serverFarmId -o tsv || true)"
          PLAN_TIER=""
          [ -n "$PLAN_ID" ] && PLAN_TIER="$(az resource show --ids "$PLAN_ID" --query sku.tier -o tsv || true)"
          KIND="$(az functionapp show -g "$RG" -n "$APP" --query kind -o tsv || true)"

          echo "Configuring Node.js runtime settings..."
          az functionapp config appsettings set -g "$RG" -n "$APP" -o none --settings \
            AzureWebJobsFeatureFlags=EnableWorkerIndexing \
            FUNCTIONS_NODE_BLOCK_ON_ENTRY_POINT_ERROR=true \
            FUNCTIONS_EXTENSION_VERSION=~4 \
            FUNCTIONS_WORKER_RUNTIME=node \
            WEBSITE_RUN_FROM_PACKAGE=1

          if [ "$PLAN_TIER" = "FlexConsumption" ]; then
            az functionapp config appsettings delete -g "$RG" -n "$APP" --setting-names WEBSITE_NODE_DEFAULT_VERSION || true
            az resource update -g "$RG" -n "$APP/config/web" --resource-type "Microsoft.Web/sites/config" --set properties.linuxFxVersion="" -o none || true
          else
            if [[ "$KIND" == *linux* ]]; then
              az functionapp config set -g "$RG" -n "$APP" --linux-fx-version "node|20" -o none
            fi
            az functionapp config appsettings set -g "$RG" -n "$APP" -o none --settings WEBSITE_NODE_DEFAULT_VERSION=~20
          fi

          if [ -n "${COSMOS_CONNECTION_STRING:-}" ]; then
            az functionapp config appsettings set -g "$RG" -n "$APP" -o none --settings \
              COSMOS_CONNECTION_STRING="$COSMOS_CONNECTION_STRING" \
              COSMOS_DATABASE_NAME="asora"
          fi

          az functionapp restart -g "$RG" -n "$APP" -o none

      - name: Deploy via Zip Deploy
        shell: bash
        run: |
          set -euo pipefail
          echo "Deploying via Zip Deploy with WEBSITE_RUN_FROM_PACKAGE=1..."
          az functionapp deployment source config-zip -g asora-psql-flex -n asora-function-dev --src dist-v4-final.zip --timeout 600

      - name: Fetch host key for admin API
        env:
          RG: asora-psql-flex
          APP: asora-function-dev
          SUBS: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        shell: bash
        run: |
          set -euo pipefail
          az account set --subscription "$SUBS"
          API_VERSION=2022-03-01
          KEYS_URL="https://management.azure.com/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}/host/default/listkeys?api-version=${API_VERSION}"
          KEYS_JSON=$(az rest --method post --url "$KEYS_URL" --headers Content-Type=application/json --body "{}")
          KEY=$(jq -r '.masterKey // .functionKeys.default // empty' <<<"$KEYS_JSON")
          test -n "$KEY" || { echo "::warning::No host key; will try anonymous"; KEY=""; }
          echo "HOST_KEY=$KEY" >> $GITHUB_ENV
          echo "Function host key obtained"

      - name: Verify functions indexed via admin API
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
          SUBS: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        shell: bash
        run: |
          set -euo pipefail
          HOST="${FUNCTION_BASE_URL#https://}"; HOST="${HOST%%/*}"
          CODE_PARAM=""; [ -n "${HOST_KEY:-}" ] && CODE_PARAM="?code=${HOST_KEY}"

          echo "Probing host status and function indexing..."
          
          # Check host status
          echo "Getting host status..."
          curl -fsS "https://${HOST}/admin/host/status${CODE_PARAM}" -o host_status.json || true
          if [ -f host_status.json ]; then
            jq . host_status.json || cat host_status.json
          fi

          # Wait for functions to be indexed (up to 10 minutes)
          for i in $(seq 1 20); do
            echo "Attempt $i/20: Checking function indexing..."
            
            # Try admin API first
            CNT=0
            if curl -fsS "https://${HOST}/admin/functions${CODE_PARAM}" -o admin_funcs.json 2>/dev/null; then
              CNT=$(jq 'length' admin_funcs.json 2>/dev/null || echo 0)
              echo "Admin API reported functions: $CNT"
            else
              echo "Admin API not accessible, trying ARM..."
            fi
            
            # Fallback to ARM enumeration
            if [ "$CNT" -eq 0 ]; then
              ARM_URL="https://management.azure.com/subscriptions/${SUBS}/resourceGroups/${RG}/providers/Microsoft.Web/sites/${APP}/functions?api-version=2023-01-01"
              ARM_JSON=$(az rest --method get --url "$ARM_URL" || echo '{}')
              CNT_ARM=$(jq '.value|length' <<<"$ARM_JSON" 2>/dev/null || echo 0)
              echo "ARM API reported functions: $CNT_ARM"
              CNT=$CNT_ARM
            fi

            if [ "$CNT" -gt 0 ]; then
              echo "✓ Functions indexed successfully! Found $CNT functions"
              if [ -f admin_funcs.json ]; then
                echo "Function list:"
                jq -r '.[] | "  - " + .name + " (" + .config.bindings[0].type + ")"' admin_funcs.json 2>/dev/null || true
              fi
              exit 0
            fi
            
            echo "  No functions indexed yet, waiting 30 seconds..."
            sleep 30
          done
          
          echo "::error::Functions not indexed after 10 minutes"
          echo "::group::Diagnostics"
          echo "Host status:"; cat host_status.json 2>/dev/null || echo "No host status"
          echo "Admin list:"; cat admin_funcs.json 2>/dev/null || echo "No admin response"
          echo "ARM response:"; echo "$ARM_JSON" || echo "No ARM response"
          echo "::endgroup::"
          exit 1

      - name: Smoke check
        if: false  # Disabled - use manual testing for now
        shell: bash
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
        run: |
          set -euo pipefail
          
          echo "Starting deployment smoke test..."
          
          # Wait for deployment to stabilize
          echo "Waiting for deployment to stabilize..."
          sleep 30
          
          # Check function app state
          echo "Checking function app state..."
          STATE=$(az functionapp show -n "$APP" -g "$RG" --query state -o tsv)
          echo "Function app state: $STATE"
          
          if [ "$STATE" != "Running" ]; then
            echo "Function App not running. Current state: $STATE"
            echo "Available function apps:"
            az functionapp list -g "$RG" --query "[].{name:name,state:state,location:location}" -o table || true
            exit 1
          fi
          
          # Get hostname
          HOST=$(az functionapp show -n "$APP" -g "$RG" --query defaultHostName -o tsv)
          echo "Function app host: $HOST"
          
          # Test health endpoint with reasonable retries
          echo "Testing health endpoint..."
          max_attempts=5
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            if curl -fsS --max-time 30 --connect-timeout 10 "https://$HOST/api/health"; then
              echo ""
              echo "Health check passed!"
              break
            elif [ $attempt -eq $max_attempts ]; then
              echo ""
              echo "Health check failed after $max_attempts attempts"
              echo "Troubleshooting info:"
              echo "- Function app URL: https://$HOST"
              echo "- Health endpoint: https://$HOST/api/health"
              
              # Show recent logs if available
              echo "Recent application logs:"
              az functionapp logs tail -n "$APP" -g "$RG" --output table 2>/dev/null || echo "No logs available"
              
              exit 1
            else
              echo " (failed, retrying in 15 seconds...)"
              sleep 15
              attempt=$((attempt + 1))
            fi
          done
          
          # Show deployment summary
          echo "Deployment Summary:"
          az functionapp show -n "$APP" -g "$RG" \
            --query "{Name:name, ResourceGroup:resourceGroup, Location:location, State:state, Host:defaultHostName, Runtime:kind}" \
            -o table
          
          echo "Smoke test completed successfully!"
