# ASORA CI/CD PIPELINE WITH QA GATES
# Purpose: Automated testing, coverage validation, and deployment
# Quality: 80% test coverage requirement for P1 modules
# Metrics: Azure App Insights integration for deployment tracking
# Security: OIDC authentication with Azure

name: Asora CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/**' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

permissions:
  id-token: write
  contents: read
  checks: write
  pull-requests: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  FLUTTER_VERSION: '3.32.6'
  NODE_VERSION: '20.x'

jobs:
  flutter-test:
    name: Flutter tests and coverage
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      p1_coverage: ${{ steps.cov.outputs.p1_coverage }}
      total_coverage: ${{ steps.cov.outputs.total_coverage }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - name: Pub get
        run: flutter pub get

      - name: Analyze
        run: flutter analyze --fatal-infos

      - name: Test with coverage
        run: flutter test --coverage --reporter expanded

      - name: Install coverage tools
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov bc

      - name: Compute coverage (P1 and total)
        id: cov
        run: |
          set -e
          # Extract P1-only coverage (paths are Unix in CI)
          lcov --extract coverage/lcov.info 'lib/p1_modules/*' -o coverage/p1_coverage.info || true

          if [ -s coverage/p1_coverage.info ]; then
            P1=$(lcov --summary coverage/p1_coverage.info | awk '/lines/ {gsub(/%/,"",$2); print $2}')
          else
            P1=0
          fi
          TOTAL=$(lcov --summary coverage/lcov.info | awk '/lines/ {gsub(/%/,"",$2); print $2}')

          echo "p1_coverage=$P1" >> "$GITHUB_OUTPUT"
          echo "total_coverage=$TOTAL" >> "$GITHUB_OUTPUT"
          echo "P1_COVERAGE=$P1" >> "$GITHUB_ENV"
          echo "TOTAL_COVERAGE=$TOTAL" >> "$GITHUB_ENV"

          # Save a human summary
          lcov --summary coverage/p1_coverage.info > coverage/p1_summary.txt 2>/dev/null || echo "No P1 coverage" > coverage/p1_summary.txt

      - name: Enforce P1 ≥ 80%
        run: |
          echo "P1 coverage: $P1_COVERAGE%"
          if ! [[ "$P1_COVERAGE" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            echo "::error::Invalid P1 coverage value: $P1_COVERAGE"
            exit 1
          fi
          pass=$(echo "$P1_COVERAGE >= 80" | bc -l)
          if [ "$pass" -ne 1 ]; then
            missing=$(echo "80 - $P1_COVERAGE" | bc)
            echo "::error::P1 coverage below 80% by ${missing}%"
            exit 1
          fi
          echo "::notice::P1 coverage gate passed"

      - name: Build coverage report
        run: |
          {
            echo "## Test Coverage Report"
            echo ""
            echo "### P1 Modules (gate 80%)"
            echo "- Current: $P1_COVERAGE%"
            echo "- Threshold: 80%"
            echo "- Status: $([ $(echo "$P1_COVERAGE >= 80" | bc -l) -eq 1 ] && echo 'PASS' || echo 'FAIL')"
            echo ""
            echo "### Overall"
            echo "- Total: $TOTAL_COVERAGE%"
            echo ""
            echo "### P1 Summary"
            echo '```'
            cat coverage/p1_summary.txt
            echo '```'
          } > coverage_report.md

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('coverage_report.md','utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: flutter-coverage
          path: |
            coverage/lcov.info
            coverage/p1_coverage.info
            coverage/p1_summary.txt
            coverage_report.md
          retention-days: 30

  functions-test:
    name: Functions lint, build, tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Functions Core Tools
        run: npm i -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Install deps
        working-directory: functions
        run: npm ci --ignore-scripts || npm ci

      - name: Lint
        working-directory: functions
        run: npm run lint:check

      - name: Unit tests
        working-directory: functions
        run: npm run test:with-no-tests

      - name: Build
        working-directory: functions
        run: |
          npm run build
          JS_COUNT=$(find dist -type f -name '*.js' | wc -l)
          echo "Compiled JS files: $JS_COUNT"

      - name: Type check
        working-directory: functions
        run: npx tsc --noEmit

  deploy-dev:
    name: Deploy to Azure (dev)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [ flutter-test, functions-test ]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/'))
    concurrency:
      group: deploy-dev
      cancel-in-progress: true
    permissions:
      id-token: write
      contents: read
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify coverage gate from tests
        run: |
          echo "P1 from tests: ${{ needs.flutter-test.outputs.p1_coverage }}%"
          if [ "$(echo "${{ needs.flutter-test.outputs.p1_coverage }} >= 80" | bc -l)" -ne 1 ]; then
            echo "::error::P1 coverage gate failed; aborting deploy"
            exit 1
          fi

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}


      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Functions Core Tools
        run: npm i -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Set deployment target
        run: |
          echo "AZURE_FUNCTIONAPP_NAME=asora-function-dev" >> $GITHUB_ENV
          echo "DEPLOY_ENV=development" >> $GITHUB_ENV
          echo "AZURE_RESOURCE_GROUP=asora-psql-flex" >> $GITHUB_ENV

      - name: Configure Function App for Node 20
        uses: ./.github/actions/configure-node20-functionapp
        with:
          functionapp-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          resource-group: ${{ env.AZURE_RESOURCE_GROUP }}

      - name: Build functions
        working-directory: functions
        env:
          HUSKY: "0"
          NPM_CONFIG_AUDIT: "false"
          NPM_CONFIG_FUND: "false"
        run: |
          npm ci
          npm run build || echo "No build step"

      - name: Publish
        working-directory: functions
        run: func azure functionapp publish "$AZURE_FUNCTIONAPP_NAME" --javascript --force --build remote

      - name: Verify Key Vault app settings
        run: |
          chmod +x .github/scripts/validate-app-settings.sh
          .github/scripts/validate-app-settings.sh "$AZURE_FUNCTIONAPP_NAME" "$AZURE_RESOURCE_GROUP"

      - name: Resolve app URL
        id: url
        run: |
          HOST=$(az functionapp show -g "$AZURE_RESOURCE_GROUP" -n "$AZURE_FUNCTIONAPP_NAME" --query defaultHostName -o tsv)
          echo "app_url=https://$HOST" >> "$GITHUB_OUTPUT"
          echo "Deployed URL: https://$HOST"

      - name: Health check
        run: |
          URL="${{ steps.url.outputs.app_url }}/api/health"
          for i in {1..10}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo "000")
            echo "Attempt $i: HTTP $code"
            if [ "$code" = "200" ]; then
              echo "Health check succeeded"
              exit 0
            fi
            sleep 5
          done
          echo "::error::Health check failed"
          exit 1

      - name: Emit deployment summary
        run: |
          echo "Environment: $DEPLOY_ENV"
          echo "Commit: ${{ github.sha }}"
          echo "P1 coverage: ${{ needs.flutter-test.outputs.p1_coverage }}%"
          echo "URL: ${{ steps.url.outputs.app_url }}"

  deploy-staging:
    name: Deploy to Azure (staging)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [ flutter-test, functions-test ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    concurrency:
      group: deploy-staging
      cancel-in-progress: true
    permissions:
      id-token: write
      contents: read
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify coverage gate from tests
        run: |
          echo "P1 from tests: ${{ needs.flutter-test.outputs.p1_coverage }}%"
          if [ "$(echo "${{ needs.flutter-test.outputs.p1_coverage }} >= 80" | bc -l)" -ne 1 ]; then
            echo "::error::P1 coverage gate failed; aborting deploy"
            exit 1
          fi

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}


      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Functions Core Tools
        run: npm i -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Set deployment target
        run: |
          echo "AZURE_FUNCTIONAPP_NAME=asora-function-staging" >> $GITHUB_ENV
          echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
          echo "AZURE_RESOURCE_GROUP=asora-psql-flex" >> $GITHUB_ENV

      - name: Configure Function App for Node 20
        run: |
          echo "Configuring Function App runtime and app settings for Node 20..."
          az functionapp config appsettings set \
            --name "$AZURE_FUNCTIONAPP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --settings FUNCTIONS_EXTENSION_VERSION=~4 FUNCTIONS_WORKER_RUNTIME=node WEBSITE_NODE_DEFAULT_VERSION=~20
          az functionapp config set \
            --name "$AZURE_FUNCTIONAPP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --linux-fx-version "Node|20"

      - name: Build functions
        working-directory: functions
        env:
          HUSKY: "0"
          NPM_CONFIG_AUDIT: "false"
          NPM_CONFIG_FUND: "false"
        run: |
          npm ci
          npm run build || echo "No build step"

      - name: Publish
        working-directory: functions
        run: func azure functionapp publish "$AZURE_FUNCTIONAPP_NAME" --javascript --force --build remote
      - name: Verify Key Vault app settings
        run: |
          set -e
          echo "Checking Function App settings for required Key Vault references..."
          settings=$(az functionapp config appsettings list --name "$AZURE_FUNCTIONAPP_NAME" --resource-group "$AZURE_RESOURCE_GROUP")
          required=(JWT_SECRET HIVE_TEXT_KEY HIVE_IMAGE_KEY HIVE_DEEPFAKE_KEY COSMOS_KEY POSTGRES_CONNECTION_STRING)
          fail=0
          for key in "${required[@]}"; do
            value=$(echo "$settings" | jq -r ".[] | select(.name==\"$key\") | .value")
            if [ -z "$value" ] || [ "$value" = "null" ]; then
              echo "::error::Missing app setting: $key"
              fail=1
            elif [[ "$value" != *"@Microsoft.KeyVault"* ]]; then
              echo "::error::$key is not a Key Vault reference"
              fail=1
            fi
          done
          if [ "$fail" -ne 0 ]; then
            echo "::error::App settings validation failed"
            exit 1
          fi

      - name: Resolve app URL
        id: url
        run: |
          HOST=$(az functionapp show -g "$AZURE_RESOURCE_GROUP" -n "$AZURE_FUNCTIONAPP_NAME" --query defaultHostName -o tsv)
          echo "app_url=https://$HOST" >> "$GITHUB_OUTPUT"
          echo "Deployed URL: https://$HOST"

      - name: Health check
        run: |
          URL="${{ steps.url.outputs.app_url }}/api/health"
          for i in {1..10}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo "000")
            echo "Attempt $i: HTTP $code"
            if [ "$code" = "200" ]; then
              echo "Health check succeeded"
              exit 0
            fi
            sleep 5
          done
          echo "::error::Health check failed"
          exit 1

      - name: Emit deployment summary
        run: |
          echo "Environment: $DEPLOY_ENV"
          echo "Commit: ${{ github.sha }}"
          echo "P1 coverage: ${{ needs.flutter-test.outputs.p1_coverage }}%"
          echo "URL: ${{ steps.url.outputs.app_url }}"

  deploy-production:
    name: Deploy to Azure (production)
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: [ flutter-test, functions-test ]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    concurrency:
      group: deploy-production
      cancel-in-progress: true
    permissions:
      id-token: write
      contents: read
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify coverage gate from tests
        run: |
          echo "P1 from tests: ${{ needs.flutter-test.outputs.p1_coverage }}%"
          if [ "$(echo "${{ needs.flutter-test.outputs.p1_coverage }} >= 80" | bc -l)" -ne 1 ]; then
            echo "::error::P1 coverage gate failed; aborting deploy"
            exit 1
          fi

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}


      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Install Functions Core Tools
        run: npm i -g azure-functions-core-tools@4 --unsafe-perm true

      - name: Set deployment target
        run: |
          echo "AZURE_FUNCTIONAPP_NAME=asora-function-production" >> $GITHUB_ENV
          echo "DEPLOY_ENV=production" >> $GITHUB_ENV
          echo "AZURE_RESOURCE_GROUP=asora-production" >> $GITHUB_ENV

      - name: Configure Function App for Node 20
        run: |
          echo "Configuring Function App runtime and app settings for Node 20..."
          az functionapp config appsettings set \
            --name "$AZURE_FUNCTIONAPP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --settings FUNCTIONS_EXTENSION_VERSION=~4 FUNCTIONS_WORKER_RUNTIME=node WEBSITE_NODE_DEFAULT_VERSION=~20
          az functionapp config set \
            --name "$AZURE_FUNCTIONAPP_NAME" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --linux-fx-version "Node|20"

      - name: Build functions
        working-directory: functions
        env:
          HUSKY: "0"
          NPM_CONFIG_AUDIT: "false"
          NPM_CONFIG_FUND: "false"
        run: |
          npm ci
          npm run build || echo "No build step"

      - name: Publish
        working-directory: functions
        run: func azure functionapp publish "$AZURE_FUNCTIONAPP_NAME" --javascript --force --build remote
      - name: Verify Key Vault app settings
        run: |
          set -e
          echo "Checking Function App settings for required Key Vault references..."
          settings=$(az functionapp config appsettings list --name "$AZURE_FUNCTIONAPP_NAME" --resource-group "$AZURE_RESOURCE_GROUP")
          required=(JWT_SECRET HIVE_TEXT_KEY HIVE_IMAGE_KEY HIVE_DEEPFAKE_KEY COSMOS_KEY POSTGRES_CONNECTION_STRING)
          fail=0
          for key in "${required[@]}"; do
            value=$(echo "$settings" | jq -r ".[] | select(.name==\"$key\") | .value")
            if [ -z "$value" ] || [ "$value" = "null" ]; then
              echo "::error::Missing app setting: $key"
              fail=1
            elif [[ "$value" != *"@Microsoft.KeyVault"* ]]; then
              echo "::error::$key is not a Key Vault reference"
              fail=1
            fi
          done
          if [ "$fail" -ne 0 ]; then
            echo "::error::App settings validation failed"
            exit 1
          fi

      - name: Resolve app URL
        id: url
        run: |
          HOST=$(az functionapp show -g "$AZURE_RESOURCE_GROUP" -n "$AZURE_FUNCTIONAPP_NAME" --query defaultHostName -o tsv)
          echo "app_url=https://$HOST" >> "$GITHUB_OUTPUT"
          echo "Deployed URL: https://$HOST"

      - name: Health check
        run: |
          URL="${{ steps.url.outputs.app_url }}/api/health"
          for i in {1..10}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL" || echo "000")
            echo "Attempt $i: HTTP $code"
            if [ "$code" = "200" ]; then
              echo "Health check succeeded"
              exit 0
            fi
            sleep 5
          done
          echo "::error::Health check failed"
          exit 1

      - name: Emit deployment summary
        run: |
          echo "Environment: $DEPLOY_ENV"
          echo "Commit: ${{ github.sha }}"
          echo "P1 coverage: ${{ needs.flutter-test.outputs.p1_coverage }}%"
          echo "URL: ${{ steps.url.outputs.app_url }}"

  cleanup:
    name: Cleanup artifacts
    runs-on: ubuntu-latest
    if: always()
    needs: [ flutter-test, functions-test, deploy-dev, deploy-staging, deploy-production ]
    steps:
      - name: Cleanup
        run: echo "Cleanup complete"


# 📊 Workflow Summary:
# 1. ✅ Run Flutter tests with coverage analysis
# 2. 🎯 Enforce 80% coverage on lib/p1_modules/
# 3. ✅ Run Azure Functions TypeScript tests
# 4. 🚀 Deploy to Azure (dev, staging, or production based on ref)
# 5. 🏥 Post-deployment health checks
# 6. 📊 Emit deployment telemetry
