name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-
      - name: Pub get
        run: flutter pub get
      - run: flutter test --coverage
      - name: Enforce P1 coverage gate
        run: bash check_p1_coverage.sh

  functions_build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Detect lockfile drift (no auto-heal)
        run: |
          npm install --package-lock-only
          if ! git diff --quiet -- package-lock.json; then
            echo "Lockfile drift detected. Run 'npm install' in functions/ and commit the updated package-lock.json."
            git --no-pager diff -- package-lock.json | cat
            exit 1
          fi
          git checkout -- package-lock.json

      - name: Guard against UTF-8 BOMs
        run: bash ../scripts/check-bom.sh

      - name: npm ci (strict)
        run: npm ci

      - name: Test
        run: npm test

      - name: Build (TS -> dist)
        run: npm run build

      - name: Package Azure Functions v4 zip
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          echo "Root: $ROOT"
          echo "Packing v4 artifact..."
          rm -rf "$ROOT/deploy" "$ROOT/dist-v4-final.zip"
          mkdir -p "$ROOT/deploy"
          # host.json lives at repo root, include it at zip root
          cp "$ROOT/host.json" "$ROOT/deploy/"
          # include functions package.json
          cp "$ROOT/functions/package.json" "$ROOT/deploy/"
          # compiled output (copy entire dist to preserve relative imports)
          test -d "$ROOT/functions/dist" || { echo "functions/dist missing"; exit 1; }
          cp -R "$ROOT/functions/dist/"* "$ROOT/deploy/"
          # create thin root entrypoint for v4 runtime
          cp "$ROOT/functions/runtime-index.js" "$ROOT/deploy/index.js"
          # production node_modules
          # re-install prod deps in functions and copy
          pushd "$ROOT/functions" >/dev/null
          npm ci --omit=dev
          popd >/dev/null
          cp -R "$ROOT/functions/node_modules" "$ROOT/deploy/node_modules"
          # create zip
          pushd "$ROOT/deploy" >/dev/null
          zip -r ../dist-v4-final.zip . -x "*.DS_Store" "*.git*" "Thumbs.db"
          popd >/dev/null
          echo "Created $ROOT/dist-v4-final.zip"

      - uses: actions/upload-artifact@v4
        with:
          name: functions-v4-artifact
          path: dist-v4-final.zip
          if-no-files-found: error

  deploy_azure:
    name: Deploy to Azure
    needs: [tests, functions_build]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: functions-v4-artifact
          path: .

      - name: Az login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      - name: Clear MSAL HTTP cache (NormalizedResponse bug)
        shell: bash
        run: |
          set -euo pipefail
          CACHE_DIR="${AZURE_CONFIG_DIR:-$HOME/.azure}"
          rm -f "$CACHE_DIR/msal_http_cache.bin"
      - name: Verify Azure login
        shell: bash
        run: az account show --output table
      - name: Detect plan and runtime (diagnostic)
        id: detect
        continue-on-error: true
        shell: bash
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
        run: |
          set -euo pipefail
          PLAN_ID=$(az functionapp show -n "$APP" -g "$RG" --query serverFarmId -o tsv || true)
          echo "Plan resource: ${PLAN_ID:-<none>}"
          if [ -n "${PLAN_ID:-}" ]; then
            PLAN_TIER=$(az resource show --ids "$PLAN_ID" --query sku.tier -o tsv || true)
          else
            PLAN_TIER="unknown"
          fi
          KIND=$(az functionapp show -n "$APP" -g "$RG" --query kind -o tsv)
          LFX=$(az functionapp config show -n "$APP" -g "$RG" --query linuxFxVersion -o tsv)
          echo "Plan tier: $PLAN_TIER"
          echo "Kind: $KIND"
          echo "linuxFxVersion: $LFX"
          {
            echo "plan_tier=$PLAN_TIER"
            echo "kind=$KIND"
            echo "linuxFxVersion=$LFX"
          } >> "$GITHUB_OUTPUT"

      - name: Ensure Node 20 runtime (idempotent, multi-platform)
        shell: bash
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
        run: |
          set -euo pipefail
          # Determine kind and plan tier on-the-fly so we don't depend on prior outputs
          KIND=$(az functionapp show -n "$APP" -g "$RG" --query kind -o tsv)
          PLAN_ID=$(az functionapp show -n "$APP" -g "$RG" --query serverFarmId -o tsv || true)
          if [ -n "${PLAN_ID:-}" ]; then
            PLAN_TIER=$(az resource show --ids "$PLAN_ID" --query sku.tier -o tsv || true)
          else
            PLAN_TIER="unknown"
          fi

          echo "App kind: $KIND"
          echo "Plan tier: $PLAN_TIER"

          if [[ "$KIND" == *linux* ]]; then
            if [ "$PLAN_TIER" != "FlexConsumption" ]; then
              TARGET_PRIMARY="NODE|20-lts"
              TARGET_FALLBACK="NODE|20"
              CUR=$(az functionapp config show -n "$APP" -g "$RG" --query linuxFxVersion -o tsv || true)

              if [ "$CUR" != "$TARGET_PRIMARY" ] && [ "$CUR" != "$TARGET_FALLBACK" ]; then
                echo "Setting linuxFxVersion to $TARGET_PRIMARY (with fallback to $TARGET_FALLBACK)"
                if ! az functionapp config set --name "$APP" --resource-group "$RG" --linux-fx-version "$TARGET_PRIMARY"; then
                  echo "Primary ($TARGET_PRIMARY) failed; falling back to $TARGET_FALLBACK"
                  az functionapp config set --name "$APP" --resource-group "$RG" --linux-fx-version "$TARGET_FALLBACK"
                fi
              fi
            else
              echo "Flex Consumption plan detected; clearing linuxFxVersion (platform-managed)."
              az resource update --name "$APP/config/web" \
                --resource-group "$RG" \
                --resource-type "Microsoft.Web/sites/config" \
                --set properties.linuxFxVersion="" -o none || true
            fi
            if [ "$PLAN_TIER" = "FlexConsumption" ]; then
              # Flex Consumption: keep v4 only and avoid default node pinning
              az functionapp config appsettings set --name "$APP" --resource-group "$RG" --settings FUNCTIONS_EXTENSION_VERSION=~4 FUNCTIONS_WORKER_RUNTIME=node
              az functionapp config appsettings delete --name "$APP" --resource-group "$RG" --setting-names WEBSITE_NODE_DEFAULT_VERSION || true
            elif [ "$PLAN_TIER" = "unknown" ]; then
              # Unknown plan: choose Flex-safe behavior to avoid failures
              az functionapp config appsettings set --name "$APP" --resource-group "$RG" --settings FUNCTIONS_EXTENSION_VERSION=~4 FUNCTIONS_WORKER_RUNTIME=node
              az functionapp config appsettings delete --name "$APP" --resource-group "$RG" --setting-names WEBSITE_NODE_DEFAULT_VERSION || true
            else
              # Linux Classic/Premium: set worker runtime and default node version
              az functionapp config appsettings set \
                --name "$APP" --resource-group "$RG" \
                --settings FUNCTIONS_EXTENSION_VERSION=~4 FUNCTIONS_WORKER_RUNTIME=node WEBSITE_NODE_DEFAULT_VERSION=~20
            fi
          else
            # Windows plans don't use linuxFxVersion; set runtime via app settings
            az functionapp config appsettings set \
              --name "$APP" --resource-group "$RG" \
              --settings FUNCTIONS_EXTENSION_VERSION=~4 FUNCTIONS_WORKER_RUNTIME=node WEBSITE_NODE_DEFAULT_VERSION=~20
          fi

      - name: Configure App Settings (dev)
        shell: bash
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
          COSMOS_CONNECTION_STRING: ${{ secrets.COSMOS_CONNECTION_STRING }}
        run: |
          set -euo pipefail

          APP="${APP:?missing}"; RG="${RG:?missing}"

          # 1) Discover kind and plan info
          KIND="$(az functionapp show -n "$APP" -g "$RG" --query kind -o tsv)"
          PLAN_ID="$(az functionapp show -n "$APP" -g "$RG" --query serverFarmId -o tsv || true)"
          PLAN_TIER="unknown"
          if [ -n "${PLAN_ID:-}" ]; then
            PLAN_TIER="$(az resource show --ids "$PLAN_ID" --query sku.tier -o tsv || echo unknown)"
          fi

          # 2) Read current config to help infer Flex if PLAN_TIER is unknown
          CUR_LFX="$(az functionapp config show -n "$APP" -g "$RG" --query linuxFxVersion -o tsv || true)"
          CUR_RUNTIME="$(az functionapp config appsettings list -n "$APP" -g "$RG" --query "[?name=='FUNCTIONS_WORKER_RUNTIME'].value | [0]" -o tsv || true)"

          # 3) Decide Flex vs non-Flex
          IS_FLEX=false
          if [ "${PLAN_TIER}" = "FlexConsumption" ]; then
            IS_FLEX=true
          elif [[ "$KIND" == *linux* ]] && [ -z "${CUR_LFX:-}" ] && [ -z "${CUR_RUNTIME:-}" ]; then
            # Heuristic: Linux app with empty linuxFxVersion and no FUNCTIONS_WORKER_RUNTIME is almost certainly Flex
            IS_FLEX=true
          fi

          echo "App kind: ${KIND}"
          echo "Plan tier: ${PLAN_TIER}"
          echo "Inferred Flex: ${IS_FLEX}"

          if [[ "$KIND" == *linux* ]]; then
            if $IS_FLEX; then
              echo "Flex detected: clearing forbidden settings and keeping v4 only."

              # Keep platform-managed image selection
              az resource update --name "$APP/config/web" \
                --resource-group "$RG" \
                --resource-type "Microsoft.Web/sites/config" \
                --set properties.linuxFxVersion="" -o none || true

              # Delete forbidden or irrelevant settings first to avoid hard errors
              az functionapp config appsettings delete -n "$APP" -g "$RG" --setting-names FUNCTIONS_WORKER_RUNTIME || true
              az functionapp config appsettings delete -n "$APP" -g "$RG" --setting-names WEBSITE_NODE_DEFAULT_VERSION || true

              # Flex runs v4 only. Setting this is allowed and harmless.
              az functionapp config appsettings set -n "$APP" -g "$RG" \
                --settings FUNCTIONS_EXTENSION_VERSION=~4 -o none

            else
              echo "Non-Flex Linux: set Node 20 and runtime."

              TARGET_PRIMARY="NODE|20-lts"
              TARGET_FALLBACK="NODE|20"
              CUR_LFX="${CUR_LFX:-$(az functionapp config show -n "$APP" -g "$RG" --query linuxFxVersion -o tsv || true)}"

              if [ "$CUR_LFX" != "$TARGET_PRIMARY" ] && [ "$CUR_LFX" != "$TARGET_FALLBACK" ]; then
                echo "Setting linuxFxVersion to $TARGET_PRIMARY (fallback $TARGET_FALLBACK)"
                if ! az functionapp config set -n "$APP" -g "$RG" --linux-fx-version "$TARGET_PRIMARY" -o none; then
                  echo "Primary failed; using fallback"
                  az functionapp config set -n "$APP" -g "$RG" --linux-fx-version "$TARGET_FALLBACK" -o none
                fi
              fi

              # Explicit runtime and node default version are required for classic/Premium Linux
              az functionapp config appsettings set -n "$APP" -g "$RG" \
                --settings FUNCTIONS_EXTENSION_VERSION=~4 FUNCTIONS_WORKER_RUNTIME=node WEBSITE_NODE_DEFAULT_VERSION=~20 -o none
            fi

          else
            echo "Windows plan: no linuxFxVersion; set runtime and node default."
            az functionapp config appsettings set -n "$APP" -g "$RG" \
              --settings FUNCTIONS_EXTENSION_VERSION=~4 FUNCTIONS_WORKER_RUNTIME=node WEBSITE_NODE_DEFAULT_VERSION=~20 -o none
          fi

          # Add Cosmos settings for both Flex and non-Flex
          if [ -n "${COSMOS_CONNECTION_STRING:-}" ]; then
            az functionapp config appsettings set -n "$APP" -g "$RG" -o none --settings \
              COSMOS_CONNECTION_STRING='${{ secrets.COSMOS_CONNECTION_STRING }}' \
              COSMOS_DATABASE_NAME='asora'
          else
            echo "::warning::COSMOS_CONNECTION_STRING not provided; host may fail if code requires Cosmos."
          fi

      - name: Deploy Functions v4 zip (config-zip)
        shell: bash
        run: |
          set -euo pipefail
          test -f dist-v4-final.zip || { echo "dist-v4-final.zip missing"; ls -la; exit 1; }
          az functionapp deployment source config-zip \
            -g asora-psql-flex \
            -n asora-function-dev \
            --src dist-v4-final.zip \
            --timeout 600

      - name: Smoke check
        if: false  # Disabled - use manual testing for now
        shell: bash
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
        run: |
          set -euo pipefail
          
          echo "Starting deployment smoke test..."
          
          # Wait for deployment to stabilize
          echo "Waiting for deployment to stabilize..."
          sleep 30
          
          # Check function app state
          echo "Checking function app state..."
          STATE=$(az functionapp show -n "$APP" -g "$RG" --query state -o tsv)
          echo "Function app state: $STATE"
          
          if [ "$STATE" != "Running" ]; then
            echo "Function App not running. Current state: $STATE"
            echo "Available function apps:"
            az functionapp list -g "$RG" --query "[].{name:name,state:state,location:location}" -o table || true
            exit 1
          fi
          
          # Get hostname
          HOST=$(az functionapp show -n "$APP" -g "$RG" --query defaultHostName -o tsv)
          echo "Function app host: $HOST"
          
          # Test health endpoint with reasonable retries
          echo "Testing health endpoint..."
          max_attempts=5
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"
            
            if curl -fsS --max-time 30 --connect-timeout 10 "https://$HOST/api/health"; then
              echo ""
              echo "Health check passed!"
              break
            elif [ $attempt -eq $max_attempts ]; then
              echo ""
              echo "Health check failed after $max_attempts attempts"
              echo "Troubleshooting info:"
              echo "- Function app URL: https://$HOST"
              echo "- Health endpoint: https://$HOST/api/health"
              
              # Show recent logs if available
              echo "Recent application logs:"
              az functionapp logs tail -n "$APP" -g "$RG" --output table 2>/dev/null || echo "No logs available"
              
              exit 1
            else
              echo " (failed, retrying in 15 seconds...)"
              sleep 15
              attempt=$((attempt + 1))
            fi
          done
          
          # Show deployment summary
          echo "Deployment Summary:"
          az functionapp show -n "$APP" -g "$RG" \
            --query "{Name:name, ResourceGroup:resourceGroup, Location:location, State:state, Host:defaultHostName, Runtime:kind}" \
            -o table
          
          echo "Smoke test completed successfully!"
