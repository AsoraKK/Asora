name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write

jobs:
  workflow_lint:
    name: Lint workflows (actionlint + shellcheck)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies (jq, shellcheck)
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq shellcheck

      - name: Download actionlint
        run: |
          set -euo pipefail
          mkdir -p ./bin
          # use a pinned version for reproducibility; or replace with 'latest'
          curl -sSfL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash \
          | bash -s -- 1.7.7 ./bin
          ./bin/actionlint -version

      - name: Run actionlint
        env:
          # Allow known benign ShellCheck classes used in scripts.
          SHELLCHECK_OPTS: "-e SC2086 -e SC2126"
        run: |
          set -euo pipefail
          ./bin/actionlint -color

  validate_extension_bundle:
    name: Validate Azure Functions extension bundle v4
    runs-on: ubuntu-latest
    needs: [workflow_lint]
    steps:
      - uses: actions/checkout@v4

      - name: Validate extension bundle version
        run: |
          set -euo pipefail
          # Check host.json contains [4.*, 5.0.0)
          BUNDLE_VERSION=$(jq -r '.extensionBundle.version' host.json)
          if [[ "$BUNDLE_VERSION" != "[4.*, 5.0.0)" ]]; then
            echo "❌ Extension bundle must be [4.*, 5.0.0), found: $BUNDLE_VERSION"
            exit 1
          fi
          echo "✅ Extension bundle version is correct: $BUNDLE_VERSION"

  openapi_validation:
    name: Lint OpenAPI spec
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: npm ci
        run: npm ci

      - name: Lint OpenAPI spec
        run: npm run openapi:lint

      - name: Bundle OpenAPI spec
        run: npm run openapi:bundle

      - name: Upload bundled spec
        uses: actions/upload-artifact@v4
        with:
          name: openapi-spec
          path: api/openapi/dist/openapi.json

  secret-scan:
    name: Secret scan (gitleaks)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run gitleaks
        run: scripts/secret-scan.sh

  verify-secrets:
    name: Verify required secrets
    runs-on: ubuntu-latest
    steps:
      - name: Ensure required secrets
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -euo pipefail
          for k in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            v="${!k:-}"
            [ -n "$v" ] || { echo "Missing secret: $k"; exit 1; }
          done

  flutter_tests:
    name: Flutter tests + coverage
    runs-on: ubuntu-latest
    needs: [workflow_lint]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-

      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'

      - name: Pub get
        run: flutter pub get

      - name: Test with coverage
        run: flutter test --coverage

      - name: Enforce P1 coverage gate (if script present)
        id: p1_coverage
        continue-on-error: true
        run: |
          set -euo pipefail
          if [ -x ./check_p1_coverage.sh ]; then
            ./check_p1_coverage.sh | tee p1_coverage_output.txt
          else
            echo "check_p1_coverage.sh not present; skipping gate" | tee p1_coverage_output.txt
          fi

      - name: Prepare coverage summary
        run: |
          set -euo pipefail
          {
            echo "### P1 Coverage Report"
            echo
            cat p1_coverage_output.txt 2>/dev/null || echo "Coverage summary unavailable"
          } > code-coverage-results.md

      - name: Comment coverage on PR
        if: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository }}
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const path = require('path');
            const p = path.join(process.env.GITHUB_WORKSPACE || '.', 'code-coverage-results.md');
            const body = fs.existsSync(p) ? fs.readFileSync(p, 'utf8') : 'Coverage summary unavailable';
            const issue_number = context.payload.pull_request.number;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number,
              body
            });

      - name: Coverage summary (job summary)
        run: |
          set -euo pipefail
          echo "## Coverage" >> "$GITHUB_STEP_SUMMARY"
          if test -f code-coverage-results.md; then
            cat code-coverage-results.md >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Coverage summary unavailable" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Fail if coverage gate failed
        if: ${{ steps.p1_coverage.outcome == 'failure' }}
        run: |
          echo "Coverage gate enforcement failed earlier; marking job as failed."
          exit 1

  functions_build:
    name: Build Functions and package artifact
    runs-on: ubuntu-latest
    needs: [workflow_lint]
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v4

      - name: Install jq for guards
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Guard host.json version (root + functions/**)
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          FILES=$(git ls-files -- 'host.json' 'functions/**/host.json' ':!:**/node_modules/**' ':!:**/*.md')
          [ -n "$FILES" ] || { echo "No host.json found"; exit 1; }
          for f in $FILES; do
            jq -e '(."version" == "2.0") or (has("version") == false)' "$f" >/dev/null \
              || { echo "Invalid host.json version in $f"; exit 1; }
          done

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Verify functions build script exists
        run: |
          set -euo pipefail
          jq -e '.scripts.build|length>0' package.json >/dev/null

      - name: npm ci (strict)
        run: npm ci

      - name: Run tests (if present)
        run: |
          set -euo pipefail
          if jq -e '.scripts.test|length>0' package.json >/dev/null 2>&1; then
            npm test
          else
            echo "No test script; skipping"
          fi

      - name: Build (TS -> dist)
        run: npm run build

      - name: Verify dist exists
        run: test -d "$GITHUB_WORKSPACE/functions/dist" || { echo "functions/dist missing"; exit 1; }

      - name: Package Azure Functions v4 zip
        shell: bash
        working-directory: ${{ github.workspace }}
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          echo "Packing v4 artifact..."
          rm -rf -- "$ROOT/deploy" "$ROOT/dist-v4-final.zip"
          mkdir -p "$ROOT/deploy"

          # Root host.json at zip root
          cp -- "$ROOT/host.json" "$ROOT/deploy/host.json"

          # functions package.json (for metadata)
          cp -- "$ROOT/functions/package.json" "$ROOT/deploy/"

          # compiled output: copy entire dist to preserve paths
          test -d "$ROOT/functions/dist" || { echo "functions/dist missing"; exit 1; }
          cp -R -- "$ROOT/functions/dist/." "$ROOT/deploy/"

          # thin entrypoint for v4 runtime
          cp -- "$ROOT/functions/runtime-index.js" "$ROOT/deploy/index.js"

          # function.json directories
          echo "Copying function.json directories..."
          for d in "$ROOT/functions"/*; do
            if [ -f "$d/function.json" ]; then
              bn=$(basename "$d")
              mkdir -p "$ROOT/deploy/$bn"
              cp -- "$d/function.json" "$ROOT/deploy/$bn/"
            fi
          done

          # production node_modules
          pushd "$ROOT/functions" >/dev/null
          npm ci --omit=dev
          popd >/dev/null
          cp -R -- "$ROOT/functions/node_modules" "$ROOT/deploy/node_modules"

          echo "Package contents:"
          find "$ROOT/deploy" -maxdepth 2 -type f -name "*.json" | sort

          (cd "$ROOT/deploy" && zip -r ../dist-v4-final.zip . -x "*.DS_Store" "*.git*" "Thumbs.db")

          echo "Created $ROOT/dist-v4-final.zip"

      - uses: actions/upload-artifact@v4
        with:
          name: functions-v4-artifact
          path: dist-v4-final.zip
          if-no-files-found: error
