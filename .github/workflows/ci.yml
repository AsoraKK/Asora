# NOTE to assistants: Do not upgrade Azure/functions-action here. Keep @v1.
# Upgrades are handled in a separate migration branch with test gates.
#
name: CI

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [main, develop]
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  FORCE_ZIP_DEPLOY: '0'

jobs:
  verify-secrets:
    name: Verify Required Secrets
    runs-on: ubuntu-latest
    steps:
      - name: Ensure required secrets
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          for k in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            v="${!k:-}"
            [ -n "$v" ] || { echo "Missing secret: $k"; exit 1; }
          done

  actionlint:
    name: Workflow lint
    runs-on: ubuntu-latest
    env:
      SHELLCHECK_OPTS: "-e SC2086 -e SC2126"
    steps:
      - uses: actions/checkout@v4
      - name: Run actionlint
        run: |
          set -euo pipefail
          if [ -f actionlint ]; then
            chmod +x actionlint
            ./actionlint -color
          else
            echo "::error::actionlint binary not found in repository"
            exit 1
          fi

  tests:
    name: Flutter Tests
    runs-on: ubuntu-latest
    needs: verify-secrets
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      FORCE_ZIP_DEPLOY: '0'
    steps:
      - uses: actions/checkout@v4
      - name: Install jq, zip, unzip
        run: sudo apt-get update && sudo apt-get install -y jq zip unzip
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-
      - name: Pub get
        run: flutter pub get
      - run: flutter test --coverage
      - name: Enforce P1 coverage gate
        id: p1_coverage
        continue-on-error: true
        run: |
          set -euo pipefail
          bash check_p1_coverage.sh | tee p1_coverage_output.txt

      - name: Prepare coverage summary
        run: |
          set -euo pipefail
          if [ -f p1_coverage_output.txt ]; then
            {
              echo "### P1 Coverage Report"
              echo
              cat p1_coverage_output.txt
            } > code-coverage-results.md
          else
            echo "Coverage summary unavailable" > code-coverage-results.md
          fi

      - name: Debug GitHub context
        uses: actions/github-script@v7.0.1
        with:
          script: |
            core.info(`event=${context.eventName}; isPR=${!!context.issue.number}`);

      - name: Comment coverage on PR
        if: ${{ github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork }}
        uses: actions/github-script@v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const body = fs.existsSync('code-coverage-results.md')
              ? fs.readFileSync('code-coverage-results.md', 'utf8')
              : 'Coverage summary unavailable';
            const pr = context.payload.pull_request?.number;
            if (!pr) {
              core.info('No PR context; skipping');
              return;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr,
              body,
            });

      - name: Coverage summary (pushes or forks)
        run: |
          echo "## Coverage" >> "$GITHUB_STEP_SUMMARY"
          if test -f code-coverage-results.md; then
            cat code-coverage-results.md >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Coverage summary unavailable" >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Fail if coverage below threshold
        if: ${{ steps.p1_coverage.outcome == 'failure' }}
        run: |
          echo "Coverage gate enforcement failed earlier; marking job as failed."
          exit 1

  functions_build:
    runs-on: ubuntu-latest
    needs: verify-secrets
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v4
      - name: Install jq, zip, unzip
        run: sudo apt-get update && sudo apt-get install -y jq zip unzip

      - name: Guard Flex-incompatible settings
        working-directory: ${{ github.workspace }}
        run: bash scripts/check-flex-settings.sh

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Detect lockfile drift (no auto-heal)
        run: |
          npm install --package-lock-only
          if ! git diff --quiet -- package-lock.json; then
            echo "Lockfile drift detected. Run 'npm install' in functions/ and commit the updated package-lock.json."
            git --no-pager diff -- package-lock.json | cat
            exit 1
          fi
          git checkout -- package-lock.json

      - name: Guard against UTF-8 BOMs
        run: bash ../scripts/check-bom.sh

      - name: Guard host.json version
        shell: bash
        run: |
          set -Eeuo pipefail
          mapfile -t FILES < <(git ls-files 'functions/**/host.json' 'host.json' ':!functions/**/node_modules/**')
          [ "${#FILES[@]}" -gt 0 ] || { echo "No host.json found"; exit 1; }
          for f in "${FILES[@]}"; do
            jq -e '."version"=="2.0" or (has("version")==false)' "$f" >/dev/null \
              || { echo "Invalid host.json version in $f"; exit 1; }
          done

      - name: Tripwire against forbidden host versions
        shell: bash
        run: |
          set -Eeuo pipefail
          ! grep -R --line-number '"version"[[:space:]]*:[[:space:]]*"4\.0"' \
            -- 'functions/**' ':!functions/**/node_modules/**' ':!**/*.md' || {
            echo 'Found 4.0 in deployable tree';
            exit 1;
          }

      - name: npm ci (strict)
        run: npm ci

      - name: Test
        run: npm test

      - name: Build (TS -> dist)
        run: npm run build

      - name: Package Azure Functions v4 zip
        shell: bash
        run: |
          set -euo pipefail
          ROOT="$GITHUB_WORKSPACE"
          echo "Root: $ROOT"
          echo "Packing v4 artifact..."
          rm -rf "$ROOT/deploy" "$ROOT/dist-v4-final.zip"
          mkdir -p "$ROOT/deploy"

          # host.json + package.json from canonical functions/ directory
          cp "$ROOT/functions/host.json" "$ROOT/deploy/"
          cp "$ROOT/functions/package.json" "$ROOT/deploy/"

          # compiled output (copy entire dist to preserve relative imports)
          test -d "$ROOT/functions/dist" || { echo "functions/dist missing"; exit 1; }
          # Safely copy dist contents using a guarded ./* glob
          if compgen -G "$ROOT/functions/dist/*" > /dev/null; then
            (cd "$ROOT/functions/dist" && cp -R -- ./* "$ROOT/deploy/")
          else
            echo "::error::functions/dist contains no files"; exit 1
          fi

          # create thin root entrypoint for v4 runtime
          cp "$ROOT/functions/runtime-index.js" "$ROOT/deploy/index.js"

          # Copy any function directory containing a function.json
          echo "Copying function directories..."
          while IFS= read -r d; do
            echo "  Copying $d..."
            mkdir -p "$ROOT/deploy/$d"
            cp "$ROOT/functions/$d/function.json" "$ROOT/deploy/$d/"
          done < <(
            find "$ROOT/functions" -maxdepth 1 -mindepth 1 -type d -printf '%f\n' \
              | grep -v -E '^(dist|node_modules|scripts)$' \
              | xargs -I{} bash -lc 'test -f "functions/{}/function.json" && echo {}'
          )

          # production dependencies only
          (cd "$ROOT/functions" && npm ci --omit=dev)
          cp -R "$ROOT/functions/node_modules" "$ROOT/deploy/node_modules"

          # Verify package structure before zipping
          echo "Package contents:"
          find "$ROOT/deploy" -name "*.json" | sort

          # create zip
          pushd "$ROOT/deploy" >/dev/null
          zip -r ../dist-v4-final.zip . -x "*.DS_Store" "*.git*" "Thumbs.db"
          popd >/dev/null
          echo "Created $ROOT/dist-v4-final.zip"

      - uses: actions/upload-artifact@v4
        with:
          name: functions-v4-artifact
          path: dist-v4-final.zip
          if-no-files-found: error

  deploy_azure:
    name: Deploy to Azure
    needs: [verify-secrets, actionlint, tests, functions_build]
    runs-on: ubuntu-latest
    if: ${{ (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) || (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'develop')) }}
    permissions:
      id-token: write
      contents: read
    environment: dev
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - uses: actions/checkout@v4
      - name: Install jq, zip, unzip
        run: sudo apt-get update && sudo apt-get install -y jq zip unzip

      - name: Validate Azure credentials
        env:
          AZURE_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -euo pipefail
          for var in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            if [ -z "${!var}" ]; then
              echo "::error::$var is not configured in repository secrets";
              exit 1;
            fi
          done

      - uses: actions/download-artifact@v4
        with:
          name: functions-v4-artifact
          path: .

      - name: Isolate AZ cache
        shell: bash
        run: |
          set -euo pipefail
          DIR="$RUNNER_TEMP/azcfg-${GITHUB_RUN_ID}"
          mkdir -p "$DIR"
          echo "AZURE_CONFIG_DIR=$DIR" >> "$GITHUB_ENV"

      - name: Guard action version
        shell: bash
        run: |
          set -euo pipefail
          ! grep -R --line-number -E 'uses:\s*Azure/functions-action@v4' .github/workflows || {
            echo "::error::Do not upgrade to v4 here"; exit 1; }

      - name: Pre-clear MSAL HTTP cache (NormalizedResponse mitigation)
        shell: bash
        run: |
          set -euo pipefail
          CACHE_DIR="${AZURE_CONFIG_DIR:-$HOME/.azure}"
          rm -f "$CACHE_DIR/msal_http_cache.bin" "$CACHE_DIR/msal_token_cache.json" || true
          echo "Pre-cleared MSAL caches"

      - name: Azure login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Force subscription context
        shell: bash
        run: |
          set -euo pipefail
          az account set --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          az account show -o table

      - name: Detect plan tier
        id: plantier
        run: |
          set -euo pipefail
          APP_ID="$(az functionapp show -n asora-function-dev -g asora-psql-flex --query id -o tsv)"
          PLAN_ID="$(az resource show --ids "$APP_ID" --query properties.serverFarmId -o tsv)"
          TIER="$(az resource show --ids "$PLAN_ID" --query sku.tier -o tsv)"
          echo "tier=$TIER" >> "$GITHUB_OUTPUT"

      - name: Preflight artifact validation
        shell: bash
        run: |
          set -euo pipefail
          MODE=zip ZIP=dist-v4-final.zip bash .github/scripts/preflight.sh

      - name: Normalize Flex settings for Node 20
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
          SUBS: ${{ env.AZURE_SUBSCRIPTION_ID }}
          API_VERSION: 2023-01-01
        shell: bash
        run: |
          set -euo pipefail
          bash .github/scripts/normalize_flex.sh

      - name: Deploy Functions
        id: deploy_functions
        uses: Azure/functions-action@v1
        with:
          app-name: asora-function-dev
          package: dist-v4-final.zip
          remote-build: false
          respect-funcignore: false

      # actionlint: allow env FORCE_ZIP_DEPLOY
      - name: ZIP deploy via CLI (non-Flex only)
        if: ${{ steps.plantier.outputs.tier != 'FlexConsumption' && env.FORCE_ZIP_DEPLOY == '1' }}
        env:
          RG: asora-psql-flex
          APP: asora-function-dev
        run: |
          set -euo pipefail
          test -f dist-v4-final.zip
          az functionapp deployment source config-zip -g "$RG" -n "$APP" --src dist-v4-final.zip

      - name: Resolve host and key
        env:
          SUBS: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RG: asora-psql-flex
          APP: asora-function-dev
        run: |
          set -Eeuo pipefail
          retry(){
            local n=0
            local max=6
            local exit_code
            while true; do
              "$@" && break
              exit_code=$?
              if [ "$exit_code" -ge 500 ] || [ "$exit_code" -eq 429 ]; then
                n=$((n + 1))
                if [ "$n" -ge "$max" ]; then
                  exit "$exit_code"
                fi
                sleep $((5 * n))
              else
                exit "$exit_code"
              fi
            done
          }

          HOST="$(retry az functionapp show -g "$RG" -n "$APP" -o tsv --query defaultHostName || echo '')"
          if [ -z "$HOST" ]; then
            API=2022-03-01
            APP_ID="/subscriptions/$SUBS/resourceGroups/$RG/providers/Microsoft.Web/sites/$APP"
            SITE_JSON="$(retry az rest --method get --url "https://management.azure.com${APP_ID}?api-version=${API}")"
            HOST="$(jq -r '.properties.defaultHostName // empty' <<<"$SITE_JSON")"
          fi
          [ -n "$HOST" ] || { echo "::error::Unable to resolve function host"; exit 1; }
          echo "FUNCTION_BASE_URL=https://$HOST" >> "$GITHUB_ENV"

          KEY="$(az functionapp keys list -g "$RG" -n "$APP" -o tsv --query masterKey 2>/dev/null || echo '')"
          echo "FUNCTION_KEY=$KEY" >> "$GITHUB_ENV"
      - name: Verify host and routes
        run: |
          set -euo pipefail
          HOST="${FUNCTION_BASE_URL#https://}"
          QP=""
          [ -n "${FUNCTION_KEY:-}" ] && QP="?code=${FUNCTION_KEY}"
          echo "Host: $HOST"
          if curl -fsS "https://$HOST/admin/host/status$QP" | jq '{state,errors}'; then
            :
          else
            echo "::warning::admin status unavailable"
          fi
          curl -fsS "https://$HOST/admin/functions$QP" | jq length || echo "0"
          curl -isS "https://$HOST/api/health" | head -n1 || true

      - name: Dump site JSON on failure
        if: failure()
        run: |
          set -euo pipefail
          SUBS="${{ secrets.AZURE_SUBSCRIPTION_ID }}"
          RG=asora-psql-flex
          APP=asora-function-dev
          API=2022-03-01
          APP_ID="/subscriptions/$SUBS/resourceGroups/$RG/providers/Microsoft.Web/sites/$APP"
          az rest --method get --url "https://management.azure.com${APP_ID}?api-version=${API}" | jq .

      - name: Smoke check
        if: false  # Disabled - use manual testing for now
        shell: bash
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
        run: |
          set -euo pipefail

          echo "Starting deployment smoke test..."

          # Wait for deployment to stabilize
          echo "Waiting for deployment to stabilize..."
          sleep 30

          # Check function app state
          echo "Checking function app state..."
          STATE=$(az functionapp show -n "$APP" -g "$RG" --query state -o tsv)
          echo "Function app state: $STATE"

          if [ "$STATE" != "Running" ]; then
            echo "Function App not running. Current state: $STATE"
            echo "Available function apps:"
            az functionapp list -g "$RG" --query "[].{name:name,state:state,location:location}" -o table || true
            exit 1
          fi

          # Get hostname
          HOST=$(az functionapp show -n "$APP" -g "$RG" --query defaultHostName -o tsv)
          echo "Function app host: $HOST"

          # Test health endpoint with reasonable retries
          echo "Testing health endpoint..."
          max_attempts=5
          attempt=1

          while [ $attempt -le $max_attempts ]; do
            echo "Health check attempt $attempt/$max_attempts"

            if curl -fsS --max-time 30 --connect-timeout 10 "https://$HOST/api/health"; then
              echo ""
              echo "Health check passed!"
              break
            elif [ $attempt -eq $max_attempts ]; then
              echo ""
              echo "Health check failed after $max_attempts attempts"
              echo "Troubleshooting info:"
              echo "- Function app URL: https://$HOST"
              echo "- Health endpoint: https://$HOST/api/health"

              # Show recent logs if available
              echo "Recent application logs:"
              az functionapp logs tail -n "$APP" -g "$RG" --output table 2>/dev/null || echo "No logs available"

              exit 1
            else
              echo " (failed, retrying in 15 seconds...)"
              sleep 15
              attempt=$((attempt + 1))
            fi
          done

          # Show deployment summary
          echo "Deployment Summary:"
          az functionapp show -n "$APP" -g "$RG" \
            --query "{Name:name, ResourceGroup:resourceGroup, Location:location, State:state, Host:defaultHostName, Runtime:kind}" \
            -o table

          echo "Smoke test completed successfully!"
