name: CI

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: subosito/flutter-action@v2
        with: { flutter-version: '3.32.6' }
      - run: flutter test --coverage

  functions_build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: functions
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json

      - name: Detect lockfile drift (no auto-heal)
        run: |
          npm install --package-lock-only
          if ! git diff --quiet -- package-lock.json; then
            echo "Lockfile drift detected. Run 'npm install' in functions/ and commit the updated package-lock.json."
            git --no-pager diff -- package-lock.json | cat
            exit 1
          fi
          git checkout -- package-lock.json

      - name: npm ci (strict)
        run: npm ci

      - name: Test
        run: npm test

      - name: Build (TS -> dist + copy function.json)
        run: npm run build-v3

      - name: Verify function.json in dist
        shell: bash
        run: |
          shopt -s globstar
          count=$(ls -1 dist/**/function.json | wc -l)
          if [ "$count" -eq 0 ]; then
            echo "No function.json found under dist/"
            exit 1
          fi
          echo "Found $count function.json file(s)"

      - name: Create deployable zip from dist
        run: |
          test -d dist || { echo "dist/ missing"; exit 1; }
          cd dist && zip -r ../functions.zip . && cd ..

      - uses: actions/upload-artifact@v4
        with:
          name: functions-artifact
          path: functions/functions.zip

  deploy_azure:
    name: Deploy to Azure
    needs: [tests, functions_build]
    runs-on: ubuntu-latest
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    environment: dev
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: functions-artifact
          path: .

      - name: Az login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ env.AZURE_CLIENT_ID }}
          tenant-id: ${{ env.AZURE_TENANT_ID }}
          subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}
      - name: Detect plan and runtime (diagnostic)
        id: detect
        continue-on-error: true
        shell: bash
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
        run: |
          set -euo pipefail
          PLAN_ID=$(az functionapp show -n "$APP" -g "$RG" --query serverFarmId -o tsv)
          echo "Plan resource: $PLAN_ID"
          PLAN_TIER=$(az resource show --ids "$PLAN_ID" --query sku.tier -o tsv)
          KIND=$(az functionapp show -n "$APP" -g "$RG" --query kind -o tsv)
          LFX=$(az functionapp config show -n "$APP" -g "$RG" --query linuxFxVersion -o tsv)
          echo "Plan tier: $PLAN_TIER"
          echo "Kind: $KIND"
          echo "linuxFxVersion: $LFX"
          {
            echo "plan_tier=$PLAN_TIER"
            echo "kind=$KIND"
            echo "linuxFxVersion=$LFX"
          } >> "$GITHUB_OUTPUT"

      - name: Ensure Node 20 runtime (idempotent, Linux-only)
        if: ${{ contains(steps.detect.outputs.kind, 'linux') }}
        shell: bash
        env:
          APP: asora-function-dev
          RG: asora-psql-flex
          PLAN_TIER: ${{ steps.detect.outputs.plan_tier }}
        run: |
          set -euo pipefail
          TARGET="NODE|20-lts"
          CUR=$(az functionapp config show -n "$APP" -g "$RG" --query linuxFxVersion -o tsv)
          if [ "$CUR" != "$TARGET" ]; then
            az functionapp config set --name "$APP" --resource-group "$RG" --linux-fx-version "$TARGET"
          fi
          if [ "${PLAN_TIER:-}" = "FlexConsumption" ]; then
            # Flex Consumption: keep v4 only; remove disallowed settings
            az functionapp config appsettings set --name "$APP" --resource-group "$RG" --settings FUNCTIONS_EXTENSION_VERSION=~4
            az functionapp config appsettings delete --name "$APP" --resource-group "$RG" --setting-names FUNCTIONS_WORKER_RUNTIME WEBSITE_NODE_DEFAULT_VERSION || true
          else
            # Classic/Premium: set worker runtime and default node version
            az functionapp config appsettings set \
              --name "$APP" --resource-group "$RG" \
              --settings FUNCTIONS_EXTENSION_VERSION=~4 FUNCTIONS_WORKER_RUNTIME=node WEBSITE_NODE_DEFAULT_VERSION=~20
          fi

      - name: Deploy compiled zip
        uses: azure/functions-action@v1
        with:
          app-name: asora-function-dev
          package: './functions/functions.zip'

      - name: Smoke check
        run: az functionapp show -n asora-function-dev -g asora-psql-flex -o table

